<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Ben's Blog</title><link>https://bensyz.github.io/blog/blogs/</link><description>Recent content in Blogs on Ben's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Apr 2021 19:53:43 +0800</lastBuildDate><atom:link href="https://bensyz.github.io/blog/blogs/index.xml" rel="self" type="application/rss+xml"/><item><title>Gerrit Replication</title><link>https://bensyz.github.io/blog/blogs/gerrit_replication/</link><pubDate>Tue, 27 May 2025 16:02:47 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/gerrit_replication/</guid><description>&lt;p>[toc]&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>&lt;a href="https://gerrit.googlesource.com/plugins/replication/+doc/master/src/main/resources/Documentation/config.md">Gerrit 官方文档&lt;/a>&lt;/p>
&lt;p>&lt;code>replication&lt;/code> 是 Gerrit 提供的插件：当“主服务器”中的相关仓库更新时，会自动同步到“从服务器”，因而可以实现备份，只允许单向流动。它的实现是：用本地的 Unix 帐号，通过 git 向其他服务器 push “本地 Gerrit 工作目录下 git 子目录下的目录仓库”。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：&lt;/p>
&lt;p>&lt;code>replication&lt;/code> 的执行和 Gerrit 软件提供的 git 账户没有关系：&lt;/p>
&lt;ul>
&lt;li>master 端：它不是用 Gerrit 内部的用户来推送到远端的，而是用“启动 Gerrit 软件的 &lt;strong>本地帐号&lt;/strong>”&lt;/li>
&lt;li>slave 端：接收不是走 Gerrit 开放的 ssh 端口。而是走“本地账户”的 ssh 端口（不全对，可以参考 replication 后记）&lt;/li>
&lt;/ul>
&lt;p>由于我希望 slave 端接收到从 master 传过来的 git 后，亦能提供 clone fetch 等只读的服务。而这些服务是受限的，权限信息都在 All-Projects.git, All-Users.git 这两个仓库下，最简单的办法就是 slave 端也用 Gerrit 来发布，以避免权限转化和不统一。同时我还要配置 slave 端设成只读。&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;h3 id="启动两个-docker">启动两个 docker&lt;/h3>
&lt;p>启动两个 docker&lt;/p>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode yaml">&lt;code class="sourceCode yaml">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="co"># docker-compose.yaml&lt;/span>&lt;/span>
&lt;span id="cb1-2">&lt;a href="#cb1-2" aria-hidden="true">&lt;/a>&lt;span class="fu">version&lt;/span>&lt;span class="kw">:&lt;/span>&lt;span class="at"> &lt;/span>&lt;span class="st">&amp;#39;3&amp;#39;&lt;/span>&lt;/span>
&lt;span id="cb1-3">&lt;a href="#cb1-3" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-4">&lt;a href="#cb1-4" aria-hidden="true">&lt;/a>&lt;span class="fu">services&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-5">&lt;a href="#cb1-5" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">gerrit-1&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-6">&lt;a href="#cb1-6" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">image&lt;/span>&lt;span class="kw">:&lt;/span>&lt;span class="at"> gerritcodereview/gerrit:3.4.0&lt;/span>&lt;/span>
&lt;span id="cb1-7">&lt;a href="#cb1-7" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">hostname&lt;/span>&lt;span class="kw">:&lt;/span>&lt;span class="at"> gerrit-1&lt;/span>&lt;/span>
&lt;span id="cb1-8">&lt;a href="#cb1-8" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volumes&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-9">&lt;a href="#cb1-9" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> volume-git-1:/var/gerrit/git&lt;/span>&lt;/span>
&lt;span id="cb1-10">&lt;a href="#cb1-10" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> volume-index-1:/var/gerrit/index&lt;/span>&lt;/span>
&lt;span id="cb1-11">&lt;a href="#cb1-11" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> volume-cache-1:/var/gerrit/cache&lt;/span>&lt;/span>
&lt;span id="cb1-12">&lt;a href="#cb1-12" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">ports&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-13">&lt;a href="#cb1-13" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> &lt;/span>&lt;span class="st">&amp;quot;29418:29418&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb1-14">&lt;a href="#cb1-14" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> &lt;/span>&lt;span class="st">&amp;quot;18080:8080&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb1-15">&lt;a href="#cb1-15" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-16">&lt;a href="#cb1-16" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">gerrit-2&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-17">&lt;a href="#cb1-17" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">image&lt;/span>&lt;span class="kw">:&lt;/span>&lt;span class="at"> gerritcodereview/gerrit:3.4.0&lt;/span>&lt;/span>
&lt;span id="cb1-18">&lt;a href="#cb1-18" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">hostname&lt;/span>&lt;span class="kw">:&lt;/span>&lt;span class="at"> gerrit-2&lt;/span>&lt;/span>
&lt;span id="cb1-19">&lt;a href="#cb1-19" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volumes&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-20">&lt;a href="#cb1-20" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> volume-git-2:/var/gerrit/git&lt;/span>&lt;/span>
&lt;span id="cb1-21">&lt;a href="#cb1-21" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> volume-index-2:/var/gerrit/index&lt;/span>&lt;/span>
&lt;span id="cb1-22">&lt;a href="#cb1-22" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> volume-cache-2:/var/gerrit/cache&lt;/span>&lt;/span>
&lt;span id="cb1-23">&lt;a href="#cb1-23" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">ports&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-24">&lt;a href="#cb1-24" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> &lt;/span>&lt;span class="st">&amp;quot;29419:29418&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb1-25">&lt;a href="#cb1-25" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="kw">-&lt;/span>&lt;span class="at"> &lt;/span>&lt;span class="st">&amp;quot;22001:22&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb1-26">&lt;a href="#cb1-26" aria-hidden="true">&lt;/a>&lt;span class="co"> # - &amp;quot;18081:8080&amp;quot; # 由于我们将其配置成 replica，网页端口是无用的&lt;/span>&lt;/span>
&lt;span id="cb1-27">&lt;a href="#cb1-27" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-28">&lt;a href="#cb1-28" aria-hidden="true">&lt;/a>&lt;span class="fu">volumes&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-29">&lt;a href="#cb1-29" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volume-git-1&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-30">&lt;a href="#cb1-30" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volume-index-1&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-31">&lt;a href="#cb1-31" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volume-cache-1&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-32">&lt;a href="#cb1-32" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volume-git-2&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-33">&lt;a href="#cb1-33" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volume-index-2&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>
&lt;span id="cb1-34">&lt;a href="#cb1-34" aria-hidden="true">&lt;/a>&lt;span class="at"> &lt;/span>&lt;span class="fu">volume-cache-2&lt;/span>&lt;span class="kw">:&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb2">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb2-1">&lt;a href="#cb2-1" aria-hidden="true">&lt;/a>&lt;span class="ex">docker&lt;/span> compose up&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Gerrit docker 中的 site_path 在 &lt;code>/var/gerrit/&lt;/code>，同时家目录也设置成了这个。&lt;/p>
&lt;h3 id="slave-机的配置">slave 机的配置&lt;/h3>
&lt;h4 id="安装配置-sshd">安装配置 &lt;code>sshd&lt;/code>&lt;/h4>
&lt;h5 id="进入-slave-gerrit-2">进入 slave Gerrit 2&lt;/h5>
&lt;p>对 slave 机器的配置，除特殊说明外均需要 root 权限。&lt;/p>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="ex">docker&lt;/span> exec --user root -it gerrit-gerrit-2-1 /bin/bash&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h5 id="替换-centos-源">替换 &lt;code>CentOS&lt;/code> 源&lt;/h5>
&lt;p>由于我用的是 &lt;code>gerrit:3.4.0&lt;/code> 需要替换一下源&lt;/p>
&lt;div class="sourceCode" id="cb4">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb4-1">&lt;a href="#cb4-1" aria-hidden="true">&lt;/a>&lt;span class="co"># https://serverfault.com/questions/1161816/mirrorlist-centos-org-no-longer-resolve&lt;/span>&lt;/span>
&lt;span id="cb4-2">&lt;a href="#cb4-2" aria-hidden="true">&lt;/a>&lt;span class="fu">sed&lt;/span> -i &lt;span class="st">&amp;#39;s/mirror.centos.org/vault.centos.org/g&amp;#39;&lt;/span> /etc/yum.repos.d/CentOS-*.repo&lt;/span>
&lt;span id="cb4-3">&lt;a href="#cb4-3" aria-hidden="true">&lt;/a>&lt;span class="fu">sed&lt;/span> -i &lt;span class="st">&amp;#39;s/^#.*baseurl=http/baseurl=http/g&amp;#39;&lt;/span> /etc/yum.repos.d/CentOS-*.repo&lt;/span>
&lt;span id="cb4-4">&lt;a href="#cb4-4" aria-hidden="true">&lt;/a>&lt;span class="fu">sed&lt;/span> -i &lt;span class="st">&amp;#39;s/^mirrorlist=http/#mirrorlist=http/g&amp;#39;&lt;/span> /etc/yum.repos.d/CentOS-*.repo&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h5 id="安装-openssh-server-和-passwd">安装 &lt;code>openssh-server&lt;/code> 和 &lt;code>passwd&lt;/code>&lt;/h5>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="ex">yum&lt;/span> install -y openssh-server passwd&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h5 id="配置密码">配置密码&lt;/h5>
&lt;div class="sourceCode" id="cb6">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb6-1">&lt;a href="#cb6-1" aria-hidden="true">&lt;/a>&lt;span class="co"># 密码自定义&lt;/span>&lt;/span>
&lt;span id="cb6-2">&lt;a href="#cb6-2" aria-hidden="true">&lt;/a>&lt;span class="va">password=&lt;/span>&lt;span class="st">&amp;quot;&amp;lt;gerrit_password&amp;gt;&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb6-3">&lt;a href="#cb6-3" aria-hidden="true">&lt;/a>&lt;span class="bu">echo&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$password&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="kw">|&lt;/span> &lt;span class="fu">passwd&lt;/span> --stdin -f gerrit&lt;/span>
&lt;span id="cb6-4">&lt;a href="#cb6-4" aria-hidden="true">&lt;/a>&lt;span class="co"># 要删除这个文件，否则 ssh 连上来会报 System is booting up. Unprivileged users are not permitted to log in yet&lt;/span>&lt;/span>
&lt;span id="cb6-5">&lt;a href="#cb6-5" aria-hidden="true">&lt;/a>&lt;span class="co"># https://unix.stackexchange.com/a/487937/442345&lt;/span>&lt;/span>
&lt;span id="cb6-6">&lt;a href="#cb6-6" aria-hidden="true">&lt;/a>&lt;span class="fu">rm&lt;/span> -f /run/nologin&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h5 id="配置-sshd">配置 &lt;code>sshd&lt;/code>&lt;/h5>
&lt;p>Gerrit docker 的入口是 &lt;code>/entrypoint.sh&lt;/code>，由于是使用 &lt;code>gerrit&lt;/code> 用户启动这个脚本的，所以我们不能用 root 的 &lt;code>sshd&lt;/code> 来启动，所以有两种方案：&lt;/p>
&lt;h6 id="方案一-将配置文件的所有权归属给-gerrit">方案一： 将配置文件的所有权归属给 &lt;code>gerrit&lt;/code>&lt;/h6>
&lt;p>由于我们使用的是 docker，故我们可以直接修改默认的 &lt;code>sshd&lt;/code> 的 host keys&lt;/p>
&lt;div class="sourceCode" id="cb7">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb7-1">&lt;a href="#cb7-1" aria-hidden="true">&lt;/a>&lt;span class="fu">ssh-keygen&lt;/span> -A&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb8">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb8-1">&lt;a href="#cb8-1" aria-hidden="true">&lt;/a>&lt;span class="fu">chown&lt;/span> gerrit:gerrit /etc/ssh/sshd_config&lt;/span>
&lt;span id="cb8-2">&lt;a href="#cb8-2" aria-hidden="true">&lt;/a>&lt;span class="fu">chown&lt;/span> gerrit:gerrit /etc/ssh/ssh_host*&lt;/span>
&lt;span id="cb8-3">&lt;a href="#cb8-3" aria-hidden="true">&lt;/a>&lt;span class="co"># 修改 /etc/ssh/sshd_config 的端口、登录选项等信息（建议在配置完成密钥之后关闭密码登录）&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>在 &lt;code>/entrypoint.sh&lt;/code> 的最上面添加 &lt;code>/usr/sbin/sshd&lt;/code>，在重启 docker 的时候会生效。&lt;/p>
&lt;h6 id="方案二gerrit-启动自己的-sshd-使用自己的-sshd_config">方案二：&lt;code>gerrit&lt;/code> 启动自己的 sshd 使用自己的 &lt;code>sshd_config&lt;/code>&lt;/h6>
&lt;p>当我们安装 Gerrit 在物理机器上时，可以由 &lt;code>gerrit&lt;/code> 用户自己启动一个 &lt;code>sshd&lt;/code>，&lt;/p>
&lt;div class="sourceCode" id="cb9">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb9-1">&lt;a href="#cb9-1" aria-hidden="true">&lt;/a>&lt;span class="fu">su&lt;/span> gerrit &lt;span class="co"># 切换到 gerrit 用户&lt;/span>&lt;/span>
&lt;span id="cb9-2">&lt;a href="#cb9-2" aria-hidden="true">&lt;/a>&lt;span class="fu">mkdir&lt;/span> -p ~/.ssh/etc/ssh&lt;/span>
&lt;span id="cb9-3">&lt;a href="#cb9-3" aria-hidden="true">&lt;/a>&lt;span class="fu">ssh-keygen&lt;/span> -A -f ~/.ssh&lt;/span>
&lt;span id="cb9-4">&lt;a href="#cb9-4" aria-hidden="true">&lt;/a>&lt;span class="fu">mv&lt;/span> ~/.ssh/etc/ssh/sshd_host* ~/.ssh&lt;/span>
&lt;span id="cb9-5">&lt;a href="#cb9-5" aria-hidden="true">&lt;/a>&lt;span class="fu">rmdir&lt;/span> --ignore-fail-on-non-empty -p ~/.ssh/etc/ssh&lt;/span>
&lt;span id="cb9-6">&lt;a href="#cb9-6" aria-hidden="true">&lt;/a>&lt;span class="fu">cp&lt;/span> /etc/ssh/sshd_config ~/.ssh/sshd_config&lt;/span>
&lt;span id="cb9-7">&lt;a href="#cb9-7" aria-hidden="true">&lt;/a>&lt;span class="co"># 修改 ~/.ssh/sshd_config 的端口、登录选项等信息（建议在配置完成密钥之后关闭密码登录）&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>在 &lt;code>/entrypoint.sh&lt;/code> 的最上面添加： &lt;code>/usr/sbin/sshd -f /var/gerrit/.ssh/sshd_config&lt;/code>，在重启 docker 的时候会生效。&lt;/p>
&lt;h4 id="配置-replica">配置 replica&lt;/h4>
&lt;p>如果在 Slave 上用 Gerrit 提供服务，需要配置只读，只允许从 master 复制到 slave&lt;/p>
&lt;p>有两种方案，一种是配 &lt;a href="https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#All-Projects-project.config">&lt;code>$site_path/etc/All-Projects/project.config&lt;/code>&lt;/a>，可以覆盖 All-Projects.git 中的配置信息，还有一种就是配置 &lt;a href="https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#container.replica">&lt;code>$site_path/etc/gerrit.config&lt;/code>&lt;/a> 直接配置 replica，后者更合适。&lt;/p>
&lt;div class="sourceCode" id="cb10">&lt;pre class="sourceCode ini">&lt;code class="sourceCode ini">&lt;span id="cb10-1">&lt;a href="#cb10-1" aria-hidden="true">&lt;/a>&lt;span class="kw">[container]&lt;/span>&lt;/span>
&lt;span id="cb10-2">&lt;a href="#cb10-2" aria-hidden="true">&lt;/a>&lt;span class="dt"> replica &lt;/span>&lt;span class="ot">=&lt;/span>&lt;span class="st"> &lt;/span>&lt;span class="kw">true&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb11">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb11-1">&lt;a href="#cb11-1" aria-hidden="true">&lt;/a>&lt;span class="ex">docker&lt;/span> cp --archive gerrit-gerrit-2-1:/var/gerrit/etc/gerrit.config gerrit2.config&lt;/span>
&lt;span id="cb11-2">&lt;a href="#cb11-2" aria-hidden="true">&lt;/a>&lt;span class="ex">docker&lt;/span> cp --archive gerrit2.config gerrit-gerrit-2-1:/var/gerrit/etc/gerrit.config&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ul>
&lt;li>Tips:&lt;/li>
&lt;/ul>
&lt;p>配置只读之后，ssh 的 &lt;code>gerrit query&lt;/code> 等 &lt;code>gerrit&lt;/code> 命令就没有了，网页也是 404 了。&lt;/p>
&lt;pre class="console">&lt;code>bash-4.4$ ssh -p 29419 admin@192.168.3.55 gerrit query status:open
fatal: gerrit: query: not found&lt;/code>&lt;/pre>
&lt;h4 id="移走或者删除-all-project.git-和-all-users.git">移走（或者删除） All-Project.git 和 All-Users.git&lt;/h4>
&lt;p>由于我们想做的是全量备份，这两个仓库直接用 master 的配置就好了，所以进入 &lt;code>$site_path/git&lt;/code>，将里面所有的仓库移到别处备份（明确的话也可以直接删除）。&lt;/p>
&lt;h4 id="重启-gerrit">重启 Gerrit&lt;/h4>
&lt;p>重启 Gerrit 以生效 &lt;code>/entrypoint.sh&lt;/code> 和 &lt;code>gerrit.config&lt;/code>&lt;/p>
&lt;div class="sourceCode" id="cb13">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb13-1">&lt;a href="#cb13-1" aria-hidden="true">&lt;/a>&lt;span class="ex">docker&lt;/span> restart gerrit-gerrit-2-1&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="master-机的配置">master 机的配置&lt;/h3>
&lt;p>参考 &lt;a href="https://gerrit.googlesource.com/plugins/replication/+doc/master/src/main/resources/Documentation/config.md">Gerrit 官方文档&lt;/a>&lt;/p>
&lt;p>https://groups.google.com/g/repo-discuss/c/pJHiB1Vki4U&lt;/p>
&lt;h4 id="进入-master-gerrit-1">进入 master Gerrit 1&lt;/h4>
&lt;p>对 master 机器的配置，除特殊说明外均只需普通用户权限&lt;/p>
&lt;div class="sourceCode" id="cb14">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb14-1">&lt;a href="#cb14-1" aria-hidden="true">&lt;/a>&lt;span class="ex">docker&lt;/span> exec -it gerrit-gerrit-2-1 /bin/bash&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="打通-ssh-通讯">打通 ssh 通讯&lt;/h4>
&lt;ol type="1">
&lt;li>配置 ssh 公钥密钥对，用于无密码传输，Gerrit 要求使用 &lt;code>PEM&lt;/code> 的格式&lt;/li>
&lt;/ol>
&lt;div class="sourceCode" id="cb15">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb15-1">&lt;a href="#cb15-1" aria-hidden="true">&lt;/a>&lt;span class="fu">ssh-keygen&lt;/span> -m PEM -t rsa -C &lt;span class="st">&amp;quot;your_email@example.com&amp;quot;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ol start="2" type="1">
&lt;li>将生成的公钥拷至 slave 服务器的本地用户的 &lt;code>~/.ssh/authorized_keys&lt;/code> （在我们的例子中就是 &lt;code>/var/gerrit/.ssh/authorized_keys&lt;/code>）文件中，详见 &lt;a href="./rsa_ssh/">ssh 免密登录&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Tips: 可以加这个前缀 &lt;code>no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty&lt;/code>&lt;/p>
&lt;ol start="3" type="1">
&lt;li>手动连接 slave 服务器，以添加 slave 服务器的 fingerprint 到 known_hosts&lt;/li>
&lt;/ol>
&lt;p>Tips: 可以用 &lt;code>ssh_config&lt;/code> 来配置细节，另外，在公钥传输完成后，可以将密码登录禁用&lt;/p>
&lt;h4 id="配置-replication.config">配置 &lt;code>replication.config&lt;/code>&lt;/h4>
&lt;div class="sourceCode" id="cb16">&lt;pre class="sourceCode ini">&lt;code class="sourceCode ini">&lt;span id="cb16-1">&lt;a href="#cb16-1" aria-hidden="true">&lt;/a>&lt;span class="co"># $site_path/etc/replication.config&lt;/span>&lt;/span>
&lt;span id="cb16-2">&lt;a href="#cb16-2" aria-hidden="true">&lt;/a>&lt;span class="kw">[remote &amp;quot;gerrit-2&amp;quot;]&lt;/span>&lt;/span>
&lt;span id="cb16-3">&lt;a href="#cb16-3" aria-hidden="true">&lt;/a>&lt;span class="dt">url &lt;/span>&lt;span class="ot">=&lt;/span>&lt;span class="st"> ssh://gerrit@&amp;lt;my_host_ip_addr&amp;gt;:&lt;/span>&lt;span class="dv">22001&lt;/span>&lt;span class="st">/var/gerrit/git/${name}.git&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;!--
```sh
docker cp --archive replication.config gerrit-gerrit-1-1:/var/gerrit/etc/replication.config
```
-->
&lt;p>这里的 URL 就是 clone 时，或者说 push 时的 URL&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;my_host_ip_addr&amp;gt;&lt;/code>：是 host 机的 IP 地址&lt;/li>
&lt;li>&lt;code>22001&lt;/code>：是上面 docker 映射出来的内部的 22 号端口，而不是 Gerrit 的端口&lt;/li>
&lt;li>&lt;code>/var/gerrit/git/${name}.git&lt;/code>：slave 机上的 &lt;code>gerrit&lt;/code> 用户看到的仓库路径。&lt;/li>
&lt;/ul>
&lt;h5 id="重载配置">重载配置&lt;/h5>
&lt;p>master 机这里这里也需要添加上面生成的 ssh key 到 Gerrit 的 admin 用户中，当然你也可以使用本地账户。&lt;/p>
&lt;div class="sourceCode" id="cb17">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb17-1">&lt;a href="#cb17-1" aria-hidden="true">&lt;/a>&lt;span class="co"># 在 gerrit-1 内执行（如果用的是本地账户，则在物理机上执行）&lt;/span>&lt;/span>
&lt;span id="cb17-2">&lt;a href="#cb17-2" aria-hidden="true">&lt;/a>&lt;span class="fu">ssh&lt;/span> -p 29418 admin@127.0.0.1 gerrit plugin reload replication&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="master-触发-replication">master 触发 replication&lt;/h3>
&lt;p>master 机这里用以下命令触发 replication&lt;/p>
&lt;div class="sourceCode" id="cb18">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb18-1">&lt;a href="#cb18-1" aria-hidden="true">&lt;/a>&lt;span class="fu">ssh&lt;/span> -p 29418 admin@127.0.0.1 replication start&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="调试-replication">调试 replication&lt;/h4>
&lt;h5 id="查看-replication-的状态">查看 replication 的状态&lt;/h5>
&lt;div class="sourceCode" id="cb19">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb19-1">&lt;a href="#cb19-1" aria-hidden="true">&lt;/a>&lt;span class="fu">ssh&lt;/span> -p 29418 admin@127.0.0.1 replication list --detail&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h5 id="查看-replication-的日志">查看 replication 的日志&lt;/h5>
&lt;pre>&lt;code>cd $site_path
cat logs/replication_log |grep &amp;#39;^\[2025-&amp;#39;&lt;/code>&lt;/pre>
&lt;h3 id="slave-没有权限">slave 没有权限&lt;/h3>
&lt;p>在重启配置完成后，有可能 ssh 到 slave 的 &lt;code>gerrit&lt;/code> 提示 &lt;code>admin@192.168.3.55: Permission denied (publickey).&lt;/code>。&lt;/p>
&lt;p>解决方式是把 replica 关掉，进到 Welcome 网页（可以直接在机器上访问 docker 的 IP + 8080 的端口。点 &lt;code>Install plugins&lt;/code>，点 &lt;code>Done &amp;gt;&amp;gt; Go To Gerrit&lt;/code>。然后重新打开 replica 就可以了。&lt;/p>
&lt;h3 id="slave-重建索引">slave 重建索引&lt;/h3>
&lt;p>如果没有配置 replica，网页上不会刷新更新的仓库，需要用以下命令刷新一下&lt;/p>
&lt;pre>&lt;code>ssh -p 22001 gerrit@&amp;lt;my_host_ip_addr&amp;gt; gerrit index start projects --force&lt;/code>&lt;/pre>
&lt;h2 id="replication-后记">replication 后记&lt;/h2>
&lt;p>对 slave 端如果有 GitHub 等其他可以接收裸 git 的命令的也可以，甚至可能也可以走 Gerrit 提供的端口，只要 Gerrit 端口允许裸推。从我实验的情况来看，Gerrit replication 在连上 slave 服务器时会执行如下命令：&lt;/p>
&lt;pre>&lt;code>-c mkdir -p &amp;#39;/srv/git/gerrit/test-repo.git&amp;#39; &amp;amp;&amp;amp; cd &amp;#39;/srv/git/gerrit/test-repo.git&amp;#39; &amp;amp;&amp;amp; git init --bare &amp;amp;&amp;amp; git symbolic-ref HEAD &amp;#39;refs/heads/master&amp;#39;
-c git-upload-pack &amp;#39;/srv/git/gerrit/All-Projects.git&amp;#39;
-c git-receive-pack &amp;#39;/srv/git/gerrit/All-Projects.git&amp;#39;&lt;/code>&lt;/pre></description></item><item><title>install NVIDIA supported docker</title><link>https://bensyz.github.io/blog/blogs/install_nvidia_docker/</link><pubDate>Mon, 28 Apr 2025 11:50:29 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/install_nvidia_docker/</guid><description>&lt;h2 id="docker">docker&lt;/h2>
&lt;p>&lt;a href="https://docs.docker.com/engine/install/ubuntu/">official doc&lt;/a>&lt;/p>
&lt;h3 id="装">装&lt;/h3>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="co"># 拷自 official doc&lt;/span>&lt;/span>
&lt;span id="cb1-2">&lt;a href="#cb1-2" aria-hidden="true">&lt;/a>&lt;span class="co"># Add Docker&amp;#39;s official GPG key:&lt;/span>&lt;/span>
&lt;span id="cb1-3">&lt;a href="#cb1-3" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt-get update&lt;/span>
&lt;span id="cb1-4">&lt;a href="#cb1-4" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt-get install ca-certificates curl&lt;/span>
&lt;span id="cb1-5">&lt;a href="#cb1-5" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> install -m 0755 -d /etc/apt/keyrings&lt;/span>
&lt;span id="cb1-6">&lt;a href="#cb1-6" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc&lt;/span>
&lt;span id="cb1-7">&lt;a href="#cb1-7" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> chmod a+r /etc/apt/keyrings/docker.asc&lt;/span>
&lt;span id="cb1-8">&lt;a href="#cb1-8" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-9">&lt;a href="#cb1-9" aria-hidden="true">&lt;/a>&lt;span class="co"># Add the repository to Apt sources:&lt;/span>&lt;/span>
&lt;span id="cb1-10">&lt;a href="#cb1-10" aria-hidden="true">&lt;/a>&lt;span class="bu">echo&lt;/span> &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb1-11">&lt;a href="#cb1-11" aria-hidden="true">&lt;/a> &lt;span class="st">&amp;quot;deb [arch=&lt;/span>&lt;span class="va">$(&lt;/span>&lt;span class="ex">dpkg&lt;/span> --print-architecture&lt;span class="va">)&lt;/span>&lt;span class="st"> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \&lt;/span>&lt;/span>
&lt;span id="cb1-12">&lt;a href="#cb1-12" aria-hidden="true">&lt;/a>&lt;span class="st"> &lt;/span>&lt;span class="va">$(&lt;/span>&lt;span class="bu">.&lt;/span> &lt;span class="ex">/etc/os-release&lt;/span> &lt;span class="kw">&amp;amp;&amp;amp;&lt;/span> &lt;span class="bu">echo&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">${UBUNTU_CODENAME:-$VERSION_CODENAME}&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">)&lt;/span>&lt;span class="st"> stable&amp;quot;&lt;/span> &lt;span class="kw">|&lt;/span> &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb1-13">&lt;a href="#cb1-13" aria-hidden="true">&lt;/a> &lt;span class="fu">sudo&lt;/span> tee /etc/apt/sources.list.d/docker.list &lt;span class="op">&amp;gt;&lt;/span> /dev/null&lt;/span>
&lt;span id="cb1-14">&lt;a href="#cb1-14" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt-get update&lt;/span>
&lt;span id="cb1-15">&lt;a href="#cb1-15" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-16">&lt;a href="#cb1-16" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="配">配&lt;/h3>
&lt;h4 id="user-add-to-docker-group">user add to docker group&lt;/h4>
&lt;div class="sourceCode" id="cb2">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb2-1">&lt;a href="#cb2-1" aria-hidden="true">&lt;/a>&lt;span class="ex">useradd&lt;/span> -a -G docker &lt;span class="op">&amp;lt;&lt;/span>username&lt;span class="op">&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>重登&lt;/p>
&lt;h4 id="add-proxy">add proxy&lt;/h4>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="ex">systemctl&lt;/span> edit docker&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="conf">&lt;code>[Service]
Environment=&amp;quot;HTTP_PROXY=http://localhost:8118&amp;quot;
Environment=&amp;quot;HTTPS_PROXY=http://localhost:8118&amp;quot;&lt;/code>&lt;/pre>
&lt;h2 id="nvidia">NVIDIA&lt;/h2>
&lt;p>分两部分&lt;/p>
&lt;ul>
&lt;li>driver：host 机上要能操作 GPU (&lt;a href="https://docs.nvidia.com/datacenter/tesla/driver-installation-guide/index.html">official doc&lt;/a>)&lt;/li>
&lt;li>container：可以将 GPU 传递到 docker 内 (&lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">official doc&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>可以从 container 的 &lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">official doc&lt;/a> 入手。&lt;/p>
&lt;h3 id="driver">driver&lt;/h3>
&lt;p>container 第一节给了一个链接跳转到 &lt;a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/">cuda-installation doc&lt;/a>，我们不需要在 host 机上装 cuda，所以点右边 &lt;a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/#driver-installation">4. Driver Installation&lt;/a>，直接给了个 &lt;a href="https://docs.nvidia.com/datacenter/tesla/driver-installation-guide/index.html">tesla 的 driver installation doc&lt;/a>&lt;/p>
&lt;h4 id="先下-keyring">先下 keyring&lt;/h4>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="co"># ubuntu2204/x86_64&lt;/span>&lt;/span>
&lt;span id="cb5-2">&lt;a href="#cb5-2" aria-hidden="true">&lt;/a>&lt;span class="fu">wget&lt;/span> https://developer.download.nvidia.com/compute/cuda/repos/&lt;span class="op">&amp;lt;&lt;/span>distro&lt;span class="op">&amp;gt;&lt;/span>/&lt;span class="op">&amp;lt;&lt;/span>arch&lt;span class="op">&amp;gt;&lt;/span>/cuda-keyring_1.1-1_all.deb&lt;/span>
&lt;span id="cb5-3">&lt;a href="#cb5-3" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> dpkg -i cuda-keyring_1.1-1_all.deb&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="下">下&lt;/h4>
&lt;p>选择开源还是闭源驱动可以看 &lt;a href="https://docs.nvidia.com/datacenter/tesla/driver-installation-guide/index.html#kernel-modules">5. Kernel Modules&lt;/a>&lt;/p>
&lt;p>新的是 open source 的 driver 的&lt;/p>
&lt;div class="sourceCode" id="cb6">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb6-1">&lt;a href="#cb6-1" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt-get update&lt;/span>
&lt;span id="cb6-2">&lt;a href="#cb6-2" aria-hidden="true">&lt;/a>&lt;span class="ex">apt&lt;/span> install nvidia-open&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="验">验&lt;/h4>
&lt;div class="sourceCode" id="cb7">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb7-1">&lt;a href="#cb7-1" aria-hidden="true">&lt;/a>&lt;span class="ex">nvidia-smi&lt;/span>&lt;/span>
&lt;span id="cb7-2">&lt;a href="#cb7-2" aria-hidden="true">&lt;/a>&lt;span class="ex">reboot&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="nvidia-container-toolkit">NVIDIA Container Toolkit&lt;/h3>
&lt;p>&lt;a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html">official doc&lt;/a>&lt;/p>
&lt;h4 id="装-1">装&lt;/h4>
&lt;div class="sourceCode" id="cb8">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb8-1">&lt;a href="#cb8-1" aria-hidden="true">&lt;/a>&lt;span class="co"># 拷自 official doc&lt;/span>&lt;/span>
&lt;span id="cb8-2">&lt;a href="#cb8-2" aria-hidden="true">&lt;/a>&lt;span class="ex">curl&lt;/span> -fsSL https://nvidia.github.io/libnvidia-container/gpgkey &lt;span class="kw">|&lt;/span> &lt;span class="fu">sudo&lt;/span> gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb8-3">&lt;a href="#cb8-3" aria-hidden="true">&lt;/a> &lt;span class="kw">&amp;amp;&amp;amp;&lt;/span> &lt;span class="ex">curl&lt;/span> -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list &lt;span class="kw">|&lt;/span> &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb8-4">&lt;a href="#cb8-4" aria-hidden="true">&lt;/a> &lt;span class="fu">sed&lt;/span> &lt;span class="st">&amp;#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&amp;#39;&lt;/span> &lt;span class="kw">|&lt;/span> &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb8-5">&lt;a href="#cb8-5" aria-hidden="true">&lt;/a> &lt;span class="fu">sudo&lt;/span> tee /etc/apt/sources.list.d/nvidia-container-toolkit.list&lt;/span>
&lt;span id="cb8-6">&lt;a href="#cb8-6" aria-hidden="true">&lt;/a>&lt;span class="fu">sed&lt;/span> -i -e &lt;span class="st">&amp;#39;/experimental/ s/^#//g&amp;#39;&lt;/span> /etc/apt/sources.list.d/nvidia-container-toolkit.list&lt;/span>
&lt;span id="cb8-7">&lt;a href="#cb8-7" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt-get update&lt;/span>
&lt;span id="cb8-8">&lt;a href="#cb8-8" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt-get install -y nvidia-container-toolkit&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="配-1">配&lt;/h4>
&lt;h4 id="nvidia-container-runtime">nvidia-container-runtime&lt;/h4>
&lt;div class="sourceCode" id="cb9">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb9-1">&lt;a href="#cb9-1" aria-hidden="true">&lt;/a>&lt;span class="co"># 拷自 official doc&lt;/span>&lt;/span>
&lt;span id="cb9-2">&lt;a href="#cb9-2" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> nvidia-ctk runtime configure --runtime=docker&lt;/span>
&lt;span id="cb9-3">&lt;a href="#cb9-3" aria-hidden="true">&lt;/a>&lt;span class="co"># /etc/docker/daemon.json&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="btrfs">btrfs&lt;/h4>
&lt;p>&lt;code>/etc/docker/daemon.json&lt;/code>&lt;/p>
&lt;div class="sourceCode" id="cb10">&lt;pre class="sourceCode json">&lt;code class="sourceCode json">&lt;span id="cb10-1">&lt;a href="#cb10-1" aria-hidden="true">&lt;/a>&lt;span class="fu">{&lt;/span>&lt;/span>
&lt;span id="cb10-2">&lt;a href="#cb10-2" aria-hidden="true">&lt;/a> &lt;span class="dt">&amp;quot;storage-driver&amp;quot;&lt;/span>&lt;span class="fu">:&lt;/span> &lt;span class="st">&amp;quot;btrfs&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb10-3">&lt;a href="#cb10-3" aria-hidden="true">&lt;/a>&lt;span class="fu">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="results">results&lt;/h4>
&lt;p>&lt;code>/etc/docker/daemon.json&lt;/code>&lt;/p>
&lt;div class="sourceCode" id="cb11">&lt;pre class="sourceCode json">&lt;code class="sourceCode json">&lt;span id="cb11-1">&lt;a href="#cb11-1" aria-hidden="true">&lt;/a>&lt;span class="fu">{&lt;/span>&lt;/span>
&lt;span id="cb11-2">&lt;a href="#cb11-2" aria-hidden="true">&lt;/a> &lt;span class="dt">&amp;quot;storage-driver&amp;quot;&lt;/span>&lt;span class="fu">:&lt;/span> &lt;span class="st">&amp;quot;btrfs&amp;quot;&lt;/span>&lt;span class="fu">,&lt;/span>&lt;/span>
&lt;span id="cb11-3">&lt;a href="#cb11-3" aria-hidden="true">&lt;/a> &lt;span class="dt">&amp;quot;runtimes&amp;quot;&lt;/span>&lt;span class="fu">:&lt;/span> &lt;span class="fu">{&lt;/span>&lt;/span>
&lt;span id="cb11-4">&lt;a href="#cb11-4" aria-hidden="true">&lt;/a> &lt;span class="dt">&amp;quot;nvidia&amp;quot;&lt;/span>&lt;span class="fu">:&lt;/span> &lt;span class="fu">{&lt;/span>&lt;/span>
&lt;span id="cb11-5">&lt;a href="#cb11-5" aria-hidden="true">&lt;/a> &lt;span class="dt">&amp;quot;args&amp;quot;&lt;/span>&lt;span class="fu">:&lt;/span> &lt;span class="ot">[]&lt;/span>&lt;span class="fu">,&lt;/span>&lt;/span>
&lt;span id="cb11-6">&lt;a href="#cb11-6" aria-hidden="true">&lt;/a> &lt;span class="dt">&amp;quot;path&amp;quot;&lt;/span>&lt;span class="fu">:&lt;/span> &lt;span class="st">&amp;quot;nvidia-container-runtime&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb11-7">&lt;a href="#cb11-7" aria-hidden="true">&lt;/a> &lt;span class="fu">}&lt;/span>&lt;/span>
&lt;span id="cb11-8">&lt;a href="#cb11-8" aria-hidden="true">&lt;/a> &lt;span class="fu">}&lt;/span>&lt;/span>
&lt;span id="cb11-9">&lt;a href="#cb11-9" aria-hidden="true">&lt;/a>&lt;span class="fu">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="测">测&lt;/h4>
&lt;div class="sourceCode" id="cb12">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb12-1">&lt;a href="#cb12-1" aria-hidden="true">&lt;/a>&lt;span class="co"># 拷自 official doc&lt;/span>&lt;/span>
&lt;span id="cb12-2">&lt;a href="#cb12-2" aria-hidden="true">&lt;/a>&lt;span class="ex">docker&lt;/span> run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>&lt;code>--runtime=nvidia&lt;/code> 通过这个将显卡传递到 docker 里&lt;/p></description></item><item><title>Euler–Lagrange equation</title><link>https://bensyz.github.io/blog/blogs/Euler_Lagrange_equation/</link><pubDate>Tue, 25 Mar 2025 08:14:16 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/Euler_Lagrange_equation/</guid><description>&lt;h2 id="最速降线">最速降线&lt;/h2>
&lt;p>以最速降线为例：一个小球从 &lt;span class="math inline">\(A\)&lt;/span> 点&lt;span class="math inline">\((x_1, y_1)\)&lt;/span> 移动到 &lt;span class="math inline">\(B\)&lt;/span> 点 &lt;span class="math inline">\((x_2, y_2)\)&lt;/span>，它耗时最少的路径是怎么样的？不妨设 &lt;span class="math inline">\((x_1,y_1)\)&lt;/span> 为 &lt;span class="math inline">\((0,0)\)&lt;/span> 点，记为 A 点，&lt;/p>
&lt;p>首先，我们求当小球位于 &lt;span class="math inline">\((x,y)\)&lt;/span> 时，它的位移微分：&lt;/p>
&lt;p>&lt;span class="math display">\[
ds = \sqrt{(dx)^2+(dy)^2}
\]&lt;/span>&lt;/p>
&lt;p>其次，我们求当小球位于 &lt;span class="math inline">\((x,y)\)&lt;/span> 时，它的速度：&lt;/p>
&lt;p>&lt;span class="math display">\[
\frac{1}{2} mv^2 = mg \delta h
\]&lt;/span>&lt;/p>
&lt;p>&lt;span class="math display">\[
v = \sqrt{2gh} = \sqrt{2g(y-y_1)} = \sqrt{2gy}
\]&lt;/span>&lt;/p>
&lt;p>所以，我们求当小球位于 &lt;span class="math inline">\((x,y)\)&lt;/span> 时，走过 &lt;code>ds&lt;/code> 所需的时间：&lt;/p>
&lt;p>&lt;span class="math display">\[
dt = \frac{ds}{v} = \frac{\sqrt{(dx)^2+(dy)^2}}{\sqrt{2gy}}
\]&lt;/span>&lt;/p>
&lt;p>提取出分子里的 &lt;span class="math inline">\(dx\)&lt;/span> 可得：&lt;/p>
&lt;p>&lt;span class="math display">\[
dt = \frac{\sqrt{1+(\frac{dy}{dx})^2}}{\sqrt{2gy}} dx
\]&lt;/span>&lt;/p>
&lt;p>通常，我们记 &lt;span class="math inline">\(\frac{dy}{dx} = y&amp;#39;\)&lt;/span>，所以：&lt;/p>
&lt;p>&lt;span class="math display">\[
dt = \frac{\sqrt{1+(y&amp;#39;)^2}}{\sqrt{2gy}} dx
\]&lt;/span>&lt;/p>
&lt;p>所以，从 &lt;span class="math inline">\(A\)&lt;/span> 点到 &lt;span class="math inline">\(B\)&lt;/span> 点的总耗时是：&lt;/p>
&lt;p>&lt;span class="math display">\[
T = \int_{0}^{T} dt = \int_{x_1}^{x_2} \frac{\sqrt{1+(y&amp;#39;)^2}}{\sqrt{2gy}} dx
\]&lt;/span>&lt;/p>
&lt;p>先放一下，因为到这一步我们没法解下去了，怎么求 &lt;span class="math inline">\(T\)&lt;/span>？更遑论 &lt;span class="math inline">\(T\)&lt;/span> 的最小值了。&lt;/p>
&lt;h2 id="euler-lagrange-equation">Euler-Lagrange Equation&lt;/h2>
&lt;h3 id="核心思想">核心思想&lt;/h3>
&lt;p>其实 Euler-Lagrange Equation 的核心思想就是反推。&lt;/p>
&lt;p>对类似最速降线的问题，我们有什么？&lt;/p>
&lt;ol type="1">
&lt;li>一个积分式子，这个积分式子代表了系统中的某种属性，例如在最速降线中，这个积分式子代表的就是 &lt;span class="math inline">\(A\)&lt;/span> 点到 &lt;span class="math inline">\(B\)&lt;/span> 点的时间。&lt;/li>
&lt;li>这个属性最终需要满足的一个条件，例如属性有最小值。&lt;/li>
&lt;/ol>
&lt;p>我们要求的是什么？&lt;/p>
&lt;ul>
&lt;li>&lt;span class="math inline">\(y\)&lt;/span> 和 &lt;span class="math inline">\(x\)&lt;/span> 之间的关系。&lt;/li>
&lt;/ul>
&lt;!--
正常的解法是先去求这个积分方程，然后去算这个属性的最小值，可能可以，得出 $y$ 和 $x$ 的关系。
但是现在的情况是，我本身就不知道 $y$ 和 $x$ 的关系，我就求不出这个属性的最小值，求不出这个属性的最小值，我就不知道 $y$ 和 $x$ 的关系，像是“鸡生蛋，蛋生鸡”的问题。但是事实真的是这样吗？我们是不是可以
-->
&lt;p>这个问题很奇怪，常见的问题是：我知道 &lt;span class="math inline">\(y\)&lt;/span> 和 &lt;span class="math inline">\(x\)&lt;/span> 的关系，然后我求得这个属性的值。也就是第二个条件其实是常规问题的最后一步，而我们需要求的东西是常规问题的中间步骤。而第二个条件在从前向后的推导中用不上，我们就对它束手无策。那转变思路，我们是不是可以让这个最后一步向我们这个方向推进一下，从结果反地推回来。也就是说，我们转变目标，先不求这个条件的最小值，我们先求如果要满足这个属性是最小值时，我们需要达到什么条件。这就是我所说的“反推”&lt;/p>
&lt;p>那么，我们再来看挡在路中间的 “&lt;span class="math inline">\(y\)&lt;/span> 和 &lt;span class="math inline">\(x\)&lt;/span> 之间的关系”，这是啥？我们该如何表述这种关系？就像学微积分一样，我们先从离散的点开始：&lt;/p>
&lt;ul>
&lt;li>&lt;span class="math inline">\(y_1 = f_1(x)\)&lt;/span>&lt;/li>
&lt;li>&lt;span class="math inline">\(y_2 = f_2(x)\)&lt;/span>&lt;/li>
&lt;li>&lt;span class="math inline">\(y_3 = f_3(x)\)&lt;/span>&lt;/li>
&lt;li>&lt;span class="math inline">\(y_4 = f_4(x)\)&lt;/span>&lt;/li>
&lt;li>…&lt;/li>
&lt;/ul>
&lt;p>我们可以看到，这种所谓的 “&lt;span class="math inline">\(y\)&lt;/span> 和 &lt;span class="math inline">\(x\)&lt;/span> 之间的关系” 被我们用不同的 &lt;span class="math inline">\(f\)&lt;/span> 的下标给区分开来了，也就是说，&lt;span class="math inline">\(x\)&lt;/span> 映射到 &lt;span class="math inline">\(y\)&lt;/span> 关系可以是 &lt;span class="math inline">\(f_1\)&lt;/span>, &lt;span class="math inline">\(f_2\)&lt;/span>, &lt;span class="math inline">\(f_3\)&lt;/span>, … 我们可以记这种关系为 &lt;span class="math inline">\(f_i\)&lt;/span>，也就是&lt;/p>
&lt;p>&lt;span class="math display">\[
y_i = f_i(x)
\]&lt;/span>&lt;/p>
&lt;p>如何理解这种奇怪的表示，来张图：&lt;/p>
&lt;figure>
&lt;img src="./figures/f_i.gif" alt="" />&lt;figcaption>f_i&lt;/figcaption>
&lt;/figure>
&lt;p>&lt;a href="./figures/f_i.ggb">geogebra 原始图 点我下载&lt;/a>&lt;/p>
&lt;p>这四条曲线是 &lt;span class="math display">\[
z = \frac{1}{5} y^3 - x y + 3 \text{, where } x = 0,1,2,3
\]&lt;/span>&lt;/p>
&lt;p>（由于 geogebra 中只能是 z 轴作为纵轴，所以请将 图中的 &lt;span class="math inline">\(z\)&lt;/span> 当作 &lt;span class="math inline">\(y\)&lt;/span>，图中的 &lt;span class="math inline">\(y\)&lt;/span> 当作 &lt;span class="math inline">\(x\)&lt;/span>，图中的 &lt;span class="math inline">\(x\)&lt;/span> 当作 &lt;span class="math inline">\(i\)&lt;/span> ）&lt;/p>
&lt;p>我们可以看到，当 &lt;span class="math inline">\(i\)&lt;/span> 取不同值时，&lt;span class="math inline">\(y\)&lt;/span> 和 &lt;span class="math inline">\(x\)&lt;/span> 之间成不同的关系。这个 &lt;span class="math inline">\(i\)&lt;/span> 其实就是多出的一个维度。&lt;/p>
&lt;p>回到我们的问题，我们想知道，在 &lt;span class="math inline">\(i\)&lt;/span> 取何值时，我们的属性（记作 &lt;span class="math inline">\(P\)&lt;/span>）可以取到极值。发现没有，除了常规的 &lt;span class="math inline">\(x\)&lt;/span> 和 &lt;span class="math inline">\(y\)&lt;/span> 这两个维度之外，多了两个维度，&lt;span class="math inline">\(i\)&lt;/span> 和 &lt;span class="math inline">\(P\)&lt;/span>：随着 &lt;span class="math inline">\(i\)&lt;/span> 的变化 &lt;span class="math inline">\(P\)&lt;/span> 会发生变化。用数学的式子表示就是：&lt;/p>
&lt;p>&lt;span class="math display">\[
P = g(i)
\]&lt;/span>&lt;/p>
&lt;p>很自然地，当 &lt;span class="math inline">\(i\)&lt;/span> 取何值时，&lt;span class="math inline">\(P\)&lt;/span> 取极值这个问题可以用求导来解，也就是：&lt;/p>
&lt;p>&lt;span class="math display">\[
\frac{dP}{di}
\]&lt;/span>&lt;/p>
&lt;p>要求导，我们肯定得知道 &lt;span class="math inline">\(g(i)\)&lt;/span> 的形式。&lt;/p>
&lt;hr />
&lt;p>什么是“属性”呢？属性就像一个加权和，权重是什么呢？像是空间中的场，密布在这片空间中，不同的位置（或受其他因素影响）会有不同的属性值。当选择某一条路径时，你就会受到这条路径上的“场”的影响，最终加起来得到最后的属性。&lt;/p>
&lt;p>比如，最简单的场：均匀的场，空间中每一处的加权均是 &lt;span class="math inline">\(1\)&lt;/span> ，那么从 A 点到 B 点的属性是什么？就是 &lt;span class="math inline">\(A\)&lt;/span> 到 &lt;span class="math inline">\(B\)&lt;/span> 之间作一条线，然后这条线被向第三个方向整体偏移 &lt;span class="math inline">\(1\)&lt;/span>，属性就是这条曲线到 &lt;span class="math inline">\(x-y\)&lt;/span> 平面的积分，对一个均匀的场来说，这个积分就是，曲线的长度乘以高度，什么时候积分最小？取线段时。&lt;/p>
&lt;p>等于其实属性是，在路径走到 &lt;span class="math inline">\((x,y)\)&lt;/span> 点时，这点的属性乘以这点附近的路径微元&lt;/p>
&lt;p>&lt;span class="math display">\[
dP = g(\ldots) ds
\]&lt;/span>&lt;/p>
&lt;p>&lt;span class="math display">\[
P = \int g ds
\]&lt;/span>&lt;/p>
&lt;p>就像在最速降线中，&lt;/p>
&lt;p>&lt;span class="math display">\[
dt = \frac{1}{v}ds
\]&lt;/span>&lt;/p>
&lt;p>其中，&lt;span class="math inline">\(g = \frac{1}{v} = \frac{1}{\sqrt{2gy}}\)&lt;/span>，而 &lt;span class="math inline">\(ds\)&lt;/span> 往往可以写成 &lt;span class="math inline">\(\sqrt{1+dy&amp;#39;} dx\)&lt;/span>，也就是 &lt;span class="math inline">\(ds\)&lt;/span> 中包含了路径是怎么样的。&lt;span class="math inline">\(P\)&lt;/span> 可以写成&lt;/p>
&lt;p>&lt;span class="math display">\[
P = \int g(y) f(y&amp;#39;) dx
\]&lt;/span>&lt;/p>
&lt;p>可以将 &lt;span class="math inline">\(g\)&lt;/span> 和 &lt;span class="math inline">\(f\)&lt;/span> 整合起来，并且以更通用的形式表示：&lt;/p>
&lt;p>&lt;span class="math display">\[
P = \int f(y,y&amp;#39;,y&amp;#39;&amp;#39;,\ldots,x) dx
\]&lt;/span>&lt;/p>
&lt;hr />
&lt;p>从前文，我们可以知道 &lt;span class="math inline">\(i\)&lt;/span> 是 &lt;span class="math inline">\(y_i\)&lt;/span> 中的下标，它代表 &lt;span class="math inline">\(y(x)\)&lt;/span> 取不同的表达式，所以上面的式子又可以写成&lt;/p>
&lt;p>&lt;span class="math display">\[
P_i = \int f(y_i,y_i&amp;#39;,y_i&amp;#39;&amp;#39;,\ldots,x) dx
\]&lt;/span>&lt;/p>
&lt;p>那么 &lt;span class="math inline">\(P\)&lt;/span> 关于 &lt;span class="math inline">\(i\)&lt;/span> 的导数又是什么呢？&lt;/p>
&lt;p>&lt;span class="math display">\[
\begin{aligned}
\frac{dP_i}{di}
&amp;amp;= \frac{d}{di} \int_{x_1}^{x_2} f(y_i,y_i&amp;#39;,y_i&amp;#39;&amp;#39;,\ldots,x) dx \\
&amp;amp;= \int_{x_1}^{x_2} \frac{\partial f}{ \partial y_i} \frac{dy_i}{di} +
\frac{\partial f}{ \partial y_i&amp;#39;} \frac{dy_i&amp;#39;}{di} + \ldots dx
\end{aligned}
\]&lt;/span>&lt;/p>
&lt;ul>
&lt;li>先不写二阶导往上的，&lt;/li>
&lt;li>&lt;span class="math inline">\(y_i\)&lt;/span> 项没啥好处理的&lt;/li>
&lt;li>&lt;span class="math inline">\(\partial y_i&amp;#39;\)&lt;/span> 在分母也没什么好处理的&lt;/li>
&lt;/ul>
&lt;p>而 &lt;span class="math inline">\(d y_i&amp;#39;\)&lt;/span> 在分子可以玩些花样，它首先可以写成 &lt;span class="math inline">\(d (\frac{dy_i}{dx})\)&lt;/span>，我们再假设它的性质足够好，可以和 &lt;span class="math inline">\(\frac{d}{di}\)&lt;/span> 互换顺序，第二项就成了&lt;/p>
&lt;p>&lt;span class="math display">\[
\begin{aligned}
&amp;amp; \int_{x_1}^{x_2} \frac{\partial f}{ \partial y_i&amp;#39;} \frac{dy_i&amp;#39;}{di} dx \\
=&amp;amp; \int_{x_1}^{x_2} \frac{\partial f}{ \partial y_i&amp;#39;} \frac{d}{di} \frac{d}{dx}y_i dx \\
=&amp;amp; \int_{x_1}^{x_2} \frac{\partial f}{ \partial y_i&amp;#39;} \frac{d}{dx} \frac{d}{di} y_idx \\
=&amp;amp; \int_{x_1}^{x_2} \frac{\partial f}{ \partial y_i&amp;#39;} \frac{d}{dx} \frac{d y_i}{di}dx \\
=&amp;amp; \int_{A}^{B} \frac{\partial f}{ \partial y_i&amp;#39;} d(\frac{d y_i}{di}) \\
=&amp;amp; (\frac{\partial f}{ \partial y_i&amp;#39;} \frac{d y_i}{di})|_{A}^B -
\int_{A}^{B} \frac{d y_i}{di} d(\frac{\partial f}{ \partial y_i&amp;#39;} ) \\
\end{aligned}
\]&lt;/span>&lt;/p>
&lt;p>因为，在 A，B 两点，由边界条件可知，&lt;span class="math inline">\(y_i\)&lt;/span> 在 &lt;span class="math inline">\(i\)&lt;/span> 方向上，是不变的，所有的 &lt;span class="math inline">\(y_i\)&lt;/span> 都得满足经过 A，B 两点。虽然，在 &lt;span class="math inline">\(x\)&lt;/span> 方向上 &lt;span class="math inline">\(y_i\)&lt;/span> 的导数的确可以不为 &lt;span class="math inline">\(0\)&lt;/span>，也就是 &lt;span class="math inline">\(\frac{dy_i}{dx} \neq 0\)&lt;/span>，但 &lt;span class="math inline">\(\frac{dy_i}{di} \equiv 0\)&lt;/span>，所以第一项为 &lt;span class="math inline">\(0\)&lt;/span>&lt;/p>
&lt;p>&lt;span class="math display">\[
\begin{aligned}
&amp;amp; (\frac{\partial f}{ \partial y_i&amp;#39;} \frac{d y_i}{di})|_{A}^B -
\int_{x_1}^{x_2} \frac{d y_i}{di} d(\frac{\partial f}{ \partial y_i&amp;#39;} ) \\
=&amp;amp; - \int_{x_1}^{x_2} \frac{d y_i}{di} \frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;} ) dx\\
\end{aligned}
\]&lt;/span>&lt;/p>
&lt;p>那么原来的 &lt;span class="math inline">\(\frac{dP_i}{di}\)&lt;/span>&lt;/p>
&lt;p>&lt;span class="math display">\[
\begin{aligned}
\frac{dP_i}{di}
&amp;amp;= \frac{d}{di} \int_{x_1}^{x_2} f(y_i,y_i&amp;#39;,y_i&amp;#39;&amp;#39;,\ldots,x) dx \\
&amp;amp;= \int_{x_1}^{x_2} \frac{\partial f}{ \partial y_i} \frac{dy_i}{di} +
\frac{\partial f}{ \partial y_i&amp;#39;} \frac{dy_i&amp;#39;}{di} + \ldots dx \\
&amp;amp;= \int_{x_1}^{x_2} \frac{\partial f}{ \partial y_i} \frac{dy_i}{di}
- \frac{d y_i}{di} \frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;} ) +\ldots dx\\
&amp;amp;= \int_{x_1}^{x_2} \frac{dy_i}{di}
(\frac{\partial f}{ \partial y_i}
- \frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;}) )
+\ldots dx\\
\end{aligned}
\]&lt;/span>&lt;/p>
&lt;p>对于任意的 &lt;span class="math inline">\(y_i\)&lt;/span>，在 &lt;span class="math inline">\(A\)&lt;/span> 到 &lt;span class="math inline">\(B\)&lt;/span> 的路径中 &lt;span class="math inline">\(\frac{dy_i}{di}\)&lt;/span> 不一定等于0，而且大部分都不等于 &lt;span class="math inline">\(0\)&lt;/span>，因为我需要 &lt;span class="math inline">\(y_i\)&lt;/span> 之间是不同的，否则我就找不到最优解了，所以为使 &lt;span class="math inline">\(\frac{dP_i}{di}=0\)&lt;/span>，下式必须为 &lt;span class="math inline">\(0\)&lt;/span>&lt;/p>
&lt;p>&lt;span class="math display">\[
\frac{\partial f}{ \partial y_i} - \frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;})
\]&lt;/span>&lt;/p>
&lt;p>而这就是 Euler-Lagrange 方程。对于高阶项，同理可以推得：&lt;/p>
&lt;p>&lt;span class="math display">\[
\frac{\partial f}{ \partial y_i}
- \frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;})
+ \frac{d}{dx}\frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;&amp;#39;} )
- \frac{d}{dx}\frac{d}{dx}\frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;&amp;#39;&amp;#39;} )
+ \ldots
\]&lt;/span>&lt;/p>
&lt;h3 id="总结一下">总结一下&lt;/h3>
&lt;p>当路径变化时，这个系统的属性满足：&lt;/p>
&lt;p>&lt;span class="math display">\[
P = \int f(y,y&amp;#39;,y&amp;#39;&amp;#39;,\ldots,x) dx
\]&lt;/span>&lt;/p>
&lt;p>当路径满足以下条件时，系统属性 P 会处于稳态。&lt;/p>
&lt;p>&lt;span class="math display">\[
\frac{\partial f}{ \partial y_i} - \frac{d}{dx}(\frac{\partial f}{ \partial y_i&amp;#39;}) = 0
\]&lt;/span>&lt;/p>
&lt;h3 id="变更形式">变更形式&lt;/h3>
&lt;p>我们上面讨论的是 &lt;span class="math inline">\(y(x)\)&lt;/span> 也就是 &lt;span class="math inline">\(y\)&lt;/span> 受 &lt;span class="math inline">\(x\)&lt;/span> 变化而变化，给出的是一条路径。很多时候， &lt;span class="math inline">\(y\)&lt;/span> 和 &lt;span class="math inline">\(x\)&lt;/span> 可以是关于时间 &lt;span class="math inline">\(t\)&lt;/span> 的变量，也就是 &lt;span class="math inline">\(y(t)\)&lt;/span> 和 &lt;span class="math inline">\(x(t)\)&lt;/span>，那么上面这个属性的形式就变成了(多元的证法应该是一样的 TODO)：&lt;/p>
&lt;p>&lt;span class="math display">\[
P = \int f(y,y&amp;#39;,y&amp;#39;&amp;#39;,\ldots,x,x&amp;#39;,x&amp;#39;&amp;#39;,\ldots) dt
\]&lt;/span>&lt;/p>
&lt;p>&lt;span class="math display">\[
\left\{\begin{matrix}
\frac{\partial f}{ \partial x_i} - \frac{d}{dt}(\frac{\partial f}{ \partial x_i&amp;#39;}) = 0 \\
\frac{\partial f}{ \partial y_j} - \frac{d}{dt}(\frac{\partial f}{ \partial y_j&amp;#39;}) = 0
\end{matrix}\right.
\]&lt;/span>&lt;/p>
&lt;p>这个 &lt;span class="math inline">\(f\)&lt;/span> 就是我们说的拉格朗日量 &lt;span class="math inline">\(\mathcal{L}\)&lt;/span>，这个 &lt;span class="math inline">\(P\)&lt;/span> 就是常说作用量（先不管这个名字）的 &lt;span class="math inline">\(S\)&lt;/span>&lt;/p>
&lt;hr />
&lt;h3 id="拉格朗日量">拉格朗日量&lt;/h3>
&lt;p>我们凑巧地发现，当 &lt;span class="math inline">\(\mathcal{L}\)&lt;/span>(就是我们推导的 &lt;span class="math inline">\(f\)&lt;/span>) 是这个形式，&lt;/p>
&lt;p>&lt;span class="math display">\[
\mathcal{L} = T - U
\]&lt;/span>&lt;/p>
&lt;p>page 268&lt;/p>
&lt;p>时，拉格朗日公式(那个等于0的式子)等价于牛顿的 &lt;span class="math inline">\(F=m\dot{x}\)&lt;/span>。那么此时对 &lt;span class="math inline">\(\mathcal{L}\)&lt;/span> 关于时间 &lt;span class="math inline">\(t\)&lt;/span> 求积分有什么含义吗？啥含义都没有。但是我们知道的是，它代表的是系统的某种属性，这种属性是稳定的，什么是稳定的？在各个变量方向的变化下它都是极致点，所以我可以对它关于时间（&lt;span class="math inline">\(t\)&lt;/span>）求导数，关于位置（&lt;span class="math inline">\(x\)&lt;/span> 或者 &lt;span class="math inline">\(y\)&lt;/span>）求导数，这些导数都应该是 &lt;span class="math inline">\(0\)&lt;/span> 。 从而我们得出&lt;/p>
&lt;p>当 &lt;span class="math inline">\(P\)&lt;/span> 关于位置求导数时，最终推得 &lt;span class="math inline">\(\frac{d}{dt} p = 0\)&lt;/span>(&lt;span class="math inline">\(p\)&lt;/span> 是动量)，满足动量守恒&lt;/p>
&lt;p>当 &lt;span class="math inline">\(P\)&lt;/span> 关于时间求导数时，最终推得 &lt;span class="math inline">\(\frac{d}{dt} (\sum p_i \dot{q_i} - \mathcal{L})\)&lt;/span>(&lt;span class="math inline">\(p\)&lt;/span> 是动量)满足能量守恒&lt;/p></description></item><item><title>为 Open Harmony 编译 Application</title><link>https://bensyz.github.io/blog/blogs/dev_eco_studio_build_for_ohos/</link><pubDate>Wed, 12 Mar 2025 08:16:32 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/dev_eco_studio_build_for_ohos/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>我下载了 OpenHarmony-4.1.2 的 SDK，然后编译了 Hihope/dayu210，并把把生成的镜像烧录到了我们的板子上，板子启动后，现在准备开发上层应用，但是 DevEco Studio 提供的 demo 直接跑不起来，需要做些改动。&lt;/p>
&lt;p>&lt;a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-project-V5">这是华为官方的文档&lt;/a>。&lt;/p>
&lt;h3 id="environments">environments&lt;/h3>
&lt;ul>
&lt;li>DevEco Studio: Build Version: 5.0.7.210, built on February 11, 2025&lt;/li>
&lt;li>Soc: rk3588&lt;/li>
&lt;li>Board: Custom Board&lt;/li>
&lt;li>System SDK Version: 4.1.2&lt;/li>
&lt;/ul>
&lt;h2 id="将-demo-跑起来的详细步骤">将 Demo 跑起来的详细步骤&lt;/h2>
&lt;h3 id="创建工程">创建工程&lt;/h3>
&lt;figure>
&lt;img src="./figures/create_project.png" alt="" />&lt;figcaption>create_project&lt;/figcaption>
&lt;/figure>
&lt;p>因为我们的 OpenHarmony-4.1.2 的 Sdk version 是 11，所以这边我们选择 11&lt;/p>
&lt;figure>
&lt;img src="./figures/create_project_conf_proj.png" alt="" />&lt;figcaption>config project&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/create_project_empty_ability.png" alt="" />&lt;figcaption>select empty ability&lt;/figcaption>
&lt;/figure>
&lt;p>(Native C++) 是一样的配置，只是需要多加一个配置，参考&lt;a href="#配置-abifilters-选的工程是-native-c-时">配置 &lt;code>abiFilters&lt;/code> (选的工程是 Native C++ 时)&lt;/a>&lt;/p>
&lt;p>重新创建的路径在：&lt;/p>
&lt;pre class="pos">&lt;code>ToolBar -&amp;gt; File -&amp;gt; New -&amp;gt; Create Project -&amp;gt; Empty Ability&lt;/code>&lt;/pre>
&lt;h3 id="下载-sdk">下载 SDK&lt;/h3>
&lt;figure>
&lt;img src="./figures/download_sdk_1.png" alt="" />&lt;figcaption>download sdk 1&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/download_sdk_2.png" alt="" />&lt;figcaption>download sdk 2&lt;/figcaption>
&lt;/figure>
&lt;h3 id="连接开发板">连接开发板&lt;/h3>
&lt;p>默认下载路径是在这里 &lt;code>C:\Users\username\AppData\Local\OpenHarmony\Sdk&lt;/code>，打开 powershell 输入以下命令&lt;/p>
&lt;pre class="ps2">&lt;code>.\11\toolchains\hdc.exe kill
.\11\toolchains\hdc.exe start
.\11\toolchains\hdc.exe shell&lt;/code>&lt;/pre>
&lt;p>&lt;strong>注意&lt;/strong>: 这里需要 start，不要直接 shell，直接 shell，DevEco Studio 那里会始终连不上。&lt;/p>
&lt;ul>
&lt;li>Notes:
&lt;ul>
&lt;li>&lt;code>hdc&lt;/code> 和功能和 &lt;code>adb&lt;/code> 是一样的&lt;/li>
&lt;li>Linux 上的 SDK 内编译出来的 &lt;code>hdc&lt;/code> 在这里 &lt;code>OpenHarmony-4.1.2-Release/prebuilts/ohos-sdk/linux/11/toolchains/hdc&lt;/code>&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;p>当 DevEco Studio 右上角的 device 下拉框中是这样时，代表板子连上了。&lt;/p>
&lt;figure>
&lt;img src="./figures/connect_board.png" alt="" />&lt;figcaption>connect board&lt;/figcaption>
&lt;/figure>
&lt;h3 id="配置-abifilters-选的工程是-native-c-时">配置 &lt;code>abiFilters&lt;/code> (选的工程是 Native C++ 时)&lt;/h3>
&lt;p>根据&lt;a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-create-new-project-V5">官方文档&lt;/a> 最后所述，需要做如下配置&lt;/p>
&lt;pre class="json5">&lt;code>//&amp;lt;project&amp;gt;/MyApplication/build-profile.json5
{
&amp;quot;app&amp;quot;: {
//...
&amp;quot;products&amp;quot;: [
{
//...
&amp;quot;buildOption&amp;quot;: {
// ...
&amp;quot;externalNativeOptions&amp;quot;: {
&amp;quot;abiFilters&amp;quot;: [&amp;quot;arm64-v8a&amp;quot;]
}
// ...
}
//...
}
]
//...
}
}&lt;/code>&lt;/pre>
&lt;figure>
&lt;img src="./figures/native_cxx_abi_filters_before.png" alt="" />&lt;figcaption>native cxx abi filters before&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/native_cxx_abi_filters_after.png" alt="" />&lt;figcaption>native cxx abi filters after&lt;/figcaption>
&lt;/figure>
&lt;h3 id="修改-runtimeos-为-openharmony">修改 &lt;code>runtimeOS&lt;/code> 为 &lt;code>OpenHarmony&lt;/code>&lt;/h3>
&lt;p>根据&lt;a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/ide-create-new-project-V5#section1826317225311">华为官方文档的这节&lt;/a> 我们需要配置 &lt;code>RuntimeOS&lt;/code> 为 &lt;code>OpenHarmony&lt;/code>&lt;/p>
&lt;pre class="json5">&lt;code>//&amp;lt;project&amp;gt;/MyApplication/build-profile.json5
{
&amp;quot;app&amp;quot;: {
//...
&amp;quot;products&amp;quot;: [
{
//...
&amp;quot;compatibleSdkVersion&amp;quot;: 11,
&amp;quot;compileSdkVersion&amp;quot;: 11,
&amp;quot;runtimeOS&amp;quot;: &amp;quot;OpenHarmony&amp;quot;,
//...
}
]
//...
}
}&lt;/code>&lt;/pre>
&lt;p>要把这块的配置&lt;/p>
&lt;figure>
&lt;img src="./figures/runtimeOS_to_OHOS_before.png" alt="" />&lt;figcaption>config with HMOS&lt;/figcaption>
&lt;/figure>
&lt;p>改成：&lt;/p>
&lt;figure>
&lt;img src="./figures/runtimeOS_to_OHOS_after.png" alt="" />&lt;figcaption>config with OHOS&lt;/figcaption>
&lt;/figure>
&lt;p>&lt;strong>注意&lt;/strong>：&lt;code>compatibleSdkVersion&lt;/code> 字段在 &lt;code>runtimeOS&lt;/code> 为 &lt;code>HarmonyOS&lt;/code> 时是 string 类型，但在 &lt;code>runtimeOS&lt;/code> 为 &lt;code>OpenHarmony&lt;/code> 的时候，该字段为 int。&lt;/p>
&lt;p>改完先不管 Linter 的报错，保存然后点右上角 “Sync Now”，会有弹窗，大概意思是要把板子类型改成 “default” 和 “tablet”，然后点 “Yes”。完了之后，Linter 的报错也会消失。&lt;/p>
&lt;figure>
&lt;img src="./figures/runtimeOS_to_OHOS_sync_now.png" alt="" />&lt;figcaption>sync now&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/runtimeOS_to_OHOS_sync_now_yes.png" alt="" />&lt;figcaption>click yes&lt;/figcaption>
&lt;/figure>
&lt;p>否则这里会报 Sign 之类的错误 TODO&lt;/p>
&lt;h3 id="配置-syscap">配置 SYSCAP&lt;/h3>
&lt;p>&lt;a href="https://blog.csdn.net/openharmony/article/details/132898745">参考&lt;/a>&lt;/p>
&lt;p>SYSCAP 大概是系统的能力，比如我是否支持 3D graphics 或者 refs TODO&lt;/p>
&lt;p>去 Linux 下编译好的 SDK 里找 &lt;code>PCID.sc&lt;/code> 文件，在以下几个目录（这几个文件都一样）：&lt;/p>
&lt;pre>&lt;code>OpenHarmony-4.1.2-Release/out/rk3588/PCID.sc
OpenHarmony-4.1.2-Release/out/rk3588/obj/developtools/syscap_codec/out/rk3588/PCID.sc
OpenHarmony-4.1.2-Release/out/rk3588/packages/phone/system/etc/PCID.sc&lt;/code>&lt;/pre>
&lt;p>在 DevEco 中导入上面的 PCID，导入方式，我没找到，但是可以通过 Help 直接跳过去，位置：&lt;/p>
&lt;pre>&lt;code>ToolBar -&amp;gt; Help -&amp;gt; Find Action -&amp;gt; &amp;quot;Import Product Compatibility ID&amp;quot;&lt;/code>&lt;/pre>
&lt;figure>
&lt;img src="./figures/syscap1.png" alt="" />&lt;figcaption>import syscap 1&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/syscap2.png" alt="" />&lt;figcaption>import syscap 2&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/syscap3.png" alt="" />&lt;figcaption>import syscap 3&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/syscap4.png" alt="" />&lt;figcaption>import syscap 4&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/syscap5.png" alt="" />&lt;figcaption>import syscap 5&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="./figures/syscap6.png" alt="" />&lt;figcaption>import syscap 6&lt;/figcaption>
&lt;/figure>
&lt;p>完了之后，我们需要把最后的 &lt;code>SystemCapbility.Base&lt;/code> 字段去除，它似乎不太兼容：&lt;/p>
&lt;figure>
&lt;img src="./figures/syscap7.png" alt="" />&lt;figcaption>import syscap remove Base before&lt;/figcaption>
&lt;/figure>
&lt;p>最后保存之后点 Sync Now&lt;/p>
&lt;figure>
&lt;img src="./figures/syscap8.png" alt="" />&lt;figcaption>import syscap remove Base after&lt;/figcaption>
&lt;/figure>
&lt;h3 id="配置签名密钥">配置签名密钥&lt;/h3>
&lt;figure>
&lt;img src="./figures/sign_key_1.png" alt="" />&lt;figcaption>config signature 1&lt;/figcaption>
&lt;/figure>
&lt;p>&lt;strong>不要&lt;/strong>勾选 &lt;code>Support HarmonyOS&lt;/code>，勾选 &lt;code>Automatically generate signature&lt;/code>&lt;/p>
&lt;figure>
&lt;img src="./figures/sign_key_2.png" alt="" />&lt;figcaption>config signature 2&lt;/figcaption>
&lt;/figure>
&lt;h3 id="将板子配置成-developer-mode">将板子配置成 developer mode&lt;/h3>
&lt;p>&lt;a href="https://blog.csdn.net/userhu2012/article/details/140957908">refs&lt;/a>&lt;/p>
&lt;p>通过 hdc 连接到板子上，输入以下命令配置 developer mode。&lt;/p>
&lt;pre class="hdc">&lt;code>param set const.security.developermode.state 1&lt;/code>&lt;/pre>
&lt;h3 id="build-run">build &amp;amp; run&lt;/h3>
&lt;p>直接点击右上角的播放符，开始编译然后运行，demo 就起来啦。&lt;/p>
&lt;figure>
&lt;img src="./figures/run.png" alt="" />&lt;figcaption>run&lt;/figcaption>
&lt;/figure>
&lt;h2 id="相关错误">相关错误&lt;/h2>
&lt;h3 id="code9568320">code:9568320&lt;/h3>
&lt;p>不配置签名密钥报错：&lt;/p>
&lt;pre>&lt;code>Install Failed: error: failed to install bundle.
code:9568320
error: no signature file.&lt;/code>&lt;/pre>
&lt;p>参考&lt;a href="#配置签名密钥">配置签名密钥&lt;/a>&lt;/p>
&lt;h3 id="code9568393">code:9568393&lt;/h3>
&lt;pre>&lt;code>Install Failed: error: failed to install bundle.
code:9568393
error: verify code signature failed.
The target device does not work with apps with an OpenHarmony signature. Sign the app with a HarmonyOS signature before installing it on the device.&lt;/code>&lt;/pre>
&lt;p>参考 &lt;a href="#修改-runtimeos-为-openharmony">修改 &lt;code>runtimeOS&lt;/code> 为 &lt;code>OpenHarmony&lt;/code>&lt;/a>&lt;/p>
&lt;h3 id="右下角弹窗-please-try-to-match-the-api-version">右下角弹窗 Please try to match the API version&lt;/h3>
&lt;pre>&lt;code>Please try to match the API version of the device and the app. The current
device does not contain the following SysCap attributes in the rpcid.json file:
SystemCapability.ArkUi.Graphics3D. Make sure the device supports all the SysCap
attributes required for running the app.&lt;/code>&lt;/pre>
&lt;p>参考 &lt;a href="#配置-syscap">配置 SYSCAP&lt;/a>&lt;/p>
&lt;h3 id="编译失败">编译失败&lt;/h3>
&lt;pre>&lt;code>&amp;gt; hvigor ERROR: Failed :entry:default@PreBuild...
&amp;gt; hvigor ERROR: Schema validate failed.
Detail: Please check the following fields.
{
instancePath: &amp;#39;devices.custom[0].PCID[242]&amp;#39;,
keyword: &amp;#39;pattern&amp;#39;,
params: {
pattern: &amp;#39;^SystemCapability\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+){0,2}$&amp;#39;
},
message: &amp;#39;must match pattern &amp;quot;^SystemCapability\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+(\\.[a-zA-Z0-9]+){0,2}$&amp;quot;&amp;#39;,
location: &amp;#39;C:/Users/kenexs/DevEcoStudioProjects/MyApplication2/entry/src/main/syscap.json:252:34&amp;#39;
}
&amp;gt; hvigor ERROR: BUILD FAILED in 203 ms &lt;/code>&lt;/pre>
&lt;p>参考 &lt;a href="#配置-syscap">配置 SYSCAP&lt;/a> 去除 &lt;code>SystemCapbility.Base&lt;/code>&lt;/p>
&lt;h3 id="error-failed-to-start-ability.">error: failed to start ability.&lt;/h3>
&lt;pre>&lt;code>error: failed to start ability.
Error while Launching ability&lt;/code>&lt;/pre>
&lt;p>部分文章包括官方文档的 FAQ 说需要配置 &lt;code>module.json5&lt;/code> 中的 &lt;code>exported&lt;/code> 为 &lt;code>true&lt;/code>，我看了一下都开了，还不行&lt;/p>
&lt;p>在板子上，通过 &lt;code>hilog&lt;/code> 命令查看日志，查看报的错：&lt;/p>
&lt;div class="sourceCode" id="cb13">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb13-1">&lt;a href="#cb13-1" aria-hidden="true">&lt;/a>&lt;span class="ex">hilog&lt;/span> &lt;span class="kw">&amp;amp;&lt;/span>&lt;/span>
&lt;span id="cb13-2">&lt;a href="#cb13-2" aria-hidden="true">&lt;/a>&lt;span class="ex">aa&lt;/span> start -a EntryAbility -b com.bensyz.myapplication&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>我们会看到&lt;/p>
&lt;pre class="log">&lt;code>03-12 15:28:07.302 905 1127 E C01300/Ability: [ability_manager_service.cpp(CheckDebugAppInDeveloperMode:9026)]Debugging application cannot run in non developer mode.
03-12 15:28:07.302 905 1127 E C01300/Ability: [ability_manager_service.cpp(StartAbilityInner:861)]Generate ability request local error.
error: failed to start ability.&lt;/code>&lt;/pre>
&lt;p>参考 &lt;a href="#将板子配置成-developer-mode">将板子配置成 developer mode&lt;/a>&lt;/p>
&lt;h3 id="code9568404">code:9568404&lt;/h3>
&lt;p>如果勾选了 Support HarmonyOS，会需要你登录华为帐号，同时编译完会报&lt;/p>
&lt;pre>&lt;code>Install Failed: error: failed to install bundle.
code:9568404
error: delivery sign profile failed&lt;/code>&lt;/pre>
&lt;p>参考&lt;a href="#配置签名密钥">配置签名密钥&lt;/a>，重新点击 &lt;code>Automatically generate signature&lt;/code> 来重新生成密钥。&lt;/p>
&lt;h3 id="code9568332">code:9568332&lt;/h3>
&lt;pre>&lt;code>Install Failed: error: failed to install bundle.
code:9568332
error: install sign info inconsistent.&lt;/code>&lt;/pre>
&lt;p>同名包不同的签名，在板子上卸掉即可&lt;/p></description></item><item><title>7zr CPU 性能测试结果解析</title><link>https://bensyz.github.io/blog/blogs/7zr_CPU_benchmark_result_parse/</link><pubDate>Wed, 30 Oct 2024 10:07:54 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/7zr_CPU_benchmark_result_parse/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Speed(KiB/s) = 解压大小(B) * 重复次数(#)/time(s) /1024(B/KiB)&lt;/code>&lt;/li>
&lt;li>&lt;code>usage(%) ≈ 程序占用 CPU 时间/程序开始到现在为止总耗时*100%&lt;/code>&lt;/li>
&lt;li>&lt;code>R/U(MIPS) ≈ 产生的指令数(MI)/占用 CPU 的时间&lt;/code>&lt;/li>
&lt;li>&lt;code>Rating(MIPS) ≈ 产生的指令数(MI)/程序耗时(s)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>7zr b -mmt1&lt;/code>&lt;/p>
&lt;pre>&lt;code> Compressing | Decompressing
Dict Speed Usage R/U Rating | Speed Usage R/U Rating
KiB/s % MIPS MIPS | KiB/s % MIPS MIPS
22: 4515 100 4403 4393 | 51373 100 4395 4386
23: 3883 100 3966 3956 | 50676 100 4395 4387
24: 3724 100 4014 4004 | 48750 100 4292 4280
25: 3520 100 4032 4020 | 48064 100 4293 4278
---------------------------------- | ------------------------------
Avr: 100 4104 4093 | 100 4344 4333
Tot: 100 4224 4213&lt;/code>&lt;/pre>
&lt;h2 id="speed">Speed&lt;/h2>
&lt;p>这段打印在&lt;/p>
&lt;div class="sourceCode" id="cb2">&lt;pre class="sourceCode cpp">&lt;code class="sourceCode cpp">&lt;span id="cb2-1">&lt;a href="#cb2-1" aria-hidden="true">&lt;/a>&lt;span class="co">//p7zip-17.05/CPP/7zip/UI/Common/Bench.cpp&lt;/span>&lt;/span>
&lt;span id="cb2-2">&lt;a href="#cb2-2" aria-hidden="true">&lt;/a>&lt;span class="at">static&lt;/span> &lt;span class="dt">void&lt;/span> PrintResults(IBenchPrintCallback *f,&lt;/span>
&lt;span id="cb2-3">&lt;a href="#cb2-3" aria-hidden="true">&lt;/a> &lt;span class="at">const&lt;/span> CBenchInfo &amp;amp;info,&lt;/span>
&lt;span id="cb2-4">&lt;a href="#cb2-4" aria-hidden="true">&lt;/a> &lt;span class="dt">unsigned&lt;/span> weight,&lt;/span>
&lt;span id="cb2-5">&lt;a href="#cb2-5" aria-hidden="true">&lt;/a> UInt64 rating,&lt;/span>
&lt;span id="cb2-6">&lt;a href="#cb2-6" aria-hidden="true">&lt;/a> &lt;span class="dt">bool&lt;/span> showFreq, UInt64 cpuFreq,&lt;/span>
&lt;span id="cb2-7">&lt;a href="#cb2-7" aria-hidden="true">&lt;/a> CTotalBenchRes *res)&lt;/span>
&lt;span id="cb2-8">&lt;a href="#cb2-8" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb2-9">&lt;a href="#cb2-9" aria-hidden="true">&lt;/a> UInt64 speed = info.GetSpeed(info.UnpackSize * info.NumIterations);&lt;/span>
&lt;span id="cb2-10">&lt;a href="#cb2-10" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (f)&lt;/span>
&lt;span id="cb2-11">&lt;a href="#cb2-11" aria-hidden="true">&lt;/a> {&lt;/span>
&lt;span id="cb2-12">&lt;a href="#cb2-12" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (speed != &lt;span class="dv">0&lt;/span>)&lt;/span>
&lt;span id="cb2-13">&lt;a href="#cb2-13" aria-hidden="true">&lt;/a> PrintNumber(*f, speed / &lt;span class="dv">1024&lt;/span>, kFieldSize_Speed);&lt;/span>
&lt;span id="cb2-14">&lt;a href="#cb2-14" aria-hidden="true">&lt;/a> &lt;span class="cf">else&lt;/span>&lt;/span>
&lt;span id="cb2-15">&lt;a href="#cb2-15" aria-hidden="true">&lt;/a> PrintSpaces(*f, &lt;span class="dv">1&lt;/span> + kFieldSize_Speed);&lt;/span>
&lt;span id="cb2-16">&lt;a href="#cb2-16" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb2-17">&lt;a href="#cb2-17" aria-hidden="true">&lt;/a> UInt64 usage = info.GetUsage();&lt;/span>
&lt;span id="cb2-18">&lt;a href="#cb2-18" aria-hidden="true">&lt;/a> UInt64 rpu = info.GetRatingPerUsage(rating);&lt;/span>
&lt;span id="cb2-19">&lt;a href="#cb2-19" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (f)&lt;/span>
&lt;span id="cb2-20">&lt;a href="#cb2-20" aria-hidden="true">&lt;/a> {&lt;/span>
&lt;span id="cb2-21">&lt;a href="#cb2-21" aria-hidden="true">&lt;/a> PrintResults(*f, usage, rpu, rating, showFreq, cpuFreq);&lt;/span>
&lt;span id="cb2-22">&lt;a href="#cb2-22" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb2-23">&lt;a href="#cb2-23" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb2-24">&lt;a href="#cb2-24" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (res)&lt;/span>
&lt;span id="cb2-25">&lt;a href="#cb2-25" aria-hidden="true">&lt;/a> {&lt;/span>
&lt;span id="cb2-26">&lt;a href="#cb2-26" aria-hidden="true">&lt;/a> &lt;span class="co">// res-&amp;gt;NumIterations1++;&lt;/span>&lt;/span>
&lt;span id="cb2-27">&lt;a href="#cb2-27" aria-hidden="true">&lt;/a> res-&amp;gt;NumIterations2 += weight;&lt;/span>
&lt;span id="cb2-28">&lt;a href="#cb2-28" aria-hidden="true">&lt;/a> res-&amp;gt;RPU += (rpu * weight);&lt;/span>
&lt;span id="cb2-29">&lt;a href="#cb2-29" aria-hidden="true">&lt;/a> res-&amp;gt;Rating += (rating * weight);&lt;/span>
&lt;span id="cb2-30">&lt;a href="#cb2-30" aria-hidden="true">&lt;/a> res-&amp;gt;Usage += (usage * weight);&lt;/span>
&lt;span id="cb2-31">&lt;a href="#cb2-31" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb2-32">&lt;a href="#cb2-32" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>其中 &lt;code>info.GetSpeed()&lt;/code> 如下：&lt;/p>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode cpp">&lt;code class="sourceCode cpp">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="co">//p7zip-17.05/CPP/7zip/UI/Common/Bench.cpp&lt;/span>&lt;/span>
&lt;span id="cb3-2">&lt;a href="#cb3-2" aria-hidden="true">&lt;/a>&lt;span class="at">static&lt;/span> UInt64 MyMultDiv64(UInt64 value, UInt64 elapsedTime, UInt64 freq)&lt;/span>
&lt;span id="cb3-3">&lt;a href="#cb3-3" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb3-4">&lt;a href="#cb3-4" aria-hidden="true">&lt;/a> UInt64 elTime = elapsedTime;&lt;/span>
&lt;span id="cb3-5">&lt;a href="#cb3-5" aria-hidden="true">&lt;/a> NormalizeVals(freq, elTime);&lt;/span>
&lt;span id="cb3-6">&lt;a href="#cb3-6" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (elTime == &lt;span class="dv">0&lt;/span>)&lt;/span>
&lt;span id="cb3-7">&lt;a href="#cb3-7" aria-hidden="true">&lt;/a> elTime = &lt;span class="dv">1&lt;/span>;&lt;/span>
&lt;span id="cb3-8">&lt;a href="#cb3-8" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> value * freq / elTime;&lt;/span>
&lt;span id="cb3-9">&lt;a href="#cb3-9" aria-hidden="true">&lt;/a> &lt;span class="co">/*&lt;/span>&lt;/span>
&lt;span id="cb3-10">&lt;a href="#cb3-10" aria-hidden="true">&lt;/a>&lt;span class="co"> * 原始公式： value /(elTime/freq)&lt;/span>&lt;/span>
&lt;span id="cb3-11">&lt;a href="#cb3-11" aria-hidden="true">&lt;/a>&lt;span class="co"> * 各个变量对应的单位，其中：&lt;/span>&lt;/span>
&lt;span id="cb3-12">&lt;a href="#cb3-12" aria-hidden="true">&lt;/a>&lt;span class="co"> * * value: number&lt;/span>&lt;/span>
&lt;span id="cb3-13">&lt;a href="#cb3-13" aria-hidden="true">&lt;/a>&lt;span class="co"> * * elTime: ms&lt;/span>&lt;/span>
&lt;span id="cb3-14">&lt;a href="#cb3-14" aria-hidden="true">&lt;/a>&lt;span class="co"> * * freq: ms/s ( or to say: 一秒内有多少个 ms event )&lt;/span>&lt;/span>
&lt;span id="cb3-15">&lt;a href="#cb3-15" aria-hidden="true">&lt;/a>&lt;span class="co"> */&lt;/span>&lt;/span>
&lt;span id="cb3-16">&lt;a href="#cb3-16" aria-hidden="true">&lt;/a>}&lt;/span>
&lt;span id="cb3-17">&lt;a href="#cb3-17" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb3-18">&lt;a href="#cb3-18" aria-hidden="true">&lt;/a>UInt64 CBenchInfo::GetSpeed(UInt64 numCommands) &lt;span class="at">const&lt;/span>&lt;/span>
&lt;span id="cb3-19">&lt;a href="#cb3-19" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb3-20">&lt;a href="#cb3-20" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> MyMultDiv64(numCommands, GlobalTime, GlobalFreq);&lt;/span>
&lt;span id="cb3-21">&lt;a href="#cb3-21" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>我们可以知道变量 speed 的定义如下：&lt;/p>
&lt;pre>&lt;code>speed(B/s) = 解压大小(B) * info.NumIterations(#)/time(s)&lt;/code>&lt;/pre>
&lt;p>所以 Speed 列就是 &lt;code>Speed(KiB/s)=speed(B/s)/1024(B/KiB)&lt;/code> 。即 &lt;code>Speed(KiB/s)=解压大小(B) * 重复次数(#)/time(s) /1024(B/KiB)&lt;/code>&lt;/p>
&lt;h2 id="usage-ru-rating">Usage, R/U, Rating&lt;/h2>
&lt;p>继续看剩下三列的定义：Usage, R/U, Rating&lt;/p>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode cpp">&lt;code class="sourceCode cpp">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="co">//p7zip-17.05/CPP/7zip/UI/Common/Bench.cpp&lt;/span>&lt;/span>
&lt;span id="cb5-2">&lt;a href="#cb5-2" aria-hidden="true">&lt;/a>&lt;span class="at">static&lt;/span> &lt;span class="dt">void&lt;/span> PrintResults(IBenchPrintCallback &amp;amp;f, UInt64 usage, UInt64 rpu, UInt64 rating, &lt;span class="dt">bool&lt;/span> showFreq, UInt64 cpuFreq)&lt;/span>
&lt;span id="cb5-3">&lt;a href="#cb5-3" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb5-4">&lt;a href="#cb5-4" aria-hidden="true">&lt;/a> PrintNumber(f, (usage + &lt;span class="dv">5000&lt;/span>) / &lt;span class="dv">10000&lt;/span>, kFieldSize_Usage);&lt;/span>
&lt;span id="cb5-5">&lt;a href="#cb5-5" aria-hidden="true">&lt;/a> PrintRating(f, rpu, kFieldSize_RU);&lt;/span>
&lt;span id="cb5-6">&lt;a href="#cb5-6" aria-hidden="true">&lt;/a> PrintRating(f, rating, kFieldSize_Rating);&lt;/span>
&lt;span id="cb5-7">&lt;a href="#cb5-7" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (showFreq)&lt;/span>
&lt;span id="cb5-8">&lt;a href="#cb5-8" aria-hidden="true">&lt;/a> {&lt;/span>
&lt;span id="cb5-9">&lt;a href="#cb5-9" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (cpuFreq == &lt;span class="dv">0&lt;/span>)&lt;/span>
&lt;span id="cb5-10">&lt;a href="#cb5-10" aria-hidden="true">&lt;/a> PrintSpaces(f, kFieldSize_EUAndEffec);&lt;/span>
&lt;span id="cb5-11">&lt;a href="#cb5-11" aria-hidden="true">&lt;/a> &lt;span class="cf">else&lt;/span>&lt;/span>
&lt;span id="cb5-12">&lt;a href="#cb5-12" aria-hidden="true">&lt;/a> {&lt;/span>
&lt;span id="cb5-13">&lt;a href="#cb5-13" aria-hidden="true">&lt;/a> UInt64 ddd = cpuFreq * usage / &lt;span class="dv">100&lt;/span>;&lt;/span>
&lt;span id="cb5-14">&lt;a href="#cb5-14" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (ddd == &lt;span class="dv">0&lt;/span>)&lt;/span>
&lt;span id="cb5-15">&lt;a href="#cb5-15" aria-hidden="true">&lt;/a> ddd = &lt;span class="dv">1&lt;/span>;&lt;/span>
&lt;span id="cb5-16">&lt;a href="#cb5-16" aria-hidden="true">&lt;/a> PrintPercents(f, (rating * &lt;span class="dv">10000&lt;/span>), ddd, kFieldSize_EU);&lt;/span>
&lt;span id="cb5-17">&lt;a href="#cb5-17" aria-hidden="true">&lt;/a> PrintPercents(f, rating, cpuFreq, kFieldSize_Effec);&lt;/span>
&lt;span id="cb5-18">&lt;a href="#cb5-18" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb5-19">&lt;a href="#cb5-19" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb5-20">&lt;a href="#cb5-20" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="usage">Usage&lt;/h3>
&lt;p>&lt;code>usage&lt;/code> 是从上一级 &lt;code>PrintResults&lt;/code> 中通过 &lt;code>info.GetUsage()&lt;/code> 取到的。简单跟踪之后可知：&lt;/p>
&lt;pre>&lt;code>usage = 程序占用 CPU 时间/程序开始到现在为止总耗时 * 10^6&lt;/code>&lt;/pre>
&lt;p>其中 &lt;code>10^6&lt;/code> 会在后续被除以 &lt;code>10000&lt;/code> 规整为百分比。&lt;/p>
&lt;p>本级的 &lt;code>PrintResults&lt;/code> 中打印了 Usage 列，打印的时间是：&lt;code>(usage + 5000) / 10000&lt;/code>，除以 &lt;code>10000&lt;/code> 就是上面说的“规整为百分比”，而加的 50% 大概是其他消耗占程序的 50%。总之，&lt;code>Usage&lt;/code> 列大概指的是压缩测试占用 CPU 的百分比。即：&lt;code>usage(%) ≈ 程序占用 CPU 时间/程序开始到现在为止总耗时*100%&lt;/code>&lt;/p>
&lt;h3 id="rating">Rating&lt;/h3>
&lt;p>&lt;code>rating&lt;/code> 是从以下代码得来的：&lt;/p>
&lt;div class="sourceCode" id="cb7">&lt;pre class="sourceCode cpp">&lt;code class="sourceCode cpp">&lt;span id="cb7-1">&lt;a href="#cb7-1" aria-hidden="true">&lt;/a>UInt64 CBenchProps::GetCompressRating(UInt32 dictSize, UInt64 elapsedTime, UInt64 freq, UInt64 size)&lt;/span>
&lt;span id="cb7-2">&lt;a href="#cb7-2" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb7-3">&lt;a href="#cb7-3" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (dictSize &amp;lt; (&lt;span class="dv">1&lt;/span> &amp;lt;&amp;lt; kBenchMinDicLogSize))&lt;/span>
&lt;span id="cb7-4">&lt;a href="#cb7-4" aria-hidden="true">&lt;/a> dictSize = (&lt;span class="dv">1&lt;/span> &amp;lt;&amp;lt; kBenchMinDicLogSize);&lt;/span>
&lt;span id="cb7-5">&lt;a href="#cb7-5" aria-hidden="true">&lt;/a> UInt64 encComplex = EncComplex;&lt;/span>
&lt;span id="cb7-6">&lt;a href="#cb7-6" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (LzmaRatingMode)&lt;/span>
&lt;span id="cb7-7">&lt;a href="#cb7-7" aria-hidden="true">&lt;/a> {&lt;/span>
&lt;span id="cb7-8">&lt;a href="#cb7-8" aria-hidden="true">&lt;/a> UInt64 t = GetLogSize(dictSize) - (kBenchMinDicLogSize &amp;lt;&amp;lt; kSubBits);&lt;/span>
&lt;span id="cb7-9">&lt;a href="#cb7-9" aria-hidden="true">&lt;/a> encComplex = &lt;span class="dv">870&lt;/span> + ((t * t * &lt;span class="dv">5&lt;/span>) &amp;gt;&amp;gt; (&lt;span class="dv">2&lt;/span> * kSubBits));&lt;/span>
&lt;span id="cb7-10">&lt;a href="#cb7-10" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb7-11">&lt;a href="#cb7-11" aria-hidden="true">&lt;/a> UInt64 numCommands = (UInt64)size * encComplex;&lt;/span>
&lt;span id="cb7-12">&lt;a href="#cb7-12" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb7-13">&lt;a href="#cb7-13" aria-hidden="true">&lt;/a> &lt;span class="co">/*&lt;/span>&lt;/span>
&lt;span id="cb7-14">&lt;a href="#cb7-14" aria-hidden="true">&lt;/a>&lt;span class="co"> * 和计算 Usage 时差不多，大概意思是：&lt;/span>&lt;/span>
&lt;span id="cb7-15">&lt;a href="#cb7-15" aria-hidden="true">&lt;/a>&lt;span class="co"> * numCommands/elapsedTime&lt;/span>&lt;/span>
&lt;span id="cb7-16">&lt;a href="#cb7-16" aria-hidden="true">&lt;/a>&lt;span class="co"> * 通过各种 size 估算出计算的 command 的数量是多少，单位是 Million Instruction （因为后面没见到除以 1,000,000）&lt;/span>&lt;/span>
&lt;span id="cb7-17">&lt;a href="#cb7-17" aria-hidden="true">&lt;/a>&lt;span class="co"> */&lt;/span>&lt;/span>
&lt;span id="cb7-18">&lt;a href="#cb7-18" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> MyMultDiv64(numCommands, elapsedTime, freq);&lt;/span>
&lt;span id="cb7-19">&lt;a href="#cb7-19" aria-hidden="true">&lt;/a>}&lt;/span>
&lt;span id="cb7-20">&lt;a href="#cb7-20" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb7-21">&lt;a href="#cb7-21" aria-hidden="true">&lt;/a>HRESULT CBenchCallbackToPrint::SetEncodeResult(&lt;span class="at">const&lt;/span> CBenchInfo &amp;amp;info, &lt;span class="dt">bool&lt;/span> &lt;span class="kw">final&lt;/span>)&lt;/span>
&lt;span id="cb7-22">&lt;a href="#cb7-22" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb7-23">&lt;a href="#cb7-23" aria-hidden="true">&lt;/a> RINOK(_file-&amp;gt;CheckBreak());&lt;/span>
&lt;span id="cb7-24">&lt;a href="#cb7-24" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (&lt;span class="kw">final&lt;/span>)&lt;/span>
&lt;span id="cb7-25">&lt;a href="#cb7-25" aria-hidden="true">&lt;/a> {&lt;/span>
&lt;span id="cb7-26">&lt;a href="#cb7-26" aria-hidden="true">&lt;/a> UInt64 rating = BenchProps.GetCompressRating(DictSize, info.GlobalTime, info.GlobalFreq, info.UnpackSize * info.NumIterations);&lt;/span>
&lt;span id="cb7-27">&lt;a href="#cb7-27" aria-hidden="true">&lt;/a> PrintResults(_file, info,&lt;/span>
&lt;span id="cb7-28">&lt;a href="#cb7-28" aria-hidden="true">&lt;/a> EncodeWeight, rating,&lt;/span>
&lt;span id="cb7-29">&lt;a href="#cb7-29" aria-hidden="true">&lt;/a> ShowFreq, CpuFreq, &amp;amp;EncodeRes);&lt;/span>
&lt;span id="cb7-30">&lt;a href="#cb7-30" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (!Use2Columns)&lt;/span>
&lt;span id="cb7-31">&lt;a href="#cb7-31" aria-hidden="true">&lt;/a> _file-&amp;gt;NewLine();&lt;/span>
&lt;span id="cb7-32">&lt;a href="#cb7-32" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb7-33">&lt;a href="#cb7-33" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> S_OK;&lt;/span>
&lt;span id="cb7-34">&lt;a href="#cb7-34" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>所以 Rating 就是在“程序耗时”（&lt;code>Eltime&lt;/code>）期间，产生的指令数，单位：（MI/s) 即 &lt;code>MIPS&lt;/code>。即 &lt;code>R/U(MIPS) ≈ 产生的指令数(MI)/占用 CPU 的时间&lt;/code>&lt;/p>
&lt;h3 id="ru">R/U&lt;/h3>
&lt;p>（这也是我找这段代码的关键字）&lt;/p>
&lt;p>可以看到 &lt;code>R/U&lt;/code> 列来自变量 &lt;code>rpu&lt;/code>，&lt;code>rpu&lt;/code> 来自变量 &lt;code>rating&lt;/code>，&lt;/p>
&lt;p>简单跟踪之后发现，它和 &lt;code>Rating&lt;/code> 的区别在于，将耗时改成了“占用 CPU 的时间”，所以也可以猜出 &lt;code>rpu&lt;/code> 的缩写是 rating per usage，它的单位一样是（MI/s) 即 &lt;code>MIPS&lt;/code>。即 &lt;code>Rating(MIPS) ≈ 产生的指令数(MI)/程序耗时(s)&lt;/code>&lt;/p></description></item><item><title>Introduction to precompiled headers(PCH)</title><link>https://bensyz.github.io/blog/blogs/PCH/</link><pubDate>Tue, 08 Oct 2024 12:04:22 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/PCH/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>在讲预编译头文件 PCH 的之前，我们简单回顾一下编译的流程，编译大致有以下几个步骤：&lt;/p>
&lt;ol type="1">
&lt;li>预处理：将源代码中的宏、头文件等展开&lt;/li>
&lt;li>编译：将源代码转成汇编代码&lt;/li>
&lt;li>汇编：将汇编代码转成 object 文件&lt;/li>
&lt;li>链接：生成可执行文件&lt;/li>
&lt;/ol>
&lt;p>如果有一个头文件，内容特别多，而且在好多源代码中都被引入了，那是不是会导致：每一个源代码文件在编译的时候都要展开一大段，然后在编译每一个源代码文件的时候都要重新编译这一大段，最终导致许多重复展开重复编译。那么我们是否可以将这种重复动作优化一下呢？让他只做一次，然后下次谁要用，就直接去取就完了？这就是“预编译头文件（precompiled header, PCH）” 最初的想法。&lt;/p>
&lt;h2 id="what-is-pch">What is PCH?&lt;/h2>
&lt;p>这是 &lt;a href="https://zh.wikipedia.org/zh-cn/预编译头">Wikipedia 上对 PCH 的介绍&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>预编译头（precompiled header）是程序设计时把头文件编译为中间格式（如目标文件），以节约在开发过程中编译器反复编译该头文件的开销。 C 语言、C++语言、Objective C 语言等都有类似的技术。&lt;/p>
&lt;/blockquote>
&lt;p>那这个中间格式实际又是什么呢？我们在下节 “如何生成 PCH 文件” 中会来实际看看它是什么文件。&lt;/p>
&lt;h2 id="如何生成-pch-文件">如何生成 PCH 文件？&lt;/h2>
&lt;p>非常简单，和编译普通的源文件一样，只需对头文件做编译即可：&lt;/p>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="fu">gcc&lt;/span> blah.h&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Tips:&lt;/p>
&lt;ul>
&lt;li>&lt;code>gcc&lt;/code>/&lt;code>g++&lt;/code> 会根据扩展名来选择默认的编译选项，对 &lt;code>h&lt;/code> 文件，会默认使用 &lt;code>-x c-header&lt;/code>，我们也可以强制将一个 &lt;code>c&lt;/code> 文件用 &lt;code>-x c-header&lt;/code> 来编译，编译成 PCH （具体请 &lt;code>man 1 gcc&lt;/code> 搜索 &lt;code>-x&lt;/code> 参数）&lt;/li>
&lt;/ul>
&lt;p>我们会发现，经过上一条命令的执行，我们得到了 &lt;code>blah.h.gch&lt;/code> 让我们来看看这个文件是什么：&lt;/p>
&lt;pre class="console">&lt;code>$ file blah.h.gch
blah.h.gch: GCC precompiled header (version 014) for C&lt;/code>&lt;/pre>
&lt;p>好吧，哈哈，PCH 就是 PCH，它就是单独的一个文件类型，和 &lt;code>.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped&lt;/code> 文件是不一样的。&lt;/p>
&lt;h2 id="如何使用-pch-文件">如何使用 PCH 文件？&lt;/h2>
&lt;p>那既然 PCH 是一个单独的文件类型，那我们要怎么使用它呢？我们知道，头文件可以用 &lt;code>#include&lt;/code> 来引入，object 是在链接期间作为输入文件引入的。那预编译头文件呢？&lt;/p>
&lt;p>这就要找 &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Precompiled-Headers.html">GCC 的官方文档&lt;/a> 了。文中提到，要使用 PCH 文件，你啥都不需做，就正常 &lt;code>include&lt;/code> 原始的头文件就好，&lt;code>gcc&lt;/code>/&lt;code>g++&lt;/code> 在编译时，搜索头文件的时候会优先搜索同名带 &lt;code>.gch&lt;/code> 后缀的预编译头文件。另外这个带 &lt;code>.gch&lt;/code> 后缀的文件也可以是文件夹，里面可以放多个预编译头文件文件，&lt;code>gcc&lt;/code>/&lt;code>g++&lt;/code> 在编译时，会去这个目录下找任意一个可以用的预编译头文件。可以这么来理解，头文件有两种形式：文本形式和 PCH。我们来尝试使用一下预编译头文件。&lt;/p>
&lt;h3 id="当-.gch-是文件时">当 &lt;code>.gch&lt;/code> 是文件时&lt;/h3>
&lt;h4 id="修改原始头文件添加-error-宏">修改原始头文件，添加 &lt;code>#error&lt;/code> 宏&lt;/h4>
&lt;p>GCC 的官方文档，给出的验证方式是 1. 编译 PCH 文件 2. 修改原始头文件，添加 &lt;code>#error&lt;/code> 宏 3. C 源文件中 &lt;code>include&lt;/code> 正常引入该头文件 4. 编译，查看是会报 error 还是编译通过&lt;/p>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.h&lt;/span>&lt;/span>
&lt;span id="cb3-2">&lt;a href="#cb3-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifndef BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb3-3">&lt;a href="#cb3-3" aria-hidden="true">&lt;/a>&lt;span class="pp">#define BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb3-4">&lt;a href="#cb3-4" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb4">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb4-1">&lt;a href="#cb4-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.c&lt;/span>&lt;/span>
&lt;span id="cb4-2">&lt;a href="#cb4-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#include &lt;/span>&lt;span class="im">&amp;quot;blah.h&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb4-3">&lt;a href="#cb4-3" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb4-4">&lt;a href="#cb4-4" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb4-5">&lt;a href="#cb4-5" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="console">&lt;code>$ gcc blah.h
$ echo &amp;#39;#error &amp;quot;PCH is not been used&amp;quot;&amp;#39; &amp;gt;&amp;gt; blah.h # blah.h 中添加 #error 宏
$ gcc blah.c&lt;/code>&lt;/pre>
&lt;p>我们会发现，它确实直接编译通过了，这就说明预编译头文件生效了。当然这里引入一个新的问题，我需要使用 Makefile 或是其他方式，来更新预编译头文件，来避免头文件和预编译头文件不对应。&lt;/p>
&lt;h4 id="使用-gcc-的--h-参数">使用 &lt;code>gcc&lt;/code> 的 &lt;code>-H&lt;/code> 参数&lt;/h4>
&lt;p>&lt;a href="https://stackoverflow.com/a/18593344/13033234">stackoverflow 上的这个回答&lt;/a> 介绍了一种更直接明了的方式：GCC 有一个 &lt;code>-H&lt;/code> 参数，可以用它打印实际引用的头文件或预编译头文件。查询 GCC 的 Man pages，我们可以看到：&lt;/p>
&lt;blockquote>
&lt;p>-H Print the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the #include stack it is. Precompiled header files are also printed, even if they are found to be invalid; an invalid precompiled header file is printed with …x and a valid one with …! .&lt;/p>
&lt;/blockquote>
&lt;div class="sourceCode" id="cb6">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb6-1">&lt;a href="#cb6-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.h&lt;/span>&lt;/span>
&lt;span id="cb6-2">&lt;a href="#cb6-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifndef BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb6-3">&lt;a href="#cb6-3" aria-hidden="true">&lt;/a>&lt;span class="pp">#define BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb6-4">&lt;a href="#cb6-4" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb7">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb7-1">&lt;a href="#cb7-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.c&lt;/span>&lt;/span>
&lt;span id="cb7-2">&lt;a href="#cb7-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#include &lt;/span>&lt;span class="im">&amp;quot;blah.h&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-3">&lt;a href="#cb7-3" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb7-4">&lt;a href="#cb7-4" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb7-5">&lt;a href="#cb7-5" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="console">&lt;code>$ gcc blah.h
$ gcc -H blah.c
! blah.h.gch
blah.c&lt;/code>&lt;/pre>
&lt;h3 id="当-.gch-是文件夹时">当 &lt;code>.gch&lt;/code> 是文件夹时&lt;/h3>
&lt;div class="sourceCode" id="cb9">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb9-1">&lt;a href="#cb9-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.h&lt;/span>&lt;/span>
&lt;span id="cb9-2">&lt;a href="#cb9-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifndef BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb9-3">&lt;a href="#cb9-3" aria-hidden="true">&lt;/a>&lt;span class="pp">#define BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb9-4">&lt;a href="#cb9-4" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb10">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb10-1">&lt;a href="#cb10-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.c&lt;/span>&lt;/span>
&lt;span id="cb10-2">&lt;a href="#cb10-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#include &lt;/span>&lt;span class="im">&amp;quot;blah.h&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb10-3">&lt;a href="#cb10-3" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb10-4">&lt;a href="#cb10-4" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb10-5">&lt;a href="#cb10-5" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="console">&lt;code>$ mkdir blah.h.gch
$ gcc blah.h -o blah.h.gch/c
$ gcc -H blah.c
! blah.h.gch/c
blah.c&lt;/code>&lt;/pre>
&lt;p>也是可以正常使用的。&lt;/p>
&lt;h3 id="在-qt-中使用-pch">在 Qt 中使用 PCH&lt;/h3>
&lt;p>&lt;a href="https://doc.qt.io/qt-6/qmake-precompiledheaders.html">Qt&lt;/a> 中只需在 &lt;code>.pro&lt;/code> 中加入以下两行，并在 &lt;code>stable.h&lt;/code> 中放入你想预编译的头文件，Qt 对单个项目目前只支持一个全局的预编译头文件。&lt;/p>
&lt;div class="sourceCode" id="cb12">&lt;pre class="sourceCode pro">&lt;code class="sourceCode prolog">&lt;span id="cb12-1">&lt;a href="#cb12-1" aria-hidden="true">&lt;/a>&lt;span class="dt">CONFIG&lt;/span> += precompile_header&lt;/span>
&lt;span id="cb12-2">&lt;a href="#cb12-2" aria-hidden="true">&lt;/a>&lt;span class="dt">PRECOMPILED_HEADER&lt;/span> &lt;span class="kw">=&lt;/span> stable&lt;span class="kw">.&lt;/span>h&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>然后 &lt;code>qmake&lt;/code> 会自动生成对应的 &lt;code>Makefile&lt;/code>，完成以下几件事： 1. 递归地找到所有依赖的头文件，将它们放在 PCH 的 prerequisite，来做到当头文件更新时，PCH 会更新。 2. 在所有 &lt;code>.o&lt;/code> 的 target 中通过 &lt;code>-include&lt;/code> 的方式强制引入 PCH 文件 3. 将 PCH 文件，作为所有 &lt;code>.o&lt;/code> 的 target 的 prerequisite&lt;/p>
&lt;p>Tips:&lt;/p>
&lt;ul>
&lt;li>需要注意的是，通过上面几条 &lt;code>Makefile&lt;/code> 的规则，如果任意一个构成 PCH 的头文件变更，都会导致 PCH 更新，从而导致所有 .o 重编，反而使增量编译时间变长。这也是 Qt 问什么称这个文件为 &lt;code>stable.h&lt;/code> 的原因&lt;/li>
&lt;/ul>
&lt;h2 id="预编译头文件失效invalid">预编译头文件失效（invalid）&lt;/h2>
&lt;p>我们前面说到，“会去这个目录下找任意一个可以用的预编译头文件”，那什么时可用的，什么是不可用的呢？&lt;/p>
&lt;h3 id="gccg-编译器不同">GCC/G++ 编译器不同&lt;/h3>
&lt;p>GCC 编译时，不能使用 G++ 编译出来的预编译头文件，反之亦然。例如：&lt;/p>
&lt;div class="sourceCode" id="cb13">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb13-1">&lt;a href="#cb13-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.h&lt;/span>&lt;/span>
&lt;span id="cb13-2">&lt;a href="#cb13-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifndef BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb13-3">&lt;a href="#cb13-3" aria-hidden="true">&lt;/a>&lt;span class="pp">#define BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb13-4">&lt;a href="#cb13-4" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb14">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb14-1">&lt;a href="#cb14-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.c&lt;/span>&lt;/span>
&lt;span id="cb14-2">&lt;a href="#cb14-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#include &lt;/span>&lt;span class="im">&amp;quot;blah.h&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb14-3">&lt;a href="#cb14-3" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb14-4">&lt;a href="#cb14-4" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb14-5">&lt;a href="#cb14-5" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="console">&lt;code>$ g++ blah.h -o blah.h.gch
$ gcc -H blah.c
x blah.h.gch
. blah.h&lt;/code>&lt;/pre>
&lt;h3 id="头文件中的宏例如-ifdef引入分支">头文件中的宏（例如 &lt;code>#ifdef&lt;/code>）引入分支&lt;/h3>
&lt;p>头文件中有宏（例如 &lt;code>#ifdef&lt;/code>）引入分支，编译 PCH 时的分支和使用 PCH 时的分支不同&lt;/p>
&lt;div class="sourceCode" id="cb16">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb16-1">&lt;a href="#cb16-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.h&lt;/span>&lt;/span>
&lt;span id="cb16-2">&lt;a href="#cb16-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifndef BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb16-3">&lt;a href="#cb16-3" aria-hidden="true">&lt;/a>&lt;span class="pp">#define BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb16-4">&lt;a href="#cb16-4" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb16-5">&lt;a href="#cb16-5" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifdef blah_1&lt;/span>&lt;/span>
&lt;span id="cb16-6">&lt;a href="#cb16-6" aria-hidden="true">&lt;/a>&lt;span class="pp">#define blah 1&lt;/span>&lt;/span>
&lt;span id="cb16-7">&lt;a href="#cb16-7" aria-hidden="true">&lt;/a>&lt;span class="pp">#else&lt;/span>&lt;/span>
&lt;span id="cb16-8">&lt;a href="#cb16-8" aria-hidden="true">&lt;/a>&lt;span class="pp">#define blah 2&lt;/span>&lt;/span>
&lt;span id="cb16-9">&lt;a href="#cb16-9" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>
&lt;span id="cb16-10">&lt;a href="#cb16-10" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb16-11">&lt;a href="#cb16-11" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb17">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb17-1">&lt;a href="#cb17-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.c&lt;/span>&lt;/span>
&lt;span id="cb17-2">&lt;a href="#cb17-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#include &lt;/span>&lt;span class="im">&amp;quot;blah.h&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb17-3">&lt;a href="#cb17-3" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb17-4">&lt;a href="#cb17-4" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb17-5">&lt;a href="#cb17-5" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="console">&lt;code>$ gcc -D blah_1 blah.h -o blah.h.gch
$ gcc -H blah.c
x blah.h.gch
. blah.h&lt;/code>&lt;/pre>
&lt;h2 id="解决失效问题">解决失效问题&lt;/h2>
&lt;p>当然最直接的方式是该怎么样怎么样，GCC 编译就用 GCC 编译 PCH，编译 object 时的分支走哪个编译 PCH 时就走哪个。&lt;/p>
&lt;p>但有一个问题：每换一个编译器，或每换一个宏（例如编译配置宏）都要重新编译预编译头文件，又或者需要自己拷来拷去。十分麻烦，有什么方式可以避免手动拷吗？把 &lt;code>.gch&lt;/code> 改成文件夹，往里面放各种有效的头文件，我们上面说过：GCC 会去这个目录下找任意一个可以用的预编译头文件。也就是说，你可以在这个目录下放多版不同情况下的预编译头文件，让 GCC 自动找寻合适的预编译头文件，&lt;/p>
&lt;h3 id="gccg-编译器不同-1">GCC/G++ 编译器不同&lt;/h3>
&lt;p>我们可以同时放 GCC/G++ 的预编译头文件，让 GCC/G++ 自己选择&lt;/p>
&lt;pre class="console">&lt;code>$ mkdir blah.h.gch
$ gcc blah.h -o blah.h.gch/c
$ g++ blah.h -o blah.h.gch/c++
$ gcc -H blah.c
! blah.h.gch/c
blah.c
$ g++ -H blah.c
x blah.h.gch/c
! blah.h.gch/c++
blah.c&lt;/code>&lt;/pre>
&lt;h3 id="头文件中有宏例如-ifdef引入分支">头文件中有宏（例如 &lt;code>#ifdef&lt;/code>）引入分支&lt;/h3>
&lt;div class="sourceCode" id="cb20">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb20-1">&lt;a href="#cb20-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.h&lt;/span>&lt;/span>
&lt;span id="cb20-2">&lt;a href="#cb20-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifdef blah_1&lt;/span>&lt;/span>
&lt;span id="cb20-3">&lt;a href="#cb20-3" aria-hidden="true">&lt;/a>&lt;span class="pp">#define blah 1&lt;/span>&lt;/span>
&lt;span id="cb20-4">&lt;a href="#cb20-4" aria-hidden="true">&lt;/a>&lt;span class="pp">#else&lt;/span>&lt;/span>
&lt;span id="cb20-5">&lt;a href="#cb20-5" aria-hidden="true">&lt;/a>&lt;span class="pp">#define blah 2&lt;/span>&lt;/span>
&lt;span id="cb20-6">&lt;a href="#cb20-6" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb21">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb21-1">&lt;a href="#cb21-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.c&lt;/span>&lt;/span>
&lt;span id="cb21-2">&lt;a href="#cb21-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#include &lt;/span>&lt;span class="im">&amp;quot;blah.h&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb21-3">&lt;a href="#cb21-3" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb21-4">&lt;a href="#cb21-4" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb21-5">&lt;a href="#cb21-5" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="console">&lt;code>$ gcc blah.h -o blah.h.gch/c1
$ gcc -D blah_1 blah.h -o blah.h.gch/c2
$ gcc -H blah.c
! blah.h.gch/c1
blah.c
$ gcc -D blah_1 -H blah.c
x blah.h.gch/c1
! blah.h.gch/c2
blah.c&lt;/code>&lt;/pre>
&lt;h2 id="常见的错误">常见的错误&lt;/h2>
&lt;p>除了上述说的 &lt;code>gcc -H&lt;/code> 和 &lt;code>#error&lt;/code>，我们也可以使用 &lt;code>-Winvalid-pch&lt;/code> 来让 GCC 吐出 PCH 失效问题的详细信息。 ### &lt;code>blah.h.gch: not for GNU C17&lt;/code> 即上面说的 GCC 不能使用 G++ 编译的 PCH。&lt;/p>
&lt;h3 id="blah.h.gch-not-used-because-xxx-not-defined">&lt;code>blah.h.gch: not used because xxx not defined&lt;/code>&lt;/h3>
&lt;p>即上面说的编译 PCH 和使用 PCH 时宏分支不同。&lt;/p>
&lt;h3 id="cc1plus-error-one-or-more-pch-files-were-found-but-they-were-invalid">&lt;code>cc1plus: error: one or more PCH files were found, but they were invalid&lt;/code>&lt;/h3>
&lt;p>这种情况出现在使用 &lt;code>-include&lt;/code> 强制引入头文件，当这个头文件只有 PCH 的形式而没有文本形式时，便会报这个错，和这个错在一起的还有&lt;/p>
&lt;pre>&lt;code>&amp;lt;command-line&amp;gt;: fatal error: test_pch: No such file or directory&lt;/code>&lt;/pre>
&lt;div class="sourceCode" id="cb24">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb24-1">&lt;a href="#cb24-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.h&lt;/span>&lt;/span>
&lt;span id="cb24-2">&lt;a href="#cb24-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#ifndef BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb24-3">&lt;a href="#cb24-3" aria-hidden="true">&lt;/a>&lt;span class="pp">#define BLAH_H&lt;/span>&lt;/span>
&lt;span id="cb24-4">&lt;a href="#cb24-4" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb24-5">&lt;a href="#cb24-5" aria-hidden="true">&lt;/a>&lt;span class="pp">#define blah 1&lt;/span>&lt;/span>
&lt;span id="cb24-6">&lt;a href="#cb24-6" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb24-7">&lt;a href="#cb24-7" aria-hidden="true">&lt;/a>&lt;span class="pp">#endif&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb25">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb25-1">&lt;a href="#cb25-1" aria-hidden="true">&lt;/a>&lt;span class="co">// blah.c&lt;/span>&lt;/span>
&lt;span id="cb25-2">&lt;a href="#cb25-2" aria-hidden="true">&lt;/a>&lt;span class="pp">#include &lt;/span>&lt;span class="im">&amp;quot;blah.h&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb25-3">&lt;a href="#cb25-3" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb25-4">&lt;a href="#cb25-4" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb25-5">&lt;a href="#cb25-5" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="make">&lt;code>pch_fake_header = test_pch
pch_dir = $(pch_fake_header).gch
old_external_macro = old
new_external_macro = new
target = main
help:
printf &amp;quot;Use the two commands to test the two cases:\nmake demo_1\nmake demo_2\n&amp;quot;
demo_1: clean
echo &amp;quot;macro changes&amp;quot;
mkdir -p $(pch_dir)
gcc -D external_macro=\&amp;quot;$(old_external_macro)\&amp;quot; -o $(pch_dir)/c blah.h
gcc -D external_macro=\&amp;quot;$(new_external_macro)\&amp;quot; -include $(pch_fake_header) -o $(target) main.c
demo_2: clean
echo &amp;quot;gch generated with gcc&amp;quot;
mkdir -p $(pch_dir)
g++ -D external_macro=\&amp;quot;$(old_external_macro)\&amp;quot; -o $(pch_dir)/c blah.h
gcc -D external_macro=\&amp;quot;$(new_external_macro)\&amp;quot; -include $(pch_fake_header) -o $(target) main.c
main: pch
gcc -include $(pch_fake_header) -D external_macro=\&amp;quot;$(new_external_macro)\&amp;quot; -o $(target) main.c
pch:
mkdir -p $(pch_dir)
gcc -D external_macro=\&amp;quot;$(old_external_macro)\&amp;quot; -o $(pch_dir)/c blah.h
clean:
[ -e $(pch_dir) ] &amp;amp;&amp;amp; rm -r $(pch_dir) || true
rm -f $(target)&lt;/code>&lt;/pre>
&lt;h3 id="error-stray-xxx-in-program">&lt;code>error: stray xxx in program&lt;/code>&lt;/h3>
&lt;p>这种情况一样出现在使用 &lt;code>-include&lt;/code> 强制引入头文件的情况，当这个头文件只有 PCH 的形式而没有文本形式时，但上一次编译的 ELF 文件生成了，生成的名称正好是强制引入的头文件的头文件，便会报这个错，原因是，这次直接 include 了二进制文件。这种情况在 Qt 中出现过，Qt 配置 PCH 后，会将 PCH 文件放在 &lt;code>TARGET.gch&lt;/code> 文件夹中，而该文件夹的目录和 &lt;code>TARGET&lt;/code> 同级。&lt;/p>
&lt;h3 id="pch-有效但是并未使用">PCH 有效但是并未使用&lt;/h3>
&lt;p>从 GCC 文档中看到，如果某个头文件要使用 PCH 的形式，必须在整个文件中第一行 C 代码前。而最常见的 &lt;code>stdio.h&lt;/code> 中有 C 代码，所以，如果我们将自己的头文件放在 &lt;code>stdio.h&lt;/code> 之后，GCC 是不会使用 PCH 的。&lt;/p></description></item><item><title>PCIe 和 lspci</title><link>https://bensyz.github.io/blog/blogs/PCIe_and_lspci/</link><pubDate>Wed, 08 May 2024 08:06:33 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/PCIe_and_lspci/</guid><description>&lt;h2 id="pcie-基础介绍">PCIe 基础介绍&lt;/h2>
&lt;p>Wikipedia 上对 &lt;a href="https://zh.wikipedia.org/wiki/PCI_Express">PCI_Express&lt;/a> 的介绍 如下：&lt;/p>
&lt;blockquote>
&lt;p>Peripheral Component Interconnect Express，简称 PCI-E，官方简称 PCIe，是计算机总线的一个重要分支，它沿用既有的 PCI 编程概念及信号标准，并且构建了更加高速的串行通信系统标准。目前这一标准由 PCI-SIG 组织制定和维护。PCIe 仅应用于内部互连。由于 PCIe 是基于既有的 PCI 系统，所以只需修改物理层而无须修改软件就可将现有 PCI 系统转换为 PCIe。&lt;/p>
&lt;/blockquote>
&lt;h3 id="版本传输通道数和速率">版本、传输通道数和速率&lt;/h3>
&lt;p>我们在买固态硬盘和显卡的时候，经常需要确定 PCIe 的 &lt;strong>版本&lt;/strong> 和 &lt;strong>通道数(x几)&lt;/strong>，那这两个和速率有什么关系？&lt;/p>
&lt;p>首先，什么是 PCIe 的版本和通道数：&lt;/p>
&lt;ul>
&lt;li>版本：无疑就是 PCIe 技术迭代之后，速率有了极大地提升。例如：&lt;code>PCIe 3.0&lt;/code>&lt;/li>
&lt;li>通道数：lane 数，一条 lane 对应两组“差分信号对”，一组差分信号对用于传输 TX，另一组用于传输 RX。由于 PCIe 是串行传输，多条 lane 的数据传输是由 PCIe 上层应用来自行做 IO 多路复用的。例如：&lt;code>x4&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>其次，上边两个参数和速率有什么关系？同一版本，通道数每增一个速率就翻倍。版本每增一个，速率几乎翻倍（除了 PCIe 1.0 到 PCIe 2.0）&lt;/p>
&lt;p>不同版本对应的速率关系：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>Version&lt;/th>
&lt;th>Transfer rate per lane(GT/s)&lt;/th>
&lt;th>Line code&lt;/th>
&lt;th>Throughput for &lt;code>x1&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>1.0&lt;/td>
&lt;td>2.5&lt;/td>
&lt;td>8b/10b&lt;/td>
&lt;td>&lt;code>2.5 Gib/s*(8b/10b)=2.0 Gib/s=0.250 GiB/s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>2.0&lt;/td>
&lt;td>5.0&lt;/td>
&lt;td>8b/10b&lt;/td>
&lt;td>&lt;code>5.0 Gib/s*(8b/10b)=4.0 Gib/s=0.500 GiB/s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>3.0&lt;/td>
&lt;td>8.0&lt;/td>
&lt;td>128b/130b&lt;/td>
&lt;td>&lt;code>8.0 Gib/s*(128b/130b)=7.88 Gib/s=0.985 GiB/s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>4.0&lt;/td>
&lt;td>16.0&lt;/td>
&lt;td>128b/130b&lt;/td>
&lt;td>&lt;code>16.0 Gib/s*(128b/130b)=15.753 Gib/s=1.969 GiB/s&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>5.0&lt;/td>
&lt;td>32.0&lt;/td>
&lt;td>128b/130b&lt;/td>
&lt;td>&lt;code>32.0 Gib/s*(128b/130b)=31.508 Gib/s=3.938 GiB/s&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Tips:
&lt;ul>
&lt;li>1 GT/s 表示每秒有 1*10^9 次传输，一次传输传输 1 个bit&lt;/li>
&lt;li>为了避免多个低信号连续传输无法被区分，我们使用 8b/10b 等 Line code 来编码。所以实际传输速率的计算，如最后一列所写：&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;p>而通道数的增长就非常简单了，直接对应版本的 &lt;code>x1&lt;/code> 的速率上乘几。&lt;/p>
&lt;h3 id="设备类别">设备类别&lt;/h3>
&lt;p>PCIe 是一种信号传输协议，信号的传输必有设备，那么，涉及到 PCIe 信号的设备种类有哪些：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>类别&lt;/th>
&lt;th>类似于&lt;/th>
&lt;th>上游信号&lt;/th>
&lt;th>下游信号&lt;/th>
&lt;th>用途&lt;/th>
&lt;th>例子/体现在&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>Root Complex&lt;/td>
&lt;td>PCIe 主设备&lt;/td>
&lt;td>CPU、内存连接&lt;/td>
&lt;td>下游收发 PCIe 信号。&lt;/td>
&lt;td>主机收发 PCIe 信号&lt;/td>
&lt;td>在主板北桥或 SOC 内部&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>Switch&lt;/td>
&lt;td>PCIe hub&lt;/td>
&lt;td>PCIe 信号&lt;/td>
&lt;td>PCIe 信号&lt;/td>
&lt;td>用于扩展 PCIe 口&lt;/td>
&lt;td>在主板北桥&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>Endpoint&lt;/td>
&lt;td>PCIe 从设备&lt;/td>
&lt;td>PCIe 信号&lt;/td>
&lt;td>下游为其他信号&lt;/td>
&lt;td>实际功能设备&lt;/td>
&lt;td>固态硬盘、显卡、RTL8168 网卡芯片&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Tips:
&lt;ul>
&lt;li>Root Complex 中的上游信号: 和 CPU 连接大概是用于发送中断以及 DMA 控制，和内存连接的大概是用于 DMA 数据搬运。&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;p>他们的关系&lt;a href="https://en.wikipedia.org/wiki/Root_complex">如图&lt;/a>：&lt;/p>
&lt;figure>
&lt;img src="./figures/Example_PCI_Express_Topology.png" alt="" />&lt;figcaption>Example PCI Express Topology&lt;/figcaption>
&lt;/figure>
&lt;h2 id="lspci-介绍">&lt;code>lspci&lt;/code> 介绍&lt;/h2>
&lt;p>正如开头所说， PCIe 相对于 PCI 只是物理层上发生了变动，上层软件完全一样，所以我们可以使用 &lt;code>lspci&lt;/code> 来读取设备上 PCIe 的信息。也就是说虽然 PCIe 没有总线的概念，物理上是点对点协议，但是由于上层软件是兼容的，所以，仍然会有总线的概念。在后面选择设备时会用到总线的概念，但是它只是一个虚的概念。&lt;/p>
&lt;p>我们将用 &lt;code>lspci&lt;/code> 命令来获取常见的 &lt;code>PCIe&lt;/code> 的信息，主要包括以下几个方面：&lt;/p>
&lt;ol type="1">
&lt;li>获取设备的总线号和设备号，用于选择设备&lt;/li>
&lt;li>获取 PCIe 插槽/设备的 &lt;em>版本号&lt;/em> 和 &lt;em>传输通道数&lt;/em>&lt;/li>
&lt;/ol>
&lt;h3 id="常用参数">常用参数&lt;/h3>
&lt;ul>
&lt;li>&lt;code>s&lt;/code>: select&lt;/li>
&lt;li>&lt;code>v&lt;/code>: verbose&lt;/li>
&lt;li>&lt;code>vv&lt;/code>: more verbose&lt;/li>
&lt;li>&lt;code>vvv&lt;/code>: even more verbose&lt;/li>
&lt;li>&lt;code>t&lt;/code>: tree view&lt;/li>
&lt;/ul>
&lt;h3 id="选择-pci-设备-lspci--t">选择 PCI 设备（ &lt;code>lspci -t&lt;/code>）&lt;/h3>
&lt;h4 id="lspci">&lt;code>lspci&lt;/code>&lt;/h4>
&lt;p>在选择 PCI 设备前，我们先看一下不带任何参数的 &lt;code>lspci&lt;/code>，它的输出如下：&lt;/p>
&lt;pre class="console">&lt;code>$ lspci
...
03:08.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca)
03:10.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca)
04:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1)
04:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)
05:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1)
05:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)
...&lt;/code>&lt;/pre>
&lt;p>由于 PCIe 借用的 PCI 的软件，因此沿用了 PCI 的这四种属性：&lt;code>domain&lt;/code>, &lt;code>bus&lt;/code>, &lt;code>device&lt;/code>, &lt;code>function&lt;/code> 我们可以通过这四个参数确定或者说选择一个 PCI 设备上的一个功能。他们也就是上述输出中的第一列。其中由于 domain number 基本是一样的，为 &lt;code>0&lt;/code>，所以这里省略了只有当带上 &lt;code>-t&lt;/code> 的时候会看到这个 domain number。完整的定位一个 PCI 设备和功能的格式是：&lt;/p>
&lt;pre>&lt;code>domain:bus:device.function&lt;/code>&lt;/pre>
&lt;p>对于下面这个设备&lt;/p>
&lt;pre>&lt;code>04:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1)
| | |
| | \- function
| \--- device
\------ bus&lt;/code>&lt;/pre>
&lt;p>它的各个属性如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>domain&lt;/code>: 0 ( 被省略了 )&lt;/li>
&lt;li>&lt;code>bus&lt;/code>: 04&lt;/li>
&lt;li>&lt;code>device&lt;/code>: 00&lt;/li>
&lt;li>&lt;code>function&lt;/code>: 0&lt;/li>
&lt;/ul>
&lt;h4 id="lspci--s-xx">&lt;code>lspci -s xx&lt;/code>&lt;/h4>
&lt;p>上一节中说到，可以由这个四个属性确定一个 PCI 设备功能。它有什么用呢？当我们使用 &lt;code>vvv&lt;/code> 显示更多详细信息而不选择特定设备时，&lt;code>lspci&lt;/code> 会反给我们一大串的输出，你会发现太多了，都不知道看哪个，用 &lt;code>-s&lt;/code> 来选择一下会对结果输出有极大的简化。对上面那个设备我们可以用以下命令来选择输出：&lt;/p>
&lt;pre class="console">&lt;code>$ lspci -s 0:03:08.0
03:08.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca)
$ lspci -s 03:08.0
03:08.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca)&lt;/code>&lt;/pre>
&lt;p>你可以用 &lt;code>-vvv&lt;/code> 来输出更多详细信息。我们会在读取 PCIe 版本和带宽的时候用到这个参数。&lt;/p>
&lt;h3 id="pcie-树状结构的输出解析确定设备和槽-lspci--t">PCIe 树状结构的输出解析，确定设备和槽（ &lt;code>lspci -t&lt;/code>）&lt;/h3>
&lt;p>&lt;code>lspci -t&lt;/code> 给出的树状结构表示的是它的物理连接方式（ &lt;code>bus&lt;/code> 是虚拟的含义），我们可以通过它来查询一个 PCIe 外设是插在哪个 PCIe 的槽上，当我们要扩容，或者要替换外设时，我们需要选择版本、通道匹配的 PCI 外设，我们可以通过这个命令来查看 PCIe 槽最大支持的版本和通道数，避免不匹配带来的性能缺失。同时，我们将看到 &lt;code>domain&lt;/code>, &lt;code>bus&lt;/code>, &lt;code>device&lt;/code>, &lt;code>function&lt;/code> 属性在树状结构中的表示。&lt;/p>
&lt;p>以下是 &lt;code>lspci -tv&lt;/code> 的输出：&lt;/p>
&lt;pre class="console">&lt;code>$ lspci -tv
-+-[0000:ff]-+-08.0 Intel Corporation Xeon E7 v4/Xeon E5 v4/Xeon E3 v4/Xeon D QPI Link 0
| +-...
\-[0000:00]-+-00.0 Intel Corporation Xeon E7 v4/Xeon E5 v4/Xeon E3 v4/Xeon D DMI2
+-01.0-[01]--
+-02.0-[02-05]----00.0-[03-05]--+-08.0-[04]--+-00.0 NVIDIA Corporation GP102 [TITAN X]
| | \-00.1 NVIDIA Corporation GP102 HDMI Audio Controller
| \-10.0-[05]--+-00.0 NVIDIA Corporation GP102 [TITAN X]
| \-00.1 NVIDIA Corporation GP102 HDMI Audio Controller
+-03.0-[06-09]----00.0-[07-09]--+-08.0-[08]--+-00.0 NVIDIA Corporation GP102 [TITAN X]
| | \-00.1 NVIDIA Corporation GP102 HDMI Audio Controller
| \-10.0-[09]--+-00.0 NVIDIA Corporation GP102 [TITAN X]
| \-00.1 NVIDIA Corporation GP102 HDMI Audio Controller
+-05.0 Intel Corporation Xeon E7 v4/Xeon E5 v4/Xeon E3 v4/Xeon D Map/VTd_Misc/System Management
+-...&lt;/code>&lt;/pre>
&lt;p>在 &lt;code>lspci -t&lt;/code> 中，domain 和 bus 被用中括号包裹起来，例如第一行的 &lt;code>[0000:ff]&lt;/code> 表示 domain 为 0000，bus 为 ff。&lt;/p>
&lt;p>我们来一点一点看一下这棵子树&lt;/p>
&lt;pre>&lt;code>-+-
\-[0000:00]-+
+
+-02.0-[02-05]----00.0-[03-05]--+-08.0-[04]--+-00.0 NVIDIA Corporation GP102 [TITAN X]
| \-00.1 NVIDIA Corporation GP102 HDMI Audio Controller
\-10.0-[05]--+-00.0 NVIDIA Corporation GP102 [TITAN X]
\-00.1 NVIDIA Corporation GP102 HDMI Audio Controller&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>&lt;code>[0000:00]&lt;/code>:
&lt;ul>
&lt;li>domain: 0000&lt;/li>
&lt;li>bus: 00&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>[0000:00]-+-02.0-[02-05]----00.0-[03-05]--+-08.0-[04]--+-00.0&lt;/code>
&lt;ul>
&lt;li>&lt;code>[0000:00]-+-02.0-[02-05]&lt;/code>
&lt;ul>
&lt;li>&lt;code>[0000:00]-+-02.0&lt;/code>
&lt;ul>
&lt;li>02 的设备挂在 &lt;code>[0000:00]&lt;/code>，即它的“索引”是 &lt;strong>&lt;code>00:02&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>02.0-[02-05]&lt;/code>
&lt;ul>
&lt;li>02-05 (即 02、03、04、05) 这些 bus 挂在 &lt;code>00:02&lt;/code> 这个设备的 &lt;code>.0&lt;/code> 功能上&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>[02-05]----00.0-[03-05]&lt;/code>
&lt;ul>
&lt;li>&lt;code>[02-05]----00.0&lt;/code>
&lt;ul>
&lt;li>&lt;code>00&lt;/code> 这个设备挂在 bus 02 上，（03-05 bus 号是给后续的桥用的），即它的“索引”是 &lt;strong>&lt;code>02:00&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>00.0-[03-05]&lt;/code>
&lt;ul>
&lt;li>03-05 (即 03、04、05) 这些 bus 挂在 &lt;code>02:00&lt;/code> 这个设备的 &lt;code>.0&lt;/code> 功能上&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>[03-05]--+-08.0-[04]&lt;/code>
&lt;ul>
&lt;li>&lt;code>[03-05]--+-08.0&lt;/code>
&lt;ul>
&lt;li>&lt;code>08&lt;/code> 这个设备挂在 bus 03 上，（04 05 bus 号是给后续的桥用的），即它的“索引”是 &lt;strong>&lt;code>03:08&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>08.0-[04]&lt;/code>
&lt;ul>
&lt;li>04 bus 挂在 &lt;code>03:08&lt;/code> 这个设备的 &lt;code>.0&lt;/code> 功能上&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>[04]--+-00.0&lt;/code>
&lt;ul>
&lt;li>&lt;code>00&lt;/code> 这个设备挂在 bus 04 上，即它的“索引”是 &lt;strong>&lt;code>04:00&lt;/code>&lt;/strong>，也就是 &lt;code>GP102 [TITAN X]&lt;/code> 显卡&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>00.0&lt;/code> 和 &lt;code>00.1&lt;/code> 是 &lt;code>GP102 [TITAN X]&lt;/code> 显卡的两个 Function&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;p>为了不让上述的解析过长，我将上述涉及的设备列在这里，可以通过 &lt;code>lspci -s&lt;/code>，来选择输出&lt;/p>
&lt;pre>&lt;code>00:02.0 PCI bridge: Intel Corporation Xeon E7 v4/Xeon E5 v4/Xeon E3 v4/Xeon D PCI Express Root Port 2 (rev 01) -&amp;gt; 它是一个 Root Complex。
02:00.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca) -&amp;gt; 它是一个 switch。
03:08.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca) -&amp;gt; 它是一个 switch。
04:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1) -&amp;gt; 显卡的 VGA 功能
04:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1) -&amp;gt; 显卡的 HDMI 功能&lt;/code>&lt;/pre>
&lt;p>所以回到本节开头的问题，&lt;code>04:00&lt;/code> 的显卡插在哪个 PCIe 槽上呢？&lt;code>03:08.0&lt;/code> 这个 switch 芯片上。&lt;/p>
&lt;h3 id="获取-pci-设备的详细信息">获取 PCI 设备的详细信息&lt;/h3>
&lt;p>终于到了获取 PCI 设备速率的时候了，我们将查看 &lt;code>04:00&lt;/code> 显卡和 &lt;code>03:08.0&lt;/code> 插槽，注意 Capabilities 信息需要 root 来读取。以下是 &lt;code>03:08.0&lt;/code> 和 &lt;code>04:00&lt;/code> 的完整输出。&lt;/p>
&lt;pre class="console">&lt;code># lspci -vvv -s 03:08.0
03:08.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca) (prog-if 00 [Normal decode])
Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+
Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
Latency: 0, Cache Line Size: 32 bytes
Interrupt: pin A routed to IRQ 34
NUMA node: 0
Bus: primary=03, secondary=04, subordinate=04, sec-latency=0
I/O behind bridge: 00006000-00006fff [size=4K]
Memory behind bridge: c4000000-c50fffff [size=17M]
Prefetchable memory behind bridge: 0000033fe0000000-0000033ff1ffffff [size=288M]
Secondary status: 66MHz- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;lt;SERR- &amp;lt;PERR-
BridgeCtl: Parity- SERR+ NoISA- VGA- VGA16+ MAbort- &amp;gt;Reset- FastB2B-
PriDiscTmr- SecDiscTmr- DiscTmrStat- DiscTmrSERREn-
Capabilities: [40] Power Management version 3
Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0+,D1-,D2-,D3hot+,D3cold+)
Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-
Capabilities: [48] MSI: Enable+ Count=1/8 Maskable+ 64bit+
Address: 00000000fee00000 Data: 40ef
Masking: 000000ff Pending: 00000000
Capabilities: [68] Express (v2) Downstream Port (Slot+), MSI 00
DevCap: MaxPayload 2048 bytes, PhantFunc 0
ExtTag- RBE+
DevCtl: CorrErr- NonFatalErr- FatalErr- UnsupReq-
RlxdOrd- ExtTag- PhantFunc- AuxPwr- NoSnoop+
MaxPayload 256 bytes, MaxReadReq 128 bytes
DevSta: CorrErr+ NonFatalErr- FatalErr- UnsupReq+ AuxPwr- TransPend-
LnkCap: Port #8, Speed 8GT/s, Width x16, ASPM L1, Exit Latency L1 &amp;lt;4us
ClockPM- Surprise+ LLActRep+ BwNot+ ASPMOptComp+
LnkCtl: ASPM L1 Enabled; Disabled- CommClk-
ExtSynch- ClockPM- AutWidDis- BWInt- AutBWInt-
LnkSta: Speed 8GT/s (ok), Width x16 (ok)
TrErr- Train- SlotClk- DLActive+ BWMgmt- ABWMgmt+
SltCap: AttnBtn- PwrCtrl- MRL- AttnInd- PwrInd- HotPlug- Surprise-
Slot #8, PowerLimit 25.000W; Interlock- NoCompl-
SltCtl: Enable: AttnBtn- PwrFlt- MRL- PresDet- CmdCplt- HPIrq- LinkChg-
Control: AttnInd Unknown, PwrInd Unknown, Power- Interlock-
SltSta: Status: AttnBtn- PowerFlt- MRL- CmdCplt- PresDet+ Interlock-
Changed: MRL- PresDet- LinkState-
DevCap2: Completion Timeout: Not Supported, TimeoutDis-, NROPrPrP-, LTR+
10BitTagComp-, 10BitTagReq-, OBFF Via message, ExtFmt-, EETLPPrefix-
EmergencyPowerReduction Not Supported, EmergencyPowerReductionInit-
FRS-, ARIFwd+
AtomicOpsCap: Routing+
DevCtl2: Completion Timeout: 50us to 50ms, TimeoutDis-, LTR-, OBFF Disabled ARIFwd-
AtomicOpsCtl: EgressBlck-
LnkCtl2: Target Link Speed: 8GT/s, EnterCompliance- SpeedDis-, Selectable De-emphasis: -6dB
Transmit Margin: Normal Operating Range, EnterModifiedCompliance- ComplianceSOS-
Compliance De-emphasis: -6dB
LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete+, EqualizationPhase1+
EqualizationPhase2+, EqualizationPhase3+, LinkEqualizationRequest-
Capabilities: [a4] Subsystem: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch
Capabilities: [100 v1] Vendor Specific Information: ID=0000 Rev=0 Len=000 &amp;lt;?&amp;gt;
Capabilities: [fb4 v1] Advanced Error Reporting
UESta: DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
UEMsk: DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
UESvrt: DLP+ SDES+ TLP- FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-
CESta: RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr-
CEMsk: RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+
AERCap: First Error Pointer: 1f, ECRCGenCap+ ECRCGenEn- ECRCChkCap+ ECRCChkEn-
MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-
HeaderLog: 00000000 00000000 00000000 00000000
Capabilities: [138 v1] Power Budgeting &amp;lt;?&amp;gt;
Capabilities: [10c v1] Secondary PCI Express
LnkCtl3: LnkEquIntrruptEn-, PerformEqu-
LaneErrStat: 0
Capabilities: [148 v1] Virtual Channel
Caps: LPEVC=0 RefClk=100ns PATEntryBits=8
Arb: Fixed- WRR32- WRR64- WRR128-
Ctrl: ArbSelect=Fixed
Status: InProgress-
VC0: Caps: PATOffset=03 MaxTimeSlots=1 RejSnoopTrans-
Arb: Fixed- WRR32- WRR64+ WRR128- TWRR128- WRR256-
Ctrl: Enable+ ID=0 ArbSelect=WRR64 TC/VC=01
Status: NegoPending- InProgress-
Port Arbitration Table &amp;lt;?&amp;gt;
Capabilities: [e00 v1] Multicast
McastCap: MaxGroups 64, ECRCRegen+
McastCtl: NumGroups 1, Enable-
McastBAR: IndexPos 0, BaseAddr 0000000000000000
McastReceiveVec: 0000000000000000
McastBlockAllVec: 0000000000000000
McastBlockUntransVec: 0000000000000000
McastOverlayBAR: OverlaySize 0 (disabled), BaseAddr 0000000000000000
Capabilities: [f24 v1] Access Control Services
ACSCap: SrcValid+ TransBlk+ ReqRedir+ CmpltRedir+ UpstreamFwd+ EgressCtrl+ DirectTrans+
ACSCtl: SrcValid- TransBlk- ReqRedir- CmpltRedir- UpstreamFwd- EgressCtrl- DirectTrans-
Capabilities: [b70 v1] Vendor Specific Information: ID=0001 Rev=0 Len=010 &amp;lt;?&amp;gt;
Kernel driver in use: pcieport
# lspci -vvv -s 04:00
04:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1) (prog-if 00 [VGA controller])
Subsystem: NVIDIA Corporation GP102 [TITAN X]
Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+
Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
Latency: 0
Interrupt: pin A routed to IRQ 103
NUMA node: 0
Region 0: Memory at c4000000 (32-bit, non-prefetchable) [size=16M]
Region 1: Memory at 33fe0000000 (64-bit, prefetchable) [size=256M]
Region 3: Memory at 33ff0000000 (64-bit, prefetchable) [size=32M]
Region 5: I/O ports at 6000 [size=128]
Expansion ROM at c5000000 [virtual] [disabled] [size=512K]
Capabilities: [60] Power Management version 3
Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0-,D1-,D2-,D3hot-,D3cold-)
Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-
Capabilities: [68] MSI: Enable+ Count=1/1 Maskable- 64bit+
Address: 00000000fee00000 Data: 4022
Capabilities: [78] Express (v2) Legacy Endpoint, MSI 00
DevCap: MaxPayload 256 bytes, PhantFunc 0, Latency L0s unlimited, L1 &amp;lt;64us
ExtTag+ AttnBtn- AttnInd- PwrInd- RBE+ FLReset-
DevCtl: CorrErr- NonFatalErr- FatalErr- UnsupReq-
RlxdOrd+ ExtTag+ PhantFunc- AuxPwr- NoSnoop+
MaxPayload 256 bytes, MaxReadReq 512 bytes
DevSta: CorrErr- NonFatalErr- FatalErr- UnsupReq- AuxPwr- TransPend-
LnkCap: Port #8, Speed 8GT/s, Width x16, ASPM L0s L1, Exit Latency L0s &amp;lt;1us, L1 &amp;lt;4us
ClockPM+ Surprise- LLActRep- BwNot- ASPMOptComp+
LnkCtl: ASPM Disabled; RCB 64 bytes Disabled- CommClk-
ExtSynch- ClockPM+ AutWidDis- BWInt- AutBWInt-
LnkSta: Speed 8GT/s (ok), Width x16 (ok)
TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-
DevCap2: Completion Timeout: Range AB, TimeoutDis+, NROPrPrP-, LTR-
10BitTagComp-, 10BitTagReq-, OBFF Via message, ExtFmt-, EETLPPrefix-
EmergencyPowerReduction Not Supported, EmergencyPowerReductionInit-
FRS-
AtomicOpsCap: 32bit- 64bit- 128bitCAS-
DevCtl2: Completion Timeout: 50us to 50ms, TimeoutDis-, LTR-, OBFF Disabled
AtomicOpsCtl: ReqEn-
LnkCtl2: Target Link Speed: 8GT/s, EnterCompliance- SpeedDis-
Transmit Margin: Normal Operating Range, EnterModifiedCompliance- ComplianceSOS-
Compliance De-emphasis: -6dB
LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete+, EqualizationPhase1+
EqualizationPhase2+, EqualizationPhase3+, LinkEqualizationRequest-
Capabilities: [100 v1] Virtual Channel
Caps: LPEVC=0 RefClk=100ns PATEntryBits=1
Arb: Fixed- WRR32- WRR64- WRR128-
Ctrl: ArbSelect=Fixed
Status: InProgress-
VC0: Caps: PATOffset=00 MaxTimeSlots=1 RejSnoopTrans-
Arb: Fixed- WRR32- WRR64- WRR128- TWRR128- WRR256-
Ctrl: Enable+ ID=0 ArbSelect=Fixed TC/VC=01
Status: NegoPending- InProgress-
Capabilities: [128 v1] Power Budgeting &amp;lt;?&amp;gt;
Capabilities: [420 v2] Advanced Error Reporting
UESta: DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
UEMsk: DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
UESvrt: DLP+ SDES+ TLP- FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-
CESta: RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr-
CEMsk: RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+
AERCap: First Error Pointer: 00, ECRCGenCap- ECRCGenEn- ECRCChkCap- ECRCChkEn-
MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-
HeaderLog: 00000000 00000000 00000000 00000000
Capabilities: [600 v1] Vendor Specific Information: ID=0001 Rev=1 Len=024 &amp;lt;?&amp;gt;
Capabilities: [900 v1] Secondary PCI Express
LnkCtl3: LnkEquIntrruptEn-, PerformEqu-
LaneErrStat: 0
Kernel driver in use: nvidia
Kernel modules: nvidiafb, nouveau, nvidia_drm, nvidia
04:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)
Subsystem: NVIDIA Corporation GP102 HDMI Audio Controller
Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx-
Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
Latency: 0, Cache Line Size: 32 bytes
Interrupt: pin B routed to IRQ 101
NUMA node: 0
Region 0: Memory at c5080000 (32-bit, non-prefetchable) [size=16K]
Capabilities: [60] Power Management version 3
Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0-,D1-,D2-,D3hot-,D3cold-)
Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-
Capabilities: [68] MSI: Enable- Count=1/1 Maskable- 64bit+
Address: 0000000000000000 Data: 0000
Capabilities: [78] Express (v2) Endpoint, MSI 00
DevCap: MaxPayload 256 bytes, PhantFunc 0, Latency L0s unlimited, L1 &amp;lt;64us
ExtTag+ AttnBtn- AttnInd- PwrInd- RBE+ FLReset- SlotPowerLimit 25.000W
DevCtl: CorrErr- NonFatalErr- FatalErr- UnsupReq-
RlxdOrd- ExtTag+ PhantFunc- AuxPwr- NoSnoop+
MaxPayload 256 bytes, MaxReadReq 512 bytes
DevSta: CorrErr+ NonFatalErr- FatalErr- UnsupReq+ AuxPwr- TransPend-
LnkCap: Port #8, Speed 8GT/s, Width x16, ASPM L0s L1, Exit Latency L0s &amp;lt;1us, L1 &amp;lt;4us
ClockPM+ Surprise- LLActRep- BwNot- ASPMOptComp+
LnkCtl: ASPM L0s L1 Enabled; RCB 64 bytes Disabled- CommClk-
ExtSynch- ClockPM+ AutWidDis- BWInt- AutBWInt-
LnkSta: Speed 8GT/s (ok), Width x16 (ok)
TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-
DevCap2: Completion Timeout: Range AB, TimeoutDis+, NROPrPrP-, LTR-
10BitTagComp-, 10BitTagReq-, OBFF Via message, ExtFmt-, EETLPPrefix-
EmergencyPowerReduction Not Supported, EmergencyPowerReductionInit-
FRS-, TPHComp-, ExtTPHComp-
AtomicOpsCap: 32bit- 64bit- 128bitCAS-
DevCtl2: Completion Timeout: 50us to 50ms, TimeoutDis-, LTR-, OBFF Disabled
AtomicOpsCtl: ReqEn-
LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete-, EqualizationPhase1-
EqualizationPhase2-, EqualizationPhase3-, LinkEqualizationRequest-
Capabilities: [100 v2] Advanced Error Reporting
UESta: DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
UEMsk: DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-
UESvrt: DLP+ SDES+ TLP- FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-
CESta: RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr-
CEMsk: RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+
AERCap: First Error Pointer: 00, ECRCGenCap- ECRCGenEn- ECRCChkCap- ECRCChkEn-
MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-
HeaderLog: 00000000 00000000 00000000 00000000
Kernel driver in use: snd_hda_intel
Kernel modules: snd_hda_intel&lt;/code>&lt;/pre>
&lt;p>输出有点多，我们先看一层一层来看，第一层的输出：&lt;/p>
&lt;pre class="console">&lt;code>03:08.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca) (prog-if 00 [Normal decode])
Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+
Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
Latency: 0, Cache Line Size: 32 bytes
Interrupt: pin A routed to IRQ 34
NUMA node: 0
Bus: primary=03, secondary=04, subordinate=04, sec-latency=0
I/O behind bridge: 00006000-00006fff [size=4K]
Memory behind bridge: c4000000-c50fffff [size=17M]
Prefetchable memory behind bridge: 0000033fe0000000-0000033ff1ffffff [size=288M]
Secondary status: 66MHz- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;lt;SERR- &amp;lt;PERR-
BridgeCtl: Parity- SERR+ NoISA- VGA- VGA16+ MAbort- &amp;gt;Reset- FastB2B-
Capabilities: [40] Power Management version 3
Capabilities: [48] MSI: Enable+ Count=1/8 Maskable+ 64bit+
Capabilities: [68] Express (v2) Downstream Port (Slot+), MSI 00
Capabilities: [a4] Subsystem: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch
Capabilities: [100 v1] Vendor Specific Information: ID=0000 Rev=0 Len=000 &amp;lt;?&amp;gt;
Capabilities: [fb4 v1] Advanced Error Reporting
Capabilities: [138 v1] Power Budgeting &amp;lt;?&amp;gt;
Capabilities: [10c v1] Secondary PCI Express
Capabilities: [148 v1] Virtual Channel
Capabilities: [e00 v1] Multicast
Capabilities: [f24 v1] Access Control Services
Capabilities: [b70 v1] Vendor Specific Information: ID=0001 Rev=0 Len=010 &amp;lt;?&amp;gt;
Kernel driver in use: pcieport
# lspci -vvv -s 04:00
04:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1) (prog-if 00 [VGA controller])
Subsystem: NVIDIA Corporation GP102 [TITAN X]
Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+
Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
Latency: 0
Interrupt: pin A routed to IRQ 103
NUMA node: 0
Region 0: Memory at c4000000 (32-bit, non-prefetchable) [size=16M]
Region 1: Memory at 33fe0000000 (64-bit, prefetchable) [size=256M]
Region 3: Memory at 33ff0000000 (64-bit, prefetchable) [size=32M]
Region 5: I/O ports at 6000 [size=128]
Expansion ROM at c5000000 [virtual] [disabled] [size=512K]
Capabilities: [60] Power Management version 3
Capabilities: [68] MSI: Enable+ Count=1/1 Maskable- 64bit+
Capabilities: [78] Express (v2) Legacy Endpoint, MSI 00
Capabilities: [100 v1] Virtual Channel
Capabilities: [128 v1] Power Budgeting &amp;lt;?&amp;gt;
Capabilities: [420 v2] Advanced Error Reporting
Capabilities: [600 v1] Vendor Specific Information: ID=0001 Rev=1 Len=024 &amp;lt;?&amp;gt;
Capabilities: [900 v1] Secondary PCI Express
Kernel driver in use: nvidia
Kernel modules: nvidiafb, nouveau, nvidia_drm, nvidia
04:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)
Subsystem: NVIDIA Corporation GP102 HDMI Audio Controller
Control: I/O- Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx-
Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast &amp;gt;TAbort- &amp;lt;TAbort- &amp;lt;MAbort- &amp;gt;SERR- &amp;lt;PERR- INTx-
Latency: 0, Cache Line Size: 32 bytes
Interrupt: pin B routed to IRQ 101
NUMA node: 0
Region 0: Memory at c5080000 (32-bit, non-prefetchable) [size=16K]
Capabilities: [60] Power Management version 3
Capabilities: [68] MSI: Enable- Count=1/1 Maskable- 64bit+
Capabilities: [78] Express (v2) Endpoint, MSI 00
Capabilities: [100 v2] Advanced Error Reporting
Kernel driver in use: snd_hda_intel
Kernel modules: snd_hda_intel&lt;/code>&lt;/pre>
&lt;p>目前我看得懂的，或者说我常用的属性是以下几个：&lt;/p>
&lt;p>&lt;code>Subsystem&lt;/code>：属于什么子系统 &lt;code>Status&lt;/code>：状态，是否有错 &lt;code>Interrupt&lt;/code>：中断信息 &lt;code>Region&lt;/code>: 内存映射 &lt;code>Capabilities&lt;/code>：能力，包括 MSI，Express &lt;code>Kernel driver in use&lt;/code>：正在使用的驱动 &lt;code>Kernel modules&lt;/code>：可用的驱动&lt;/p>
&lt;p>其中最有用的 Capabilities，&lt;code>lspci&lt;/code> 毕竟是列出 PCI 设备，那我们如何确定设备是 PCIe 设备呢？看 Capabilities 中是否有 Express，这个 PCI 设备有 Express 的能力，也就是说它是 PCIe 设备。那么我们要查看的速率和版本也在这个属性下面。&lt;/p>
&lt;h4 id="获取-pcie-设备的版本和传输通道数">获取 PCIe 设备的版本和传输通道数&lt;/h4>
&lt;p>我们在 &lt;code>Capabilities: Express (v2) Endpoint, MSI 00&lt;/code> 属性下面可以找两个属性：&lt;code>LnkCap&lt;/code> 和 &lt;code>LnkSta&lt;/code>，前者表示该设备支持的能力（Link Capability），后者是这个设备的连接状态（Link State)。我们可以从 &lt;code>LnkCap&lt;/code> 属性上看到下面这两个设备的“单个传输通道数”的速率都是 8GT/s，传输通道数是 &lt;code>x16&lt;/code>，也就是说这两个设备是 &lt;code>PCIe 3.0 x16&lt;/code> 的。&lt;/p>
&lt;pre>&lt;code># tree view(partial)
-[0000:00]-+-02.0-[02-05]----00.0-[03-05]--+-08.0-[04]--+-00.0 NVIDIA Corporation GP102 [TITAN X]
\-00.1 NVIDIA Corporation GP102 HDMI Audio Controller
# verbose output(partial)
03:08.0 PCI bridge: PLX Technology, Inc. PEX 8747 48-Lane, 5-Port PCI Express Gen 3 (8.0 GT/s) Switch (rev ca) (prog-if 00 [Normal decode])
Capabilities: [68] Express (v2) Downstream Port (Slot+), MSI 00
LnkCap: Port #8, Speed 8GT/s, Width x16, ASPM L1, Exit Latency L1 &amp;lt;4us
ClockPM- Surprise+ LLActRep+ BwNot+ ASPMOptComp+
LnkSta: Speed 8GT/s (ok), Width x16 (ok)
TrErr- Train- SlotClk- DLActive+ BWMgmt- ABWMgmt+
04:00.0 VGA compatible controller: NVIDIA Corporation GP102 [TITAN X] (rev a1) (prog-if 00 [VGA controller])
Subsystem: NVIDIA Corporation GP102 [TITAN X]
Capabilities: [78] Express (v2) Legacy Endpoint, MSI 00
LnkCap: Port #8, Speed 8GT/s, Width x16, ASPM L0s L1, Exit Latency L0s &amp;lt;1us, L1 &amp;lt;4us
ClockPM+ Surprise- LLActRep- BwNot- ASPMOptComp+
LnkSta: Speed 8GT/s (ok), Width x16 (ok)
TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-
04:00.1 Audio device: NVIDIA Corporation GP102 HDMI Audio Controller (rev a1)
Subsystem: NVIDIA Corporation GP102 HDMI Audio Controller
Capabilities: [78] Express (v2) Endpoint, MSI 00
LnkCap: Port #8, Speed 8GT/s, Width x16, ASPM L0s L1, Exit Latency L0s &amp;lt;1us, L1 &amp;lt;4us
ClockPM+ Surprise- LLActRep- BwNot- ASPMOptComp+
LnkSta: Speed 8GT/s (ok), Width x16 (ok)
TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>Tips：
&lt;ul>
&lt;li>我猜测，一个设备的两个功能对应的版本和传输通道数是一样的。（可能插槽会有区别？我不是很确定，或者说，我们需要明确的是 function 是什么东西，TODO）&lt;/li>
&lt;li>还有一些是 PCIe 设备 training（类似自协商）时会用的属性，例如 &lt;code>LnkCtl2&lt;/code>, &lt;code>LnkSta2&lt;/code>。&lt;/li>
&lt;li>这些属性本质其实是 PCIe 配置空间内，寄存器的值。&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;p>由于插槽和设备的能力不匹配，实际的连接状态 &lt;code>LnkSta&lt;/code> 和设备的能力 &lt;code>LnkCap&lt;/code> 会不一样。我们可以在 &lt;code>LnkSta&lt;/code> 中查看当前连接状态，可以看到上面这台设备 &lt;code>LnkSta&lt;/code> 中的 Speed 和 Width 和 &lt;code>LnkCap&lt;/code> 中的一样，因此，速率是匹配的，设备的性能可以得到完全发挥，&lt;code>lspci&lt;/code> 也很贴心地标注了两个 &lt;code>ok&lt;/code>。但是下面这台设备，速率就不匹配了我们可以看到固态硬盘（&lt;code>03:00&lt;/code>）设备支持的速率是 &lt;code>8GT/s x4&lt;/code>（&lt;code>PCIe 3.0 x4&lt;/code>），而插槽（&lt;code>00:1d.0&lt;/code>）支持的速率是 &lt;code>8GT/s x2&lt;/code>（&lt;code>PCIe 3.0 x2&lt;/code>），因此，固态硬盘的性能得不到完全的发挥。同时，我们可以看到设备的 &lt;code>LnkSta&lt;/code> 下对应有问题的属性边上标注了 &lt;code>downgraded&lt;/code>。&lt;/p>
&lt;pre>&lt;code># tree view(partial)
-[0000:00]-+-1d.0-[03]----00.0 Silicon Motion, Inc. SM2262/SM2262EN SSD Controller
# verbose output(partial)
00:1d.0 PCI bridge: Intel Corporation Sunrise Point-LP PCI Express Root Port #9 (rev f1) (prog-if 00 [Normal decode])
Subsystem: Lenovo Device 505b
Capabilities: [40] Express (v2) Root Port (Slot+), IntMsgNum 0
LnkCap: Port #9, Speed 8GT/s, Width x2, ASPM L1, Exit Latency L1 &amp;lt;16us
ClockPM- Surprise- LLActRep+ BwNot+ ASPMOptComp+
LnkSta: Speed 8GT/s, Width x2
TrErr- Train- SlotClk+ DLActive+ BWMgmt+ ABWMgmt-
Kernel driver in use: pcieport
03:00.0 Non-Volatile memory controller: Silicon Motion, Inc. SM2262/SM2262EN SSD Controller (rev 03) (prog-if 02 [NVM Express])
Subsystem: Silicon Motion, Inc. SM2262/SM2262EN SSD Controller
Capabilities: [70] Express (v2) Endpoint, IntMsgNum 0
LnkCap: Port #0, Speed 8GT/s, Width x4, ASPM L1, Exit Latency L1 &amp;lt;8us
ClockPM+ Surprise- LLActRep- BwNot- ASPMOptComp+
LnkSta: Speed 8GT/s, Width x2 (downgraded)
TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-&lt;/code>&lt;/pre>
&lt;p>至此，我们已经介绍了 PCIe 的基础知识以及如何使用 &lt;code>lspci&lt;/code> 查询 PCIe 设备的属性，快去看看你的 Linux 下的 PCIe 系统吧，看看有什么可以改进和升级的。&lt;/p></description></item><item><title>RK and Jetson SDK full work on ArchLinux</title><link>https://bensyz.github.io/blog/blogs/rk_jetson_sdk_full_work_on_archlinux/</link><pubDate>Mon, 15 Jan 2024 06:47:39 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/rk_jetson_sdk_full_work_on_archlinux/</guid><description>&lt;h2 id="tldr">tl;dr&lt;/h2>
&lt;p>遇到的几个问题，和解决措施：&lt;/p>
&lt;table>
&lt;colgroup>
&lt;col style="width: 6%" />
&lt;col style="width: 25%" />
&lt;col style="width: 68%" />
&lt;/colgroup>
&lt;thead>
&lt;tr class="header">
&lt;th>Platform&lt;/th>
&lt;th>Problem&lt;/th>
&lt;th>Solution&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>RK&lt;/td>
&lt;td>&lt;code>mknod failed&lt;/code>&lt;/td>
&lt;td>remount docker volume with &lt;code>nodev,noexec&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;del>Jetson&lt;/del>&lt;/td>
&lt;td>&lt;del>&lt;code>showmount -e&lt;/code> oom&lt;/del>&lt;/td>
&lt;td>&lt;del>ulimit docker option add &lt;code>--ulimit nofile=1024:524288&lt;/code>&lt;/del>&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>RK Jetson&lt;/td>
&lt;td>RK Maskrom and jetson burn failed&lt;/td>
&lt;td>disable usbcore autosuspend, &lt;code>echo -1 &amp;gt; /sys/module/usbcore/parameters/autosuspend&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>Jetson&lt;/td>
&lt;td>&lt;code>Error: ipv6: address already assigned.&lt;/code>&lt;/td>
&lt;td>no &lt;code>ping6&lt;/code> command, add a ping6 in PATH&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>&lt;del>Jetson&lt;/del>&lt;/td>
&lt;td>&lt;del>&lt;code>mount.nfs: Connection timed out&lt;/code>&lt;/del>&lt;/td>
&lt;td>&lt;del>systemctl restart nfs-server&lt;/del> 看起来是我错误地添加 sudo 导致的，后面没再复现。&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>Jetson&lt;/td>
&lt;td>&lt;code>failed to flash&lt;/code> (something like this)&lt;/td>
&lt;td>arch ssh does not support &lt;code>dsa&lt;/code>, &lt;code>tools/ota_tools/version_upgrade/ota_make_recovery_img_dtb.sh&lt;/code> 118 行附近，去除 dsa sshd key 的生成&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>RK&lt;/td>
&lt;td>uboot make menuconfig failed&lt;/td>
&lt;td>add &lt;code>cc -&amp;gt; gcc-7&lt;/code> to PATH&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>RK&lt;/td>
&lt;td>native &lt;code>cp2102&lt;/code> driver does not support 1500000&lt;/td>
&lt;td>Use &lt;a href="https://aur.archlinux.org/packages/cp210x-overclock-dkms">AUR cp210x-overclock-dkms&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>由于 docker 中 nfs 有问题（包括 service restart nfs），所以目前我没有使用 docker&lt;/li>
&lt;/ul>
&lt;p>其他一些 Ubuntu 和 Arch 兼容性的问题：&lt;/p>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="co"># Linux_for_Tegra/tools/kernel_flash/l4t_network_flash.func&lt;/span>&lt;/span>
&lt;span id="cb1-2">&lt;a href="#cb1-2" aria-hidden="true">&lt;/a>&lt;span class="fu">enable_nfs_for_folder ()&lt;/span>&lt;/span>
&lt;span id="cb1-3">&lt;a href="#cb1-3" aria-hidden="true">&lt;/a>&lt;span class="kw">{&lt;/span>&lt;/span>
&lt;span id="cb1-4">&lt;a href="#cb1-4" aria-hidden="true">&lt;/a> &lt;span class="ex">...&lt;/span>&lt;/span>
&lt;span id="cb1-5">&lt;a href="#cb1-5" aria-hidden="true">&lt;/a> &lt;span class="co">#chown root.root &amp;quot;${nfs_dir}&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb1-6">&lt;a href="#cb1-6" aria-hidden="true">&lt;/a> &lt;span class="fu">chown&lt;/span> root:root &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">${nfs_dir}&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb1-7">&lt;a href="#cb1-7" aria-hidden="true">&lt;/a> &lt;span class="ex">...&lt;/span>&lt;/span>
&lt;span id="cb1-8">&lt;a href="#cb1-8" aria-hidden="true">&lt;/a>&lt;span class="kw">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb2">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb2-1">&lt;a href="#cb2-1" aria-hidden="true">&lt;/a>&lt;span class="co"># Linux_for_Tegra/tools/kernel_flash/l4t_network_flash.func&lt;/span>&lt;/span>
&lt;span id="cb2-2">&lt;a href="#cb2-2" aria-hidden="true">&lt;/a>&lt;span class="fu">network_prerequisite ()&lt;/span>&lt;/span>
&lt;span id="cb2-3">&lt;a href="#cb2-3" aria-hidden="true">&lt;/a>&lt;span class="kw">{&lt;/span>&lt;/span>
&lt;span id="cb2-4">&lt;a href="#cb2-4" aria-hidden="true">&lt;/a> &lt;span class="ex">...&lt;/span>&lt;/span>
&lt;span id="cb2-5">&lt;a href="#cb2-5" aria-hidden="true">&lt;/a> &lt;span class="co">#service nfs-kernel-server restart&lt;/span>&lt;/span>
&lt;span id="cb2-6">&lt;a href="#cb2-6" aria-hidden="true">&lt;/a> &lt;span class="ex">systemctl&lt;/span> restart nfs-server&lt;/span>
&lt;span id="cb2-7">&lt;a href="#cb2-7" aria-hidden="true">&lt;/a> &lt;span class="ex">...&lt;/span>&lt;/span>
&lt;span id="cb2-8">&lt;a href="#cb2-8" aria-hidden="true">&lt;/a>&lt;span class="kw">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>因为我们用 RK 的板子，然后我在使用 Arch 时遇到一个问题，在板子是 &lt;code>Maskrom&lt;/code> 状态的时候，我用 RK 提供的 &lt;code>upgrade_tool&lt;/code> 不能烧录，会报段错误，提给 redmine 后，修复了段错误的问题，但是还是不能烧录，这个时候报下面的错误：&lt;/p>
&lt;pre class="log">&lt;code>14:40:29 Upgrade Tool v2.26
14:40:29 Current process in /home/ben/Downloads/upgrade_tool_v2.26_for_linux
14:40:29 Using /home/ben/Downloads/upgrade_tool_v2.26_for_linux/config.ini
14:40:29 Command Line: ./upgrade_tool uf /home/ben/nfs/ubuntu_local/benWork/images/RK/RK3588_20230907-1/rockdev/update.img
14:40:29 Current Device Location ID:13
14:41:12 Error:InitializeUsb--&amp;gt;open device failed,err=-1,device=0x11d19f0
14:41:12 Error:upgrade_firmware-&amp;gt;Fail to create comm object!&lt;/code>&lt;/pre>
&lt;p>反馈给 RK 无果后，此事搁置了。最近又在用 nvidia jetson 的板子，Nvidia 提供了烧录的 &lt;a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/jetson-linux-flash-x86">docker&lt;/a>(Arch 上 docker 有点问题，&lt;code>showmount -e&lt;/code> 会 oom，要做 ulimit 限制 nofile) 又是不能烧录， &lt;code>flash.sh&lt;/code> 报的错如下&lt;/p>
&lt;pre class="log">&lt;code>...
[ 0.2263 ] tegrarcm_v2 --new_session --chip 0x23 0 --uid --download bct_br br_bct_BR.bct --download mb1 mb1_t234_prod_aligned_sigheader.bin.encrypt --download psc_bl1 psc_bl1_t234_prod_aligned_sigheader.bin.encrypt --download bct_mb1 mb1_bct_MB1_sigheader.bct.encrypt
[ 0.2275 ] BR_CID: 0x80012344705DE7C8200000000EFD80C0
[ 0.2351 ] Sending bct_br
[ 0.2351 ] ERROR: might be timeout in USB write.
Error: Return value 3
Command tegrarcm_v2 --new_session --chip 0x23 0 --uid --download bct_br br_bct_BR.bct --download mb1 mb1_t234_prod_aligned_sigheader.bin.encrypt --download psc_bl1 psc_bl1_t234_prod_aligned_sigheader.bin.encrypt --download bct_mb1 mb1_bct_MB1_sigheader.bct.encrypt
Reading board information failed.
Error: failed to generate images
Cleaning up...
Keeping working dir at /l4t/Linux_for_Tegra/temp_initrdflash/bootloader0 and /tmp/tmp.9slBpS2jmL&lt;/code>&lt;/pre>
&lt;p>嘿，RK 的无果，Nvidia 的可以看看，当然我这个时候没有意识到两者有关联性，最后看到了这条 &lt;a href="https://forums.developer.nvidia.com/t/cannot-flash-jetson-agx-orin-jetpack-5-1-1/253705/15">post&lt;/a>，说禁用 usbcore 的 autosuspend。&lt;code>echo -1 &amp;gt; /sys/module/usbcore/parameters/autosuspend&lt;/code>，然后真的，重新启动 jetson 的板子后，就能烧录了，太牛了。这个时候突然回想起来，usbcore 的 autosuspend？那 RK 的是不是也可以了，马上一试，果然，Maskrom 也能烧录了。爽啊，从此，我 Arch 的一条腿被接上来呃，原来说残次品是因为，RK 的首选支持是 Windows ，Jetson 的首选支持是 Ubuntu，但是我哪个都没用，就很尴尬。&lt;/p>
&lt;h2 id="work-space-creation">work space creation&lt;/h2>
&lt;h3 id="rk">RK&lt;/h3>
&lt;p>参考 《Rockchip_Developer_Guide_Linux_Docker_Deploy_CN.pdf》&lt;/p>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode dockerfile">&lt;code class="sourceCode dockerfile">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="kw">FROM&lt;/span> ubuntu:22.04&lt;/span>
&lt;span id="cb5-2">&lt;a href="#cb5-2" aria-hidden="true">&lt;/a>&lt;span class="kw">ENV&lt;/span> DEBIAN_FRONTEND=noninteractive&lt;/span>
&lt;span id="cb5-3">&lt;a href="#cb5-3" aria-hidden="true">&lt;/a>&lt;span class="kw">RUN&lt;/span> \&lt;/span>
&lt;span id="cb5-4">&lt;a href="#cb5-4" aria-hidden="true">&lt;/a>sed -i &lt;span class="st">&amp;#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/&amp;#39;&lt;/span> /etc/apt/sources.list \&lt;/span>
&lt;span id="cb5-5">&lt;a href="#cb5-5" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; apt-get update -y &amp;amp;&amp;amp; apt-get upgrade -y \&lt;/span>
&lt;span id="cb5-6">&lt;a href="#cb5-6" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; apt-get install -y curl repo \&lt;/span>
&lt;span id="cb5-7">&lt;a href="#cb5-7" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; apt-get install -y bc binfmt-support bison bsdmainutils build-essential bzip2 chrpath cmake cpio cpp-aarch64-linux-gnu \&lt;/span>
&lt;span id="cb5-8">&lt;a href="#cb5-8" aria-hidden="true">&lt;/a>debianutils device-tree-compiler diffstat expat expect fakeroot fdisk file flex g++ gawk gcc gcc-multilib git git-core \&lt;/span>
&lt;span id="cb5-9">&lt;a href="#cb5-9" aria-hidden="true">&lt;/a>g++-multilib gpgv2 iputils-ping libegl1-mesa libelf-dev libgmp-dev libgucharmap-2-90-dev liblz4-tool libmpc-dev \&lt;/span>
&lt;span id="cb5-10">&lt;a href="#cb5-10" aria-hidden="true">&lt;/a>libsdl1.2-dev libssl-dev live-build make ncurses-dev net-tools patchelf python2 python3 python-is-python3 python3-git \&lt;/span>
&lt;span id="cb5-11">&lt;a href="#cb5-11" aria-hidden="true">&lt;/a>python3-jinja2 python3-pexpect python3-pip qemu-user-static rsync socat ssh strace sudo texinfo time tree unzip vim \&lt;/span>
&lt;span id="cb5-12">&lt;a href="#cb5-12" aria-hidden="true">&lt;/a>wget xterm xz-utils zstd \&lt;/span>
&lt;span id="cb5-13">&lt;a href="#cb5-13" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; useradd -c &lt;span class="st">&amp;#39;ben user&amp;#39;&lt;/span> -m -d /home/kenxes -s /bin/bash ben &amp;amp;&amp;amp; sed -i -e &lt;span class="st">&amp;#39;/\%sudo/ c \%sudo ALL=(ALL) NOPASSWD: ALL&amp;#39;&lt;/span> /etc/sudoers &amp;amp;&amp;amp; usermod -a -G sudo ben \&lt;/span>
&lt;span id="cb5-14">&lt;a href="#cb5-14" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; mkdir /home/ben/ \&lt;/span>
&lt;span id="cb5-15">&lt;a href="#cb5-15" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; su ben -c &lt;span class="st">&amp;#39;pip3 install pyelftools -i http://pypi.mirrors.ustc.edu.cn/simple/ --trusted-host pypi.mirrors.ustc.edu.cn&amp;#39;&lt;/span> \&lt;/span>
&lt;span id="cb5-16">&lt;a href="#cb5-16" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; echo &lt;span class="st">&amp;quot;docker image build complete&amp;quot;&lt;/span> \&lt;/span>
&lt;span id="cb5-17">&lt;a href="#cb5-17" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; echo &lt;span class="st">&amp;quot;set timezone&amp;quot;&lt;/span> \&lt;/span>
&lt;span id="cb5-18">&lt;a href="#cb5-18" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \&lt;/span>
&lt;span id="cb5-19">&lt;a href="#cb5-19" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; echo Asia/Shanghai &amp;gt; /etc/timezone \&lt;/span>
&lt;span id="cb5-20">&lt;a href="#cb5-20" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; echo &lt;span class="st">&amp;quot;extra dependencies for buildroot&amp;quot;&lt;/span> \&lt;/span>
&lt;span id="cb5-21">&lt;a href="#cb5-21" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; git clone https://salsa.debian.org/live-team/live-build.git --depth 1 -b debian/1%20230131 \&lt;/span>
&lt;span id="cb5-22">&lt;a href="#cb5-22" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; rm -rf live-build/manpages/po/* \&lt;/span>
&lt;span id="cb5-23">&lt;a href="#cb5-23" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; make install -j8 -C live-build \&lt;/span>
&lt;span id="cb5-24">&lt;a href="#cb5-24" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; rm -rf live-build \&lt;/span>
&lt;span id="cb5-25">&lt;a href="#cb5-25" aria-hidden="true">&lt;/a>&amp;amp;&amp;amp; apt-get -y autoclean &amp;amp;&amp;amp; apt-get -y autoremove &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h4 id="use-the-container">use the container&lt;/h4>
&lt;div class="sourceCode" id="cb6">&lt;pre class="sourceCode zsh">&lt;code class="sourceCode zsh">&lt;span id="cb6-1">&lt;a href="#cb6-1" aria-hidden="true">&lt;/a>&lt;span class="fu">make_docker_rockchip_run()&lt;/span>&lt;span class="kw">{&lt;/span>&lt;/span>
&lt;span id="cb6-2">&lt;a href="#cb6-2" aria-hidden="true">&lt;/a> &lt;span class="kw">if [&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="ot">$1&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="ot">=&lt;/span> &lt;span class="st">&amp;quot;RK3588&amp;quot;&lt;/span>&lt;span class="kw"> ]&lt;/span> &lt;span class="kw">|| [&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="ot">$1&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="ot">=&lt;/span> &lt;span class="st">&amp;quot;RK3399&amp;quot;&lt;/span>&lt;span class="kw"> ]&lt;/span>;&lt;span class="kw">then&lt;/span>&lt;/span>
&lt;span id="cb6-3">&lt;a href="#cb6-3" aria-hidden="true">&lt;/a> &lt;span class="ot">platform=&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="ot">$1&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb6-4">&lt;a href="#cb6-4" aria-hidden="true">&lt;/a> &lt;span class="kw">else&lt;/span>&lt;/span>
&lt;span id="cb6-5">&lt;a href="#cb6-5" aria-hidden="true">&lt;/a> &lt;span class="ot">platform=&lt;/span>&lt;span class="st">&amp;quot;RK3588&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb6-6">&lt;a href="#cb6-6" aria-hidden="true">&lt;/a> &lt;span class="kw">echo&lt;/span> &lt;span class="st">&amp;quot;use default platform &lt;/span>&lt;span class="ot">$platform&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="kw">&amp;gt;&amp;amp;2&lt;/span>&lt;/span>
&lt;span id="cb6-7">&lt;a href="#cb6-7" aria-hidden="true">&lt;/a> &lt;span class="kw">fi&lt;/span>&lt;/span>
&lt;span id="cb6-8">&lt;a href="#cb6-8" aria-hidden="true">&lt;/a> &lt;span class="ot">proxy_server=&lt;/span>&lt;span class="st">&amp;quot;172.17.0.1:8119&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb6-9">&lt;a href="#cb6-9" aria-hidden="true">&lt;/a> &lt;span class="ot">env_all=(&lt;/span>&lt;span class="st">&amp;quot;USER=ben&amp;quot;&lt;/span> &lt;span class="st">&amp;quot;http_proxy=http://&lt;/span>&lt;span class="ot">$proxy_server&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="st">&amp;quot;https_proxy=http://&lt;/span>&lt;span class="ot">$proxy_server&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="ot">)&lt;/span>&lt;/span>
&lt;span id="cb6-10">&lt;a href="#cb6-10" aria-hidden="true">&lt;/a> docker run --rm --privileged -it -u ben &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb6-11">&lt;a href="#cb6-11" aria-hidden="true">&lt;/a> --ulimit &lt;span class="ot">nofile=&lt;/span>1024:524288 &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb6-12">&lt;a href="#cb6-12" aria-hidden="true">&lt;/a> -v &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="ot">$PWD&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>:/&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="ot">$platform&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>/ &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb6-13">&lt;a href="#cb6-13" aria-hidden="true">&lt;/a> rockchip_build &lt;span class="kw">\&lt;/span>&lt;/span>
&lt;span id="cb6-14">&lt;a href="#cb6-14" aria-hidden="true">&lt;/a> &lt;span class="kw">env&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="ot">${env_all[@]}&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> /bin/bash -c &lt;span class="st">&amp;quot;cd &lt;/span>&lt;span class="ot">$platform&lt;/span>&lt;span class="st">; \&lt;/span>&lt;/span>
&lt;span id="cb6-15">&lt;a href="#cb6-15" aria-hidden="true">&lt;/a>&lt;span class="st"> bash ./remount.sh; \&lt;/span>&lt;/span>
&lt;span id="cb6-16">&lt;a href="#cb6-16" aria-hidden="true">&lt;/a>&lt;span class="st"> exec /bin/bash&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb6-17">&lt;a href="#cb6-17" aria-hidden="true">&lt;/a>&lt;span class="kw">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb7">&lt;pre class="sourceCode bash">&lt;code class="sourceCode bash">&lt;span id="cb7-1">&lt;a href="#cb7-1" aria-hidden="true">&lt;/a>&lt;span class="co">#!/bin/bash&lt;/span>&lt;/span>
&lt;span id="cb7-2">&lt;a href="#cb7-2" aria-hidden="true">&lt;/a>&lt;span class="co"># remount.sh&lt;/span>&lt;/span>
&lt;span id="cb7-3">&lt;a href="#cb7-3" aria-hidden="true">&lt;/a>&lt;span class="bu">read&lt;/span> -r &lt;span class="va">dev&lt;/span> &lt;span class="va">mount_point&lt;/span> &lt;span class="va">mount_options&lt;/span> &lt;span class="op">&amp;lt;&lt;/span> &lt;span class="op">&amp;lt;(&lt;/span>&lt;span class="fu">mount&lt;/span> -l &lt;span class="kw">|&lt;/span> &lt;span class="fu">grep&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$PWD&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="kw">|&lt;/span> &lt;span class="fu">sed&lt;/span> -n &lt;span class="st">&amp;#39;s/\(.*\) on \(.*\) type .* (\(.*\))/\1 \2 \3/p&amp;#39;&lt;/span> &lt;span class="op">)&lt;/span>&lt;/span>
&lt;span id="cb7-4">&lt;a href="#cb7-4" aria-hidden="true">&lt;/a>&lt;span class="va">mount_options=&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">${mount_options/&lt;/span>nodev,&lt;span class="va">/}&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-5">&lt;a href="#cb7-5" aria-hidden="true">&lt;/a>&lt;span class="va">mount_options=&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">${mount_options/&lt;/span>noexec,&lt;span class="va">/}&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-6">&lt;a href="#cb7-6" aria-hidden="true">&lt;/a>&lt;span class="va">mount_options=&lt;/span>&lt;span class="st">&amp;quot;remount,&amp;quot;&amp;quot;&lt;/span>&lt;span class="va">$mount_options&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-7">&lt;a href="#cb7-7" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb7-8">&lt;a href="#cb7-8" aria-hidden="true">&lt;/a>&lt;span class="fu">mount&lt;/span> -l &lt;span class="kw">|&lt;/span> &lt;span class="fu">grep&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$PWD&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-9">&lt;a href="#cb7-9" aria-hidden="true">&lt;/a>&lt;span class="bu">echo&lt;/span> &lt;span class="st">&amp;quot;mount &lt;/span>&lt;span class="va">$dev&lt;/span>&lt;span class="st"> &lt;/span>&lt;span class="va">$mount_point&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> -o &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$mount_options&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-10">&lt;a href="#cb7-10" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb7-11">&lt;a href="#cb7-11" aria-hidden="true">&lt;/a>&lt;span class="bu">echo&lt;/span> -n &lt;span class="st">&amp;quot;do it? &amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-12">&lt;a href="#cb7-12" aria-hidden="true">&lt;/a>&lt;span class="bu">read&lt;/span> -r &lt;span class="va">doit&lt;/span>&lt;/span>
&lt;span id="cb7-13">&lt;a href="#cb7-13" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb7-14">&lt;a href="#cb7-14" aria-hidden="true">&lt;/a>&lt;span class="kw">if&lt;/span>&lt;span class="bu"> [&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$doit&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="ot">=&lt;/span> &lt;span class="st">&amp;quot;y&amp;quot;&lt;/span>&lt;span class="bu"> ]&lt;/span>;&lt;span class="kw">then&lt;/span>&lt;/span>
&lt;span id="cb7-15">&lt;a href="#cb7-15" aria-hidden="true">&lt;/a> &lt;span class="fu">sudo&lt;/span> mount &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$dev&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$mount_point&lt;/span>&lt;span class="st">&amp;quot;&lt;/span> -o &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$mount_options&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb7-16">&lt;a href="#cb7-16" aria-hidden="true">&lt;/a>&lt;span class="kw">fi&lt;/span>&lt;/span>
&lt;span id="cb7-17">&lt;a href="#cb7-17" aria-hidden="true">&lt;/a>&lt;span class="fu">mount&lt;/span> -l &lt;span class="kw">|&lt;/span> &lt;span class="fu">grep&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$PWD&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="jetson">Jetson&lt;/h3>
&lt;p>Arch 中没有 &lt;code>ping6&lt;/code> 这个命令，所以需要做一个，记得添加到 PATH 里&lt;/p>
&lt;div class="sourceCode" id="cb8">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb8-1">&lt;a href="#cb8-1" aria-hidden="true">&lt;/a>&lt;span class="co"># /usr/local/bin/ping6&lt;/span>&lt;/span>
&lt;span id="cb8-2">&lt;a href="#cb8-2" aria-hidden="true">&lt;/a>&lt;span class="co">#!/bin/sh&lt;/span>&lt;/span>
&lt;span id="cb8-3">&lt;a href="#cb8-3" aria-hidden="true">&lt;/a>&lt;span class="fu">ping&lt;/span> -6 &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$@&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>有一个 bug: &lt;code>chown root.root "${nfs_dir}"&lt;/code>&lt;/p>
&lt;div class="sourceCode" id="cb9">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb9-1">&lt;a href="#cb9-1" aria-hidden="true">&lt;/a>&lt;span class="co"># Linux_for_Tegra/tools/kernel_flash/l4t_network_flash.func&lt;/span>&lt;/span>
&lt;span id="cb9-2">&lt;a href="#cb9-2" aria-hidden="true">&lt;/a>&lt;span class="fu">enable_nfs_for_folder ()&lt;/span>&lt;/span>
&lt;span id="cb9-3">&lt;a href="#cb9-3" aria-hidden="true">&lt;/a>&lt;span class="kw">{&lt;/span>&lt;/span>
&lt;span id="cb9-4">&lt;a href="#cb9-4" aria-hidden="true">&lt;/a> &lt;span class="ex">...&lt;/span>&lt;/span>
&lt;span id="cb9-5">&lt;a href="#cb9-5" aria-hidden="true">&lt;/a> &lt;span class="co">#chown root.root &amp;quot;${nfs_dir}&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb9-6">&lt;a href="#cb9-6" aria-hidden="true">&lt;/a> &lt;span class="fu">chown&lt;/span> root:root &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">${nfs_dir}&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb9-7">&lt;a href="#cb9-7" aria-hidden="true">&lt;/a> &lt;span class="ex">...&lt;/span>&lt;/span>
&lt;span id="cb9-8">&lt;a href="#cb9-8" aria-hidden="true">&lt;/a>&lt;span class="kw">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ul>
&lt;li>&lt;code>nfs-kernel-server&lt;/code> -&amp;gt; &lt;code>nfs-server&lt;/code>&lt;/li>
&lt;li>&lt;code>service&lt;/code> -&amp;gt; &lt;code>systemctl&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="sourceCode" id="cb10">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb10-1">&lt;a href="#cb10-1" aria-hidden="true">&lt;/a>&lt;span class="co"># Linux_for_Tegra/tools/kernel_flash/l4t_network_flash.func&lt;/span>&lt;/span>
&lt;span id="cb10-2">&lt;a href="#cb10-2" aria-hidden="true">&lt;/a>&lt;span class="fu">network_prerequisite ()&lt;/span>&lt;/span>
&lt;span id="cb10-3">&lt;a href="#cb10-3" aria-hidden="true">&lt;/a>&lt;span class="kw">{&lt;/span>&lt;/span>
&lt;span id="cb10-4">&lt;a href="#cb10-4" aria-hidden="true">&lt;/a> &lt;span class="co">#service nfs-kernel-server restart&lt;/span>&lt;/span>
&lt;span id="cb10-5">&lt;a href="#cb10-5" aria-hidden="true">&lt;/a> &lt;span class="ex">systemctl&lt;/span> restart nfs-server&lt;/span>
&lt;span id="cb10-6">&lt;a href="#cb10-6" aria-hidden="true">&lt;/a>&lt;span class="kw">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>nfs 可能还有一个问题，会报超时，需要重新 export 一下，可以通过 &lt;code>exportfs -s&lt;/code> 查看两个 ipv6 的 share，然后重新 export 一下，我前几次遇到了，后面再次烧录就没遇到了:&lt;/p>
&lt;div class="sourceCode" id="cb11">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb11-1">&lt;a href="#cb11-1" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> exportfs -o rw,nohide,insecure,no_subtree_check,async,no_root_squash &lt;span class="st">&amp;#39;[fc00:1:1::/48]:/r35.3.1/Linux_for_Tegra/rootfs&amp;#39;&lt;/span>&lt;/span>
&lt;span id="cb11-2">&lt;a href="#cb11-2" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> exportfs -o rw,nohide,insecure,no_subtree_check,async,no_root_squash &lt;span class="st">&amp;#39;[fc00:1:1::/48]:/r35.3.1/Linux_for_Tegra/tools/kernel_flash&amp;#39;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>file、magic number 和 Debian 中 file 的跨大版本更新</title><link>https://bensyz.github.io/blog/blogs/file_magic-number_debian-build-deb/</link><pubDate>Tue, 28 Nov 2023 12:06:47 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/file_magic-number_debian-build-deb/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>故事会，哈哈，可以跳过，简单来说就是 &lt;code>feh&lt;/code> 没有认出一种 &lt;code>bmp&lt;/code> 的格式。&lt;/p>
&lt;p>我们在 3588 上使用了 RK 提供的 Debian 11 系统。我们使用 &lt;code>eog&lt;/code> 也就是 gnome 带的图形查看软件，但是遇到了一个问题，如果我用 &lt;code>eog&lt;/code> 打开一张图后，又去更新这张图，&lt;code>eog&lt;/code> 是不会自动刷新的，它没有接入 &lt;code>libnotify&lt;/code>。于是我从 &lt;code>eog&lt;/code> 迁移到了 &lt;code>feh&lt;/code>，由于 Debian 11 自带的 &lt;code>feh&lt;/code> 版本过低只有 &lt;code>3.6.3&lt;/code>，这版的 &lt;code>feh&lt;/code> 也一样不支持 &lt;code>libnotify&lt;/code>，于是我就尝试自己编译并打包 &lt;code>feh-3.10&lt;/code>，打包是基于 arch 的 &lt;code>PKGBUILD&lt;/code>，很是折腾，最后还是成功编译。最近遇到了一个问题：一张 &lt;code>bmp&lt;/code> 的图片，&lt;code>feh&lt;/code> 打不开，给我包这个错：&lt;/p>
&lt;pre class="log">&lt;code>feh WARNING: T002-001.bmp - Does not look like an image (magic bytes missing)
feh: No loadable images specified.
See &amp;#39;feh --help&amp;#39; or &amp;#39;man feh&amp;#39; for detailed usage information&lt;/code>&lt;/pre>
&lt;p>然后我用 &lt;code>imagemagick&lt;/code> 转了一下，&lt;code>feh&lt;/code> 就能正常打开了。&lt;/p>
&lt;pre>&lt;code>convert T002-001.bmp T002-00X.bmp&lt;/code>&lt;/pre>
&lt;p>嗯，这是为啥？于是我把两张图片拷到我自己的 arch 上，&lt;code>feh&lt;/code> 都能打开。于是我用 &lt;code>file&lt;/code> 查看了两张图，结果是不一样的，那问题就处在这了，看起来两张图的格式不一样。&lt;/p>
&lt;pre class="console">&lt;code> ➜ file T002-001.bmp
T002-001.bmp: PC bitmap, Windows 3.x format, 5496 x 3672 x 8, image size 20181312, resolution 3780 x 3780 px/m, 256 important colors, cbSize 20182390, bits offset 1078
➜ file T002-00X.bmp
T002-00X.bmp: PC bitmap, Windows 98/2000 and newer format, 5496 x 3672 x 8, cbSize 25606550, bits offset 1162&lt;/code>&lt;/pre>
&lt;p>那为啥我在我的 arch 上可以开，在主机的 Debian 上不行呢？一样的打包方式呀？于是同样的我在主机上 &lt;code>file&lt;/code> 了这两个文件，结果很 amazing 啊，一张图是 &lt;code>data&lt;/code>，一张图是 &lt;code>Windows 98/2000 and newer format&lt;/code>，那看起来就是 &lt;code>file&lt;/code> 没识别出这个 &lt;code>Windows 3.x&lt;/code>。&lt;/p>
&lt;pre class="console">&lt;code>$ file T002-001.bmp
T002-001.bmp: data
$ file T002-00X.bmp
T002-00X.bmp: PC bitmap, Windows 98/2000 and newer format, 5496 x 3672 x 8&lt;/code>&lt;/pre>
&lt;p>那是不是 &lt;code>feh&lt;/code> 也是因为一样的问题识别不出来这个文件呢？但是 &lt;code>eog&lt;/code> 又能正常打开啊。无奈只能各种搜，没搜到。那没办法了只能直接去看 &lt;code>feh&lt;/code> 的源代码了，看这个报错是什么，惊喜地发现这个 &lt;code>Waring&lt;/code> 只有一处，代码逻辑也很清楚，还是拿 &lt;code>c&lt;/code> 写的，甚至 &lt;code>config.mk&lt;/code> 里 &lt;code>CFLAGS&lt;/code> 是带着 &lt;code>-g&lt;/code>！那不直接 &lt;code>gdb&lt;/code> 走起，拷 &lt;code>feh&lt;/code> 源码到主机上，然后 &lt;code>gdb --args feh T002-00X.bmp&lt;/code>：&lt;/p>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="co">//src/imlib.c &lt;/span>&lt;/span>
&lt;span id="cb5-2">&lt;a href="#cb5-2" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> feh_is_image(feh_file * file, &lt;span class="dt">int&lt;/span> magic_flags)&lt;/span>
&lt;span id="cb5-3">&lt;a href="#cb5-3" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb5-4">&lt;a href="#cb5-4" aria-hidden="true">&lt;/a>...&lt;/span>
&lt;span id="cb5-5">&lt;a href="#cb5-5" aria-hidden="true">&lt;/a> magic_setflags(magic, MAGIC_MIME_TYPE | MAGIC_SYMLINK | magic_flags);&lt;/span>
&lt;span id="cb5-6">&lt;a href="#cb5-6" aria-hidden="true">&lt;/a> mime_type = magic_file(magic, file-&amp;gt;filename);&lt;/span>
&lt;span id="cb5-7">&lt;a href="#cb5-7" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb5-8">&lt;a href="#cb5-8" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (!mime_type) {&lt;/span>
&lt;span id="cb5-9">&lt;a href="#cb5-9" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb5-10">&lt;a href="#cb5-10" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb5-11">&lt;a href="#cb5-11" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb5-12">&lt;a href="#cb5-12" aria-hidden="true">&lt;/a> &lt;span class="cf">if&lt;/span> (strncmp(mime_type, &lt;span class="st">&amp;quot;image/&amp;quot;&lt;/span>, &lt;span class="dv">6&lt;/span>) == &lt;span class="dv">0&lt;/span>) {&lt;/span>
&lt;span id="cb5-13">&lt;a href="#cb5-13" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">1&lt;/span>;&lt;/span>
&lt;span id="cb5-14">&lt;a href="#cb5-14" aria-hidden="true">&lt;/a> }&lt;/span>
&lt;span id="cb5-15">&lt;a href="#cb5-15" aria-hidden="true">&lt;/a>...&lt;/span>
&lt;span id="cb5-16">&lt;a href="#cb5-16" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="gdb">&lt;code>(gdb) b feh_is_image
(gdb) layout src
(gdb) r
(gdb) n
...&lt;/code>&lt;/pre>
&lt;p>最终发现问题出在这句上&lt;/p>
&lt;div class="sourceCode" id="cb7">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb7-1">&lt;a href="#cb7-1" aria-hidden="true">&lt;/a>mime_type = magic_file(magic, file-&amp;gt;filename);&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>对于那张正常的图，这里的返回值是 &lt;code>image/bmp&lt;/code>，而对于那张打不开的图，这里的返回值是 &lt;code>application/octet-stream&lt;/code>&lt;/p>
&lt;pre class="gdb">&lt;code>(gdb) p mime_type
$4 = 0x55555e0c00 &amp;quot;image/bmp&amp;quot;
(gdb) p mime_type
$2 = 0x55555b3350 &amp;quot;application/octet-stream&amp;quot;&lt;/code>&lt;/pre>
&lt;p>ps. 这里有一点搞了我一会儿的是在 next 跳过赋值之后查看 &lt;code>mime_type&lt;/code> 的值是 &lt;code>0x0&lt;/code>，两张图都是，我直接好家伙，然后各种 &lt;code>return&lt;/code> 让我一下摸不清头脑，有时是 &lt;code>0&lt;/code>(&lt;code>strncmp&lt;/code>) 是想要的，有时是 &lt;code>1&lt;/code>(&lt;code>feh_is_image&lt;/code>) 是想要的。后面是又往后跳了一下，应该是 return 回之前，print 了一下在发现哦这两个值不一样。这个应该和 &lt;code>O1&lt;/code> 优化有关。&lt;/p>
&lt;p>搜了一下 &lt;code>application/octet-stream&lt;/code> 是啥。&lt;/p>
&lt;blockquote>
&lt;p>A MIME attachment with the content type application/octet-stream is a binary file.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://docs.oracle.com/en/cloud/paas/integration-cloud/rest-adapter/support-application-octet-stream-mime-attachment-binary-payloads.html">ref_link&lt;/a>&lt;/p>
&lt;p>好家伙，这不就是 &lt;code>file&lt;/code> 返回给我的那个 &lt;code>data&lt;/code> 吗？没吊用。&lt;/p>
&lt;p>然后我在 arch 上一跳转 &lt;code>magic_file&lt;/code>，直接跳到这里了&lt;code>/usr/include/magic.h&lt;/code>，&lt;code>pacman&lt;/code> 的结果直接把我搞无语了：&lt;/p>
&lt;pre class="console">&lt;code> ➜ pacman -Qo /usr/include/magic.h
/usr/include/magic.h is owned by file 5.45-1&lt;/code>&lt;/pre>
&lt;p>啊这，找了半天原来一早 &lt;code>file&lt;/code> 就告诉我了。原来 &lt;code>feh&lt;/code> 用了 &lt;code>file&lt;/code> 的库哇。我一开始还以为像这种软件不会像 shell 一样调用其他软件，没想到啊。当然 &lt;code>feh&lt;/code> 没有直接使用 &lt;code>file&lt;/code> 而是使用了 &lt;code>file&lt;/code> 的库。或许这就是 “kiss” 的魅力吧。&lt;/p>
&lt;h2 id="file-和-magic-number">file 和 magic number&lt;/h2>
&lt;p>&lt;code>file&lt;/code> 这个命令再熟悉不过了，在刚学 Linux 的时候我们就被告知扩展名在 Linux 上只是给人看的。文件真正的格式要用 &lt;code>file&lt;/code> 来查看。但是 &lt;code>file&lt;/code> 是如何实现的呢？从 &lt;a href="https://en.wikipedia.org/wiki/File_(command)">File 的 wiki&lt;/a> 找到了 &lt;a href="https://en.wikipedia.org/wiki/Magic_number_(programming)">Magic Number&lt;/a>。magic number 原指在代码中突然出现的毫无意义的数字，（所谓黑魔法~）。而 file 这里的 magic number 是来自 Unix 用几个没有任何说明的常量来区别几种可执行文件，而后来得知，这两个 magic number 对应的是 PDP-11 的跳转指令。故事大概是这样的：&lt;/p>
&lt;p>可执行文件的最前端有 8 bytes 的 header，这段 header 包含程序（text）的大小和初始化的值（global）。由于早期 Unix 没有分页机制（有 PIC），导致操作系统只能一整块地从文件系统中读取文件，然后跳转到文件的开头开始执行。但是由于 header 的存在，我需要跳转到真正的程序处，所以最前面的 16bit 是用于跳转到 8byte 这个offset 的位置，而&lt;a href="https://en.wikipedia.org/wiki/PDP-11_architecture#Branch_instructions">这个跳转指令&lt;/a>由分两部分：跳转指令（0x04）和偏移（0x07）：0000,0010|0000,0111)，这里偏移 7 是因为 &lt;code>pc&lt;/code> 在第一个 byte 上，它需要向后跳转7个字节，也就是跳过 8 bytes 的 header。这样这个可执行文件可以正常执行了。&lt;/p>
&lt;p>Unix 应该是支持 3 种格式的可执行文件：&lt;/p>
&lt;ol type="1">
&lt;li>the executable image contained relocatable memory references (normal)&lt;/li>
&lt;li>the newly implemented paged read-only executable image&lt;/li>
&lt;li>the separated instruction and data paged image&lt;/li>
&lt;/ol>
&lt;p>从第六版开始，Unix 支持分页机制：一整个文件看起来载入到一段连续的内存中，但其实，header 所在的页是位于内核 buffer 中，而用户空间的起始位就直接是真正代码段了，直接是从 0 开始的。但对不同的可执行文件，操作系统执行 &lt;code>exec()&lt;/code> 时应该是有不同的执行逻辑。这个时候上面的 2 bytes 被当作一个特征来区分三种文件，这个时候所谓“指令”其实不再是指令，只是被当作一个特征符。而 Unix 在代码中去比较这两个字节的时候，直接拿了两个常数在对比，并且从来没有提到关于这个比较的含义，黑魔法出现了，哈哈。后来这种文件内容的特征指纹来表示文件类型的方式逐渐被大家接收，并逐渐扩展到所有文件。&lt;a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#In_files">wiki&lt;/a> 上也列了一些常见文件类型的特征数据，比如 &lt;code>png&lt;/code> 格式开头的 8 字节 &lt;code>89 50 4E 47 0D 0A 1A 0A&lt;/code>。&lt;/p>
&lt;p>&lt;code>libmagic.so&lt;/code> 则包含了一个完整的数据库来记录这些特征段，从而使得 &lt;code>file&lt;/code> 可以不借助后缀也能识别到文件类型。这个数据库在 &lt;code>file&lt;/code> 源码的 &lt;code>magic/Magdir&lt;/code> 目录中，以文件类型为名创建了很多文件，如 image，music。这些文件有特殊的格式，参见 &lt;code>magic(5)&lt;/code>。&lt;/p>
&lt;h2 id="更新-debian-上的-libmagic.so-和-file">更新 Debian 上的 &lt;code>libmagic.so&lt;/code> 和 &lt;code>file&lt;/code>&lt;/h2>
&lt;p>了解了问题所在之后就是如何更新 &lt;code>libmagic.so&lt;/code> 了，而由于 Debian 11 即&lt;code>bullseye&lt;/code> 提供的 &lt;code>file&lt;/code> 和 &lt;code>libmagic1&lt;/code> 太旧了，查看了一下 Debian 12 即 &lt;code>bookworm&lt;/code> 的 &lt;code>libmagic1&lt;/code> 的版本和我的 arch 差不了太多，应该是可以 work 的。直接下载 &lt;code>bookworm&lt;/code> 的 &lt;code>libmagic1.deb&lt;/code> 不行，&lt;code>libc&lt;/code> 版本不对，大概是因为 &lt;code>bookworm&lt;/code> 的 &lt;code>libc&lt;/code> 的版本有做升级。这次不想从 arch 的 &lt;code>PKGBUILD&lt;/code> 折腾编译 Debian 的包了，想直接从 Debian 的源码编译，简单查看了一下发现 &lt;code>file&lt;/code> 和 &lt;code>libmagic1&lt;/code> 的依赖不多，单独更新这两个包应该不会有太大问题，&lt;code>libc&lt;/code> 的版本不一致应该也可以解决。&lt;/p>
&lt;h3 id="更新源">更新源：&lt;/h3>
&lt;p>在 &lt;code>/etc/apt/sources.list&lt;/code> 添加 &lt;code>bookworm&lt;/code> 的 &lt;code>deb-src&lt;/code>，就是复制 &lt;code>bullseye&lt;/code> 的 &lt;code>deb-src&lt;/code>，然后把 &lt;code>bullseye&lt;/code> 改成 &lt;code>bookworm&lt;/code>:&lt;/p>
&lt;pre class="sources.list">&lt;code>deb-src http://mirrors.ustc.edu.cn/debian bullseye main contrib&lt;/code>&lt;/pre>
&lt;p>改成&lt;/p>
&lt;pre class="sources.list">&lt;code>deb-src http://mirrors.ustc.edu.cn/debian bookworm main contrib&lt;/code>&lt;/pre>
&lt;p>改完的 &lt;code>sources.list&lt;/code>：&lt;/p>
&lt;pre class="sources.list">&lt;code>#/etc/apt/sources.list
deb http://mirrors.ustc.edu.cn/debian bullseye main contrib
#deb-src http://mirrors.ustc.edu.cn/debian bullseye main contrib
deb http://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib
#deb-src http://mirrors.ustc.edu.cn/debian-security bullseye-security main contrib
deb http://mirrors.ustc.edu.cn/debian bullseye-updates main contrib
#deb-src http://mirrors.ustc.edu.cn/debian bullseye-updates main contrib
deb http://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib
#deb-src http://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib
deb-src http://mirrors.ustc.edu.cn/debian bookworm main contrib&lt;/code>&lt;/pre>
&lt;div class="sourceCode" id="cb13">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb13-1">&lt;a href="#cb13-1" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt update&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="下载源码并编译">下载源码并编译&lt;/h3>
&lt;p>&lt;a href="https://www.linuxfordevices.com/tutorials/debian/build-packages-from-source">ref_link1&lt;/a>，&lt;a href="http://rediceli.blogspot.com/2006/08/debian.html">ref_link2&lt;/a>&lt;/p>
&lt;p>下载 &lt;code>libmagic1&lt;/code> 源码：&lt;/p>
&lt;div class="sourceCode" id="cb14">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb14-1">&lt;a href="#cb14-1" aria-hidden="true">&lt;/a>&lt;span class="fu">mkdir&lt;/span> libmagic1&lt;/span>
&lt;span id="cb14-2">&lt;a href="#cb14-2" aria-hidden="true">&lt;/a>&lt;span class="bu">cd&lt;/span> libmagic1&lt;/span>
&lt;span id="cb14-3">&lt;a href="#cb14-3" aria-hidden="true">&lt;/a>&lt;span class="ex">apt&lt;/span> source libmagic1&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>下载编译所需环境：&lt;/p>
&lt;div class="sourceCode" id="cb15">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb15-1">&lt;a href="#cb15-1" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> apt -y build-dep libmagic1&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>编译打包：&lt;/p>
&lt;div class="sourceCode" id="cb16">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb16-1">&lt;a href="#cb16-1" aria-hidden="true">&lt;/a>&lt;span class="bu">cd&lt;/span> file-5.44&lt;/span>
&lt;span id="cb16-2">&lt;a href="#cb16-2" aria-hidden="true">&lt;/a>&lt;span class="ex">dpkg-buildpackage&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>然后 file 和 libmagic1 等包全被打好了，一样好方便哇。然后就是简单的装 &lt;code>deb&lt;/code> 的包了，dbgsym 的和 dev 的包没装：&lt;/p>
&lt;div class="sourceCode" id="cb17">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb17-1">&lt;a href="#cb17-1" aria-hidden="true">&lt;/a>&lt;span class="fu">sudo&lt;/span> dpkg -i file_5.44-3_arm64.deb libmagic1_5.44-3_arm64.deb libmagic-mgc_5.44-3_arm64.deb&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ul>
&lt;li>ps. feh 也可以通过这种方式来打包诶。&lt;/li>
&lt;li>pps. 发现 debian 默认的 feh 是 disable libmagic 的，看了下代码 &lt;code>feh_is_image&lt;/code> 这个函数是受这个宏控制的，所以我只要把 &lt;code>feh&lt;/code> 的这个选项关了，&lt;code>file&lt;/code> 也不需要更新了。（啊啊啊）&lt;/li>
&lt;/ul></description></item><item><title>RK3588 PCIe Introduction</title><link>https://bensyz.github.io/blog/blogs/rk3588_PCIe_intro/</link><pubDate>Thu, 23 Nov 2023 10:51:55 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/rk3588_PCIe_intro/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>起因是发现启动的时候 PCIe 有关于 &lt;code>fe160000&lt;/code> 的报错信息:&lt;/p>
&lt;pre class="dmesg">&lt;code>[ 1.712561] rk-pcie fe160000.pcie: invalid prsnt-gpios property in node
[ 1.728638] rk-pcie fe160000.pcie: IRQ msi not found
[ 1.728645] rk-pcie fe160000.pcie: use outband MSI support
[ 1.728647] rk-pcie fe160000.pcie: Missing *config* reg space
[ 1.728660] rk-pcie fe160000.pcie: host bridge /pcie@fe160000 ranges:
[ 1.728670] rk-pcie fe160000.pcie: err 0x00f1000000..0x00f10fffff -&amp;gt; 0x00f1000000
[ 1.728677] rk-pcie fe160000.pcie: IO 0x00f1100000..0x00f11fffff -&amp;gt; 0x00f1100000
[ 1.728686] rk-pcie fe160000.pcie: MEM 0x00f1200000..0x00f1ffffff -&amp;gt; 0x00f1200000
[ 1.728691] rk-pcie fe160000.pcie: MEM 0x0940000000..0x097fffffff -&amp;gt; 0x0940000000
[ 1.728712] rk-pcie fe160000.pcie: Missing *config* reg space
[ 1.728739] rk-pcie fe160000.pcie: invalid resource
[ 1.934114] rk-pcie fe160000.pcie: PCIe Linking... LTSSM is 0x0
[ 1.959670] rk-pcie fe160000.pcie: PCIe Linking... LTSSM is 0x1
[ 1.986337] rk-pcie fe160000.pcie: PCIe Linking... LTSSM is 0x0
[ 2.013002] rk-pcie fe160000.pcie: PCIe Linking... LTSSM is 0x0
[ 2.043004] rk-pcie fe160000.pcie: PCIe Linking... LTSSM is 0x0
[ 2.069669] rk-pcie fe160000.pcie: PCIe Linking... LTSSM is 0x0
[ 4.629670] rk-pcie fe160000.pcie: PCIe Link Fail
[ 4.629679] rk-pcie fe160000.pcie: failed to initialize host&lt;/code>&lt;/pre>
&lt;p>于是阅读 RK3588 SDK 中关于 PCIe 的文档 &lt;code>docs/cn/Common/PCIe/Rockchip_Developer_Guide_PCIe_CN.pdf&lt;/code>，想了解这个错究竟是什么，对于纯新手的我来说不是很好理解，因而边画，边学习，整理如下，如有错误之处，还请谅解并告知于我，十分感谢。&lt;/p>
&lt;h2 id="rks-intro-and-picture">RK’s Intro and Picture&lt;/h2>
&lt;p>RK 有一段关于 PCIe Controller 使用限制的说明，和一张 Big Picture，不是太好理解，于是我把这张图拆开来，画了几张图。&lt;/p>
&lt;p>&lt;img src="./figures/rk3588_PCIe_use_limitation.png" alt="rk3588_PCIe_use_limitation" />[1] &lt;img src="./figures/rk3588_PCIe_big_picture.png" alt="rk3588_PCIe_big_picture" />[2]&lt;/p>
&lt;h2 id="phy-and-controller">PHY and Controller&lt;/h2>
&lt;ul>
&lt;li>PHY: Chip。把控制器发过来的信号做处理，然后再发出去。这种处理是为了方便传输，类似网络中的 rgmii（上游）和 8bit/10bit（下游）。简单来说 PHY 的上下是两种信号。&lt;/li>
&lt;li>控制器：实现一定的功能的 Chip。&lt;/li>
&lt;li>Cable: 网线。by ChatGPT: difference of PHY and cable: The PHY layer manages the signaling and encoding on the cable, ensuring reliable communication between devices.&lt;/li>
&lt;/ul>
&lt;h3 id="pcie-phy">PCIe PHY&lt;/h3>
&lt;ul>
&lt;li>RK3588 有两种 PCIe PHY
&lt;ul>
&lt;li>一种是 PCIe 3.0 的 PHY 有 1 个&lt;/li>
&lt;li>一种是 PCIe 2.0 的 PHY 有 3 个&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>PCIe 3.0 有 4 条 Lane&lt;/li>
&lt;li>每个 PCIe 2.0 只有一条 1 个Lane&lt;/li>
&lt;/ul>
&lt;figure>
&lt;img src="./figures/PCIe_PHY.drawio.png" alt="" />&lt;figcaption>PCIe_PHY.drawio&lt;/figcaption>
&lt;/figure>
&lt;h3 id="connect-to-pcie-controller">Connect to PCIe Controller&lt;/h3>
&lt;p>RK3588共有5个PCIe的控制器，硬件IP是一样的，配置不一样，&lt;/p>
&lt;ul>
&lt;li>1 个 4 Lane 控制器 支持 DM（dual mode）模式，可以作为 RC(Root Complex) 和 EP(End Point) 使用&lt;/li>
&lt;li>1 个 2 Lane 控制器 只能作为 RC 使用&lt;/li>
&lt;li>3 个 1 Lane 控制器 均只能作为 RC 使用&lt;/li>
&lt;/ul>
&lt;p>关于 RC 和 EP，可以详见我的这篇文章 &lt;a href="./PCIe_and_lspci">PCIe 和 lspci&lt;/a>。对于 RK3588 这个 PCIe 控制器的 EP 模式，其实此时，是将 RK3588 所在的 PCB 板当作板卡，就像显卡一样，插在其他主机的 PCIe 槽上，作为从设备。就像显卡、RTL8168 系列芯片一样。&lt;/p>
&lt;p>PCIe PHY 受 PCIe Controller 控制，所以上面几个 PHY 的上游需要接 PCIe Controller。接法有很多，最简单的接法是这样子的：&lt;/p>
&lt;figure>
&lt;img src="./figures/PCIe_4Lane.drawio.png" alt="" />&lt;figcaption>PCIe_4Lane.drawio&lt;/figcaption>
&lt;/figure>
&lt;ul>
&lt;li>关于 Port，简单来说一个 Port 接一个设备&lt;/li>
&lt;/ul>
&lt;p>也可以把 PCIe 3.0 的 PHY 拆开使用，拆成两个 Port&lt;/p>
&lt;figure>
&lt;img src="./figures/PCIe_4Lane_split2.drawio.png" alt="" />&lt;figcaption>PCIe_4Lane_split2.drawio&lt;/figcaption>
&lt;/figure>
&lt;p>PCIe 3.0 的 PHY 还可以再细拆，拆成 4 个 Port&lt;/p>
&lt;figure>
&lt;img src="./figures/PCIe_4Lane_split4.drawio.png" alt="" />&lt;figcaption>PCIe_4Lane_split4.drawio&lt;/figcaption>
&lt;/figure>
&lt;p>由于控制器数量限制，所以有两条 Lane 空出来了。这两条 Lane 空着也是空着，为什么不把它再利用起来呢，于是 RK 把这两条多出来的 Lane 和 USB 和 SATA 做了复用，也就是所谓的 MUX。所谓 MUX 就是同一条物理线路上，我可以传输这种信号，也可以传输另一种信号，我复用了这条线路，但是这里的“可以”和“也可以”只能选一个，不能既选这个又选那个，选了一个就不能选另外一个了。&lt;/p>
&lt;figure>
&lt;img src="./figures/PCIe_4Lane_split4_USB_SATA.png" alt="" />&lt;figcaption>PCIe_4Lane_split4_USB_SATA&lt;/figcaption>
&lt;/figure>
&lt;p>那么回过头来，看第一种情况，我们也可以不接 controller 2 和 controller 3&lt;/p>
&lt;figure>
&lt;img src="./figures/PCIe_4Lane_USB_SATA.png" alt="" />&lt;figcaption>PCIe_4Lane_USB_SATA&lt;/figcaption>
&lt;/figure>
&lt;p>所以这个事情就变得非常灵活了。那再来一张相对完整的图片（没有包含使用组合的限制）&lt;/p>
&lt;figure>
&lt;img src="./figures/PCIe_full_connection_info.drawio.png" alt="" />&lt;figcaption>PCIe_full_connection_info.drawio&lt;/figcaption>
&lt;/figure>
&lt;h2 id="dts">DTS&lt;/h2>
&lt;p>上面是硬件上的连接，那么软件上也就是设备树上怎么和上面的关联呢？根据 RK 文档，我们可以看到两张表，这里做了简化和修改。&lt;/p>
&lt;h3 id="phy">PHY&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>PHY Chip Type&lt;/th>
&lt;th>dts alias&lt;/th>
&lt;th>dts point&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>PCIE3.0&lt;/td>
&lt;td>&lt;code>pcie30phy&lt;/code>&lt;/td>
&lt;td>&lt;code>phy@fee80000&lt;/code>&lt;/td>
&lt;td>pcie专⽤&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>PCIE2.0&lt;/td>
&lt;td>&lt;code>combphy0_ps&lt;/code>&lt;/td>
&lt;td>&lt;code>phy@fee00000&lt;/code>&lt;/td>
&lt;td>与SATA combo&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>PCIE2.0&lt;/td>
&lt;td>&lt;code>combphy1_ps&lt;/code>&lt;/td>
&lt;td>&lt;code>phy@fee10000&lt;/code>&lt;/td>
&lt;td>与SATA combo&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>PCIE2.0&lt;/td>
&lt;td>&lt;code>combphy2_psu&lt;/code>&lt;/td>
&lt;td>&lt;code>phy@fee20000&lt;/code>&lt;/td>
&lt;td>SATA/USB3 combo&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>comboPHY 就是 PCIE 信号线路和其他信号线路复用的 PHY，当然在使用的时候只能选择一种使用，由硬件设计。&lt;/p>
&lt;p>comboPHY dts alias name rule:&lt;/p>
&lt;ul>
&lt;li>如果和其他信号复用(mux)，phy 的 alias 名字以 combphy 来表示&lt;/li>
&lt;li>combphy 的后缀表⽰复⽤关系，p、s、u、q分别表⽰PCIe、SATA、USB、QSGMII&lt;/li>
&lt;/ul>
&lt;h3 id="controller">Controller&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>Controller index&lt;/th>
&lt;th>dts alias&lt;/th>
&lt;th>dts point&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>0&lt;/td>
&lt;td>&lt;code>pcie3x4&lt;/code>&lt;/td>
&lt;td>&lt;code>pcie@fe150000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>1&lt;/td>
&lt;td>&lt;code>pcie3x2&lt;/code>&lt;/td>
&lt;td>&lt;code>pcie@fe160000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>2&lt;/td>
&lt;td>&lt;code>pcie2x1l0&lt;/code>&lt;/td>
&lt;td>&lt;code>pcie@fe170000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>3&lt;/td>
&lt;td>&lt;code>pcie2x1l1&lt;/code>&lt;/td>
&lt;td>&lt;code>pcie@fe180000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="odd">
&lt;td>4&lt;/td>
&lt;td>&lt;code>pcie2x1l2&lt;/code>&lt;/td>
&lt;td>&lt;code>pcie@fe190000&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>dts alias rule:&lt;/p>
&lt;ul>
&lt;li>&lt;code>pcie2&lt;/code> PCIE 类型&lt;/li>
&lt;li>&lt;code>x1&lt;/code> 这个控制器最多能控制的 lane 数&lt;/li>
&lt;li>&lt;code>l0&lt;/code> lane index 0&lt;/li>
&lt;/ul>
&lt;p>关于更详细的配置，目前我并没有细看，因为看明白这点之后，和硬件的同事对了一下，发现一开始说的关于 &lt;code>fe160000&lt;/code> 的报错问题是因为我们现在的板子相较于那版，少接了一个 3142 芯片，少了两个 USB 口，而这条 Lane 对应的就是 &lt;code>fe160000&lt;/code>，目前它是空着的。&lt;/p>
&lt;h2 id="references">References:&lt;/h2>
&lt;ul>
&lt;li>[1] Rockchip_Developer_Guide_PCIe_CN.pdf&lt;/li>
&lt;li>[2] Rockchip_Developer_Guide_PCIe_CN.pdf&lt;/li>
&lt;/ul>
&lt;h2 id="resources">Resources:&lt;/h2>
&lt;p>本文图片源文件: &lt;a href="./res/rk3588_PCIe_intro.drawio">rk3588_PCIe_intro.drawio&lt;/a>&lt;/p>
&lt;h2 id="ps">ps&lt;/h2>
&lt;p>本文中摘录了部分 RK 文档中的内容，此部份内容均以 Reference 的形式指向 &lt;code>Rockchip_Developer_Guide_PCIe_CN.pdf&lt;/code>。私以为并未“超越合理使用范畴”，如 Rockchip 认为“超越合理使用范畴”请联系告知，我将会移除此部份。&lt;/p>
&lt;p>RK 文档中的版权声明：&lt;/p>
&lt;blockquote>
&lt;p>版权所有 © 2023 瑞芯微电子股份有限公司&lt;/p>
&lt;p>超越合理使用范畴，非经本公司书面许可，任何单位和个人不得擅自摘抄、复制本文档内容的部分或全部，并不得以任何形式传播。&lt;/p>
&lt;/blockquote></description></item><item><title>about rk3588 disk partitions(未完待续) and fdisk, dd</title><link>https://bensyz.github.io/blog/blogs/about_rk3588_disk_partitions_and_fdisk_dd/</link><pubDate>Wed, 16 Aug 2023 09:28:51 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/about_rk3588_disk_partitions_and_fdisk_dd/</guid><description>&lt;p>推荐文档：&lt;/p>
&lt;p>&lt;code>Rockchip_Developer_Guide_UBoot_Nextdev_CN.pdf&lt;/code>&lt;/p>
&lt;p>以前在 Windows 上 用 &lt;code>RKDevTool_Release.exe&lt;/code> 烧录镜像时一直有个疑惑： &lt;code>miniloader&lt;/code> 和 &lt;code>parameter&lt;/code> 的地址为什么是 &lt;code>0x0&lt;/code>，好像是烧到其他地方去了，并且 &lt;code>lsblk&lt;/code> 也看不到这两个文件所在的分区。&lt;/p>
&lt;figure>
&lt;img src="./figures/rk_burn_window.png" alt="" />&lt;figcaption>rk_burn_window&lt;/figcaption>
&lt;/figure>
&lt;pre class="console">&lt;code>$ lsblk
NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
mmcblk0 179:0 0 14.6G 0 disk
├─mmcblk0p1 179:1 0 4M 0 part
├─mmcblk0p2 179:2 0 4M 0 part
├─mmcblk0p3 179:3 0 64M 0 part
├─mmcblk0p4 179:4 0 128M 0 part
├─mmcblk0p5 179:5 0 32M 0 part
├─mmcblk0p6 179:6 0 14G 0 part /
├─mmcblk0p7 179:7 0 128M 0 part /oem
└─mmcblk0p8 179:8 0 206M 0 part /userdata
mmcblk0boot0 179:32 0 4M 1 disk
mmcblk0boot1 179:64 0 4M 1 disk&lt;/code>&lt;/pre>
&lt;p>这两天在看 uboot 的文档时，&lt;code>Rockchip_Developer_Guide_UBoot_Nextdev_CN.pdf&lt;/code> 看到 &lt;code>2.6 存储布局&lt;/code> 这个疑惑接被解决了。&lt;/p>
&lt;figure>
&lt;img src="./figures/partition_tables.png" alt="" />&lt;figcaption>&lt;a href="https://opensource.rock-chips.com/wiki_Partitions">partition_tables&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;p>原来 minloader 被烧录到 mmcblk0p1 前的分区了，parameter.txt 本身就是分区表，应该就是生成了 GPT 分区表。&lt;/p>
&lt;h2 id="验证">验证&lt;/h2>
&lt;h3 id="fdisk">&lt;code>fdisk&lt;/code>&lt;/h3>
&lt;p>来验证一下&lt;/p>
&lt;pre class="console">&lt;code># fdisk -l /dev/mmcblk0
Disk /dev/mmcblk0: 14.56 GiB, 15634268160 bytes, 30535680 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 17B18C43-1D24-4484-8883-D0C618E42411
Device Start End Sectors Size Type
/dev/mmcblk0p1 16384 24575 8192 4M unknown
/dev/mmcblk0p2 24576 32767 8192 4M unknown
/dev/mmcblk0p3 32768 163839 131072 64M unknown
/dev/mmcblk0p4 163840 425983 262144 128M unknown
/dev/mmcblk0p5 425984 491519 65536 32M unknown
/dev/mmcblk0p6 491520 29851647 29360128 14G unknown
/dev/mmcblk0p7 29851648 30113791 262144 128M unknown
/dev/mmcblk0p8 30113792 30535646 421855 206M unknown&lt;/code>&lt;/pre>
&lt;p>&lt;code>fdisk&lt;/code> 的输出很清晰，前三个分区和上图中的加粗项一一对应。之前没主意到的是第一个分区并不是从 &lt;code>2048&lt;/code> 开始的。&lt;/p>
&lt;h3 id="dd">&lt;code>dd&lt;/code>&lt;/h3>
&lt;p>在用 &lt;code>dd&lt;/code> 验证之前，需要了解一下 &lt;code>fdisk&lt;/code> 的输出：&lt;/p>
&lt;p>&lt;code>mmcblk0&lt;/code> 一个 sector 的大小是 512 bytes，第一个分区起始 sector 是 16384，占用 &lt;code>24575 - 16383 = 8192&lt;/code> 个 sector，这里减去 16383 是因为 16384 这个编号的 sector 是第一个分区的第一个 sector，长度是减去不属于第一个分区的最后一个 sector 的编号。再看上面那张图片，整个磁盘的起始 sector 的编号是 0，MBR 占用 1 个 sector；同时，第一个分区前的 sector 的数量是第一个分区的编号。这里说得这么啰嗦是因为后面 &lt;code>dd&lt;/code> 需要这些参数。再回过头来看第一个分区，第一个分区的大小是 &lt;code>8192 * 512 B = 8K * 512 B = 4 MB&lt;/code>。再看磁盘最后的位置：最后一个分区后还有 &lt;code>30535679 - 30535646 = 33&lt;/code> 个分区，也就是 secondary gpt 分区。这里是用 30535679 减，是因为 Disk 那一行中的 30535680 是指长度，由于我们是从 0 开始编号的，所以最后一个分区的编号是 30535679。&lt;/p>
&lt;figure>
&lt;img src="./figures/disk_and_part.png" alt="" />&lt;figcaption>disk_and_part&lt;/figcaption>
&lt;/figure>
&lt;ol type="1">
&lt;li>使用 dd 获取第一个分区：&lt;/li>
&lt;/ol>
&lt;p>因为第一个分区被分区了，所以我们可以直接设定 &lt;code>if&lt;/code> 为分区&lt;/p>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="fu">dd&lt;/span> if=/dev/mmcblk0p1 of=./uboot.img bs=512&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>由于我们最终是想读取第一个分区前的数据，所以我们这里通过第一个分区来验证和练习一下：&lt;/p>
&lt;pre class="console">&lt;code># dd if=/dev/mmcblk0 bs=512 skip=16384 count=8192 | sha1sum
68b4104cad133f08b54a88161fc0ac8c9fdf2a81 -&lt;/code>&lt;/pre>
&lt;p>同时我们校验一下通过分区读出来的镜像 hex，发现也是一样&lt;/p>
&lt;pre class="console">&lt;code># sha1sum uboot.img
68b4104cad133f08b54a88161fc0ac8c9fdf2a81 uboot.img&lt;/code>&lt;/pre>
&lt;p>由此，我们可以得出以下结论：&lt;/p>
&lt;p>&lt;code>dd&lt;/code> 中 SKIP 的大小 = 需要忽略的 sector 数量 (count) = 想读区域的起始编号（start index），起始编号也就是 fdisk 中的 Start 列。&lt;/p>
&lt;ol start="2" type="1">
&lt;li>使用 dd 获取 miniloader ：&lt;/li>
&lt;/ol>
&lt;div class="sourceCode" id="cb6">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb6-1">&lt;a href="#cb6-1" aria-hidden="true">&lt;/a>&lt;span class="fu">dd&lt;/span> if=/dev/mmcblk0 of=./miniloader.img bs=512 skip=64 count=7104&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>呃，有重复部分，但是不是完全一样，需要看一下这两者的区别。（TODO）&lt;/p></description></item><item><title>io_with_plc</title><link>https://bensyz.github.io/blog/blogs/io_with_plc/</link><pubDate>Tue, 11 Jul 2023 09:33:47 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/io_with_plc/</guid><description>&lt;p>2023-08-17 update: summary 中添加开关状态&lt;/p>
&lt;h1 id="intro">Intro&lt;/h1>
&lt;p>在阅读之前有一点需要注意的是，我们的输出、输入，和 PLC 的输出、输入不一样，PLC 的输出和输入是带着电源的，我们的不带电源。这点对输入很好理解，但是对于输出，不能理解成我们输出电压，我们的输出只是一个开关。&lt;/p>
&lt;h2 id="input">Input&lt;/h2>
&lt;figure>
&lt;img src="./figures/input.png" alt="" />&lt;figcaption>input&lt;/figcaption>
&lt;/figure>
&lt;h3 id="一些标记">一些标记&lt;/h3>
&lt;ul>
&lt;li>左侧
&lt;ul>
&lt;li>&lt;code>OP_IN0&lt;/code>：外部看到的 &lt;code>IN0&lt;/code>&lt;/li>
&lt;li>&lt;code>COMIN1&lt;/code>：外部看到的 IN 口的 &lt;code>COM&lt;/code> 口&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>右侧
&lt;ul>
&lt;li>⏚ ：地 GND&lt;/li>
&lt;li>&lt;code>GPIO1_C0_Z&lt;/code>：连到上级芯片（主芯片）。&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>中间
&lt;ul>
&lt;li>&lt;code>PS2805&lt;/code>：光耦，如果 &lt;code>1&lt;/code> &lt;code>2&lt;/code> 引脚间有电压差，就会发光，会激发 &lt;code>3&lt;/code> &lt;code>4&lt;/code> 引脚间的光敏二极管，即 &lt;code>3&lt;/code> &lt;code>4&lt;/code> 导通，也就是 &lt;strong>有电压差，开关闭合&lt;/strong>&lt;/li>
&lt;/ul>
&lt;img src="./figures/PS2805.png" title="fig:" alt="PS2805" />&lt;/li>
&lt;/ul>
&lt;h3 id="右内侧电路">右（内）侧电路&lt;/h3>
&lt;p>先说简单的：&lt;/p>
&lt;ul>
&lt;li>工作状态：&lt;code>3&lt;/code> &lt;code>4&lt;/code> 引脚间的光敏二极管导通，&lt;code>GPIO1_C0_Z&lt;/code> 的电压等于 3 引脚的 &lt;code>GND&lt;/code>，低电平&lt;/li>
&lt;li>停止工作状态：&lt;code>3&lt;/code> &lt;code>4&lt;/code> 引脚间的光敏二极管开路断开，&lt;code>GPIO1_C0_Z&lt;/code> 的电压等于 &lt;code>VCC_1V8_S0&lt;/code>，高电平&lt;/li>
&lt;/ul>
&lt;h3 id="左外侧电路">左（外）侧电路&lt;/h3>
&lt;ul>
&lt;li>&lt;code>COMIN1&lt;/code> 高电平
&lt;ul>
&lt;li>&lt;code>OP_IN0&lt;/code> 低电平，&lt;code>1&lt;/code> &lt;code>2&lt;/code> 之间&lt;strong>有&lt;/strong>电压差，中间的光耦工作。&lt;/li>
&lt;li>&lt;code>OP_IN0&lt;/code> 高电平，&lt;code>1&lt;/code> &lt;code>2&lt;/code> 之间&lt;strong>无&lt;/strong>电压差，中间的光耦不工作。&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>&lt;code>COMIN1&lt;/code> 低电平，&lt;code>OP_IN0=1&lt;/code>，&lt;code>1&lt;/code> &lt;code>2&lt;/code> 之间有电压差，中间的光耦工作
&lt;ul>
&lt;li>&lt;code>OP_IN0&lt;/code> 低电平，&lt;code>1&lt;/code> &lt;code>2&lt;/code> 之间&lt;strong>无&lt;/strong>电压差，中间的光耦不工作。&lt;/li>
&lt;li>&lt;code>OP_IN0&lt;/code> 高电平，&lt;code>1&lt;/code> &lt;code>2&lt;/code> 之间&lt;strong>有&lt;/strong>电压差，中间的光耦工作。&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;h3 id="整体电路">整体电路&lt;/h3>
&lt;p>定义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>COMIN1&lt;/code> 为 &lt;code>COM&lt;/code>&lt;/li>
&lt;li>&lt;code>OP_IN0&lt;/code> 为 &lt;code>IN&lt;/code>&lt;/li>
&lt;li>&lt;code>GPIO1_C0_Z&lt;/code> 为 &lt;code>GPIO&lt;/code>&lt;/li>
&lt;li>高电平为 1， 低电平为 0&lt;/li>
&lt;/ul>
&lt;p>那么：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;/th>
&lt;th>&lt;code>IN = 1&lt;/code>&lt;/th>
&lt;th>&lt;code>IN = 0&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>COM = 1&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 1&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>COM = 0&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 0&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 1&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;span class="math inline">\(\text{GPIO} = \text{IN} \odot \text{COM}\)&lt;/span> 同或关系（相同为1）&lt;/p>
&lt;p>上升沿和下降沿看的是 &lt;code>IN&lt;/code>，所以：&lt;/p>
&lt;ul>
&lt;li>如果 &lt;code>COM&lt;/code> 口 是高电平，&lt;span class="math inline">\(\text{GPIO} = \text{IN}\)&lt;/span>&lt;/li>
&lt;li>如果 &lt;code>COM&lt;/code> 口 是低电平，&lt;span class="math inline">\(\text{GPIO} = \overline{\text{IN}}\)&lt;/span>，那么实际的上升沿和输入到系统的上升沿是反的&lt;/li>
&lt;/ul>
&lt;hr />
&lt;ul>
&lt;li>&lt;code>COM&lt;/code> 口 高电平对应的 &lt;code>PLC&lt;/code> 类型是 &lt;code>NPN&lt;/code>&lt;/li>
&lt;li>&lt;code>COM&lt;/code> 口 低电平对应的 &lt;code>PLC&lt;/code> 类型是 &lt;code>PNP&lt;/code>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;/th>
&lt;th>&lt;code>IN = 1&lt;/code>&lt;/th>
&lt;th>&lt;code>IN = 0&lt;/code>&lt;/th>
&lt;th>to soc&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>NPN&lt;/code> &lt;code>COM = 1&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 1&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 0&lt;/code>&lt;/td>
&lt;td>No reverse&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>PNP&lt;/code> &lt;code>COM = 0&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 0&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 1&lt;/code>&lt;/td>
&lt;td>Reverse&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="with-plc-side">With PLC side&lt;/h3>
&lt;p>为了理解输出我们需要看完整的电路情况&lt;/p>
&lt;h4 id="simple-view">Simple View&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;code>COM = 1&lt;/code>&lt;/th>
&lt;th>&lt;code>COM = 0&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;img src="./figures/input_com_p.png" width="500" alt="input_com_p" />&lt;/td>
&lt;td>&lt;img src="./figures/input_com_n.png" width="500" alt="input_com_n" />&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>值：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;/th>
&lt;th>&lt;code>IN = 1&lt;/code> （PLC 开关断开）&lt;/th>
&lt;th>&lt;code>IN = 0&lt;/code> （PLC 开关闭合）&lt;/th>
&lt;th>to soc&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>NPN&lt;/code> &lt;code>COM = 1&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 1&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 0&lt;/code>&lt;/td>
&lt;td>No reverse&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>PNP&lt;/code> &lt;code>COM = 0&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 0&lt;/code>&lt;/td>
&lt;td>&lt;code>GPIO = 1&lt;/code>&lt;/td>
&lt;td>Reverse&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>延触发：&lt;/p>
&lt;p>&lt;code>NPN&lt;/code>， &lt;code>COM=1&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>开关状态&lt;/th>
&lt;th>&lt;code>IN&lt;/code>&lt;/th>
&lt;th>外部的沿&lt;/th>
&lt;th>光耦间电压差&lt;/th>
&lt;th>&lt;code>GPIO&lt;/code>&lt;/th>
&lt;th>to soc&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>断开-&amp;gt;闭合&lt;/code>&lt;/td>
&lt;td>&lt;code>1-&amp;gt;0&lt;/code>&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;td>无-&amp;gt;有&lt;/td>
&lt;td>&lt;code>1-&amp;gt;0&lt;/code>&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>闭合-&amp;gt;断开&lt;/code>&lt;/td>
&lt;td>&lt;code>0-&amp;gt;1&lt;/code>&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;td>有-&amp;gt;无&lt;/td>
&lt;td>&lt;code>0-&amp;gt;1&lt;/code>&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>PNP&lt;/code>，&lt;code>COM=0&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>开关状态&lt;/th>
&lt;th>&lt;code>IN&lt;/code>&lt;/th>
&lt;th>外部的沿&lt;/th>
&lt;th>光耦间电压差&lt;/th>
&lt;th>&lt;code>GPIO&lt;/code>&lt;/th>
&lt;th>to soc&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>断开-&amp;gt;闭合&lt;/code>&lt;/td>
&lt;td>&lt;code>0-&amp;gt;1&lt;/code>&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;td>无-&amp;gt;有&lt;/td>
&lt;td>&lt;code>1-&amp;gt;0&lt;/code>&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>闭合-&amp;gt;断开&lt;/code>&lt;/td>
&lt;td>&lt;code>1-&amp;gt;0&lt;/code>&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;td>有-&amp;gt;无&lt;/td>
&lt;td>&lt;code>0-&amp;gt;1&lt;/code>&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="full-view">Full View&lt;/h4>
&lt;p>相对更完整的视图&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;code>COM = 1&lt;/code>, &lt;code>NPN&lt;/code>&lt;/th>
&lt;th>&lt;code>COM = 0&lt;/code>, &lt;code>PNP&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;img src="./figures/input_with_npn_plc.png" width="500" alt="input_with_npn_plc" />&lt;/td>
&lt;td>&lt;img src="./figures/input_with_pnp_plc.png" width="500" alt="input_with_pnp_plc" />&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="输出端">输出端：&lt;/h2>
&lt;figure>
&lt;img src="./figures/output.png" alt="" />&lt;figcaption>output&lt;/figcaption>
&lt;/figure>
&lt;h3 id="一些标记-1">一些标记&lt;/h3>
&lt;ul>
&lt;li>右（外）侧
&lt;ul>
&lt;li>&lt;code>OP_OUT0&lt;/code>：外部看到的 &lt;code>OUT0&lt;/code>&lt;/li>
&lt;li>&lt;code>COMOUT0&lt;/code>：外部看到的 OUT 口的 &lt;code>COM&lt;/code> 口&lt;/li>
&lt;li>&lt;code>BCX55&lt;/code>：NPN 三极管&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>左（内）侧
&lt;ul>
&lt;li>&lt;code>RJ45_3V3&lt;/code>：3.3V&lt;/li>
&lt;li>&lt;code>OUT0_V&lt;/code>：连到上级芯片（主芯片），被控制的引脚。&lt;/li>
&lt;/ul>&lt;/li>
&lt;li>中间
&lt;ul>
&lt;li>&lt;code>PS2805&lt;/code> 同 INPUT&lt;/li>
&lt;/ul>&lt;/li>
&lt;/ul>
&lt;h3 id="左内侧电路">左（内）侧电路&lt;/h3>
&lt;ul>
&lt;li>&lt;code>OUT0_V&lt;/code> 低电平，&lt;code>1&lt;/code> &lt;code>2&lt;/code> 之间&lt;strong>有&lt;/strong>电压差，中间的光耦工作。&lt;/li>
&lt;li>&lt;code>OUT0_V&lt;/code> 高电平，&lt;code>1&lt;/code> &lt;code>2&lt;/code> 之间&lt;strong>无&lt;/strong>电压差，中间的光耦不工作。&lt;/li>
&lt;/ul>
&lt;h3 id="右外侧电路">右（外）侧电路&lt;/h3>
&lt;p>如开始所说，我们的输出的外侧需要接外部电源。由于中间的三极管是 &lt;code>NPN&lt;/code>，&lt;code>e&lt;/code>极需接低电平，&lt;code>c&lt;/code>极需接高电平，所以，&lt;code>COMOUT0&lt;/code> 需要连低电平，&lt;code>OP_OUT0 = 1&lt;/code> 需要连接高电平。&lt;/p>
&lt;ul>
&lt;li>停止工作状态：&lt;code>3&lt;/code> &lt;code>4&lt;/code> 引脚间的光敏二极管开路断开，三极管&lt;code>NPN&lt;/code> 的 &lt;code>b&lt;/code> 极电平等于&lt;code>COMOUT0=0&lt;/code>，三极管截止，&lt;code>OP_OUT0&lt;/code> 电压等于外部电压也就是 &lt;code>0&lt;/code>&lt;/li>
&lt;li>工作状态：&lt;code>3&lt;/code> &lt;code>4&lt;/code> 引脚间的光敏二极管导通，三极管&lt;code>NPN&lt;/code> 的 &lt;code>b&lt;/code> 极电平等于&lt;code>OP_OUT0=1&lt;/code>，三极管导通，&lt;code>OP_OUT0&lt;/code> 的电压等于 &lt;code>COMOUT0 + 三极管分压 ~0&lt;/code>（有个问题：为什么不是 &lt;code>COMOUT0&lt;/code> 的电压等于 &lt;code>OP_OUT0&lt;/code> 的电压？这个问题需要考虑负载，但是通常，&lt;code>COM&lt;/code> 口会直连电源的正负极，负载会在 &lt;code>OP_OUT0&lt;/code> 和电源之间，所以这里是 &lt;code>OP_OUT0&lt;/code> 电平被拉到和 &lt;code>COMOUT0&lt;/code> 一致。有点绕，因为这里没有地）&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;code>3&lt;/code> &lt;code>4&lt;/code> 光敏二极管&lt;/th>
&lt;th>&lt;code>NPN&lt;/code> 的 &lt;code>b&lt;/code> 极电压&lt;/th>
&lt;th>三极管状态&lt;/th>
&lt;th>&lt;code>OP_OUT0&lt;/code> 电压&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>断开&lt;/td>
&lt;td>等于&lt;code>COMOUT0=0&lt;/code>&lt;/td>
&lt;td>截止&lt;/td>
&lt;td>初始电压 &lt;code>0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>导通&lt;/td>
&lt;td>等于&lt;code>OP_OUT0&lt;/code> &lt;code>=1&lt;/code>然后略大于 &lt;code>0&lt;/code>&lt;/td>
&lt;td>导通&lt;/td>
&lt;td>拉低 &lt;code>~0+&lt;/code>(三极管分压)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="整体电路-1">整体电路&lt;/h3>
&lt;p>定义：&lt;/p>
&lt;ul>
&lt;li>&lt;code>COMOUT0&lt;/code> 为 &lt;code>COM&lt;/code>&lt;/li>
&lt;li>&lt;code>OP_OUT0&lt;/code> 为 &lt;code>OUT&lt;/code>&lt;/li>
&lt;li>&lt;code>OUT0_V&lt;/code> 为 &lt;code>GPIO&lt;/code>&lt;/li>
&lt;li>高电平为 1， 低电平为 0&lt;/li>
&lt;/ul>
&lt;p>那么：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;/th>
&lt;th>&lt;code>COM = 0&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>GPIO = 1&lt;/code>&lt;/td>
&lt;td>&lt;code>OUT = 1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>GPIO = 0&lt;/code>&lt;/td>
&lt;td>&lt;code>OUT = 0&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="with-plc-side-1">With PLC side&lt;/h3>
&lt;figure>
&lt;img src="./figures/output_with_plc.png" width="500" alt="" />&lt;figcaption>output_wit_plc&lt;/figcaption>
&lt;/figure>
&lt;p>&lt;code>COM=0&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;code>GPIO&lt;/code> 写&lt;/th>
&lt;th>光耦间电压差&lt;/th>
&lt;th>开关状态&lt;/th>
&lt;th>&lt;code>OUT&lt;/code>&lt;/th>
&lt;th>外部的沿&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>1-&amp;gt;0&lt;/code>&lt;/td>
&lt;td>无-&amp;gt;有&lt;/td>
&lt;td>&lt;code>断开-&amp;gt;闭合&lt;/code>&lt;/td>
&lt;td>&lt;code>1-&amp;gt;0&lt;/code>&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>0-&amp;gt;1&lt;/code>&lt;/td>
&lt;td>有-&amp;gt;无&lt;/td>
&lt;td>&lt;code>闭合-&amp;gt;断开&lt;/code>&lt;/td>
&lt;td>&lt;code>1-&amp;gt;0&lt;/code>&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="others">Others&lt;/h2>
&lt;p>最开始说的我们的输出和输入是不带源的，那么如果想让我们的 Output 输出到 Input，需要做的就是外加一个电源。&lt;/p>
&lt;figure>
&lt;img src="./figures/output_to_input.png" width="500" alt="" />&lt;figcaption>output_to_input&lt;/figcaption>
&lt;/figure>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>由于很多机构只关注自己的开关型号和是否有输出（即上文所述的开关的状态）。而我们的软件给的是电平，所以这里也给出相应的结论：&lt;/p>
&lt;h3 id="input-1">Input&lt;/h3>
&lt;p>外部 PLC &lt;code>NPN&lt;/code> （&lt;code>COM=1&lt;/code>）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>开关状态&lt;/th>
&lt;th>外部的沿&lt;/th>
&lt;th>to soc&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>按下&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>松开&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>外部 PLC &lt;code>PNP&lt;/code> （&lt;code>COM=0&lt;/code>）&lt;/p>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>开关状态&lt;/th>
&lt;th>外部的沿&lt;/th>
&lt;th>to soc&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>按下&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>松开&lt;/td>
&lt;td>&lt;code>下降沿&lt;/code>&lt;/td>
&lt;td>&lt;code>上升沿&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="output">Output&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr class="header">
&lt;th>&lt;code>GPIO&lt;/code> 写&lt;/th>
&lt;th>“开关状态”&lt;/th>
&lt;th>外部的电平&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr class="odd">
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;td>按下(有输出)&lt;/td>
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr class="even">
&lt;td>&lt;code>1&lt;/code>&lt;/td>
&lt;td>松开(无输出)&lt;/td>
&lt;td>&lt;code>1&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>当然我们自己的板子是没有所谓的开关状态的，就是方便和外部对状态。&lt;/li>
&lt;li>Kenexs 软件中的输出高低电平是和外部的电平统一的&lt;/li>
&lt;/ul></description></item><item><title>python virtual env and venv</title><link>https://bensyz.github.io/blog/blogs/python_virtual_env/</link><pubDate>Mon, 19 Jun 2023 06:59:23 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/python_virtual_env/</guid><description>&lt;p>pre introduction : stackoverflow &lt;a href="https://stackoverflow.com/a/41573588/13033234">what-is-the-difference-between-venv-pyvenv-pyenv-virtualenv-virtualenvwrappe&lt;/a>&lt;/p>
&lt;p>原先位于 Tips write date: 2021-04-21T00:00:00+08:00&lt;/p>
&lt;h2 id="intro">intro&lt;/h2>
&lt;p>&lt;code>anaconda&lt;/code> 和 &lt;code>miniconda&lt;/code> 是很常用的多版本 python 的管理器，不过我有几点不满意&lt;/p>
&lt;ul>
&lt;li>过于庞大，不够轻量，即使是 miniconda 好像也有 好几百兆&lt;/li>
&lt;li>而且 conda channel 什么的整了好久都没整明白，&lt;/li>
&lt;li>已经有 pip 了为何还要用 conda install&lt;/li>
&lt;/ul>
&lt;p>当然 conda 还提供了一些非 python 的内容，这是 pip 无法做到的，但是这又和 kiss 原则相违背了。&lt;/p>
&lt;h2 id="softwares">softwares&lt;/h2>
&lt;ol type="1">
&lt;li>&lt;code>pyenv&lt;/code>: provide python version&lt;/li>
&lt;li>&lt;code>venv&lt;/code>: provide virtual environment&lt;/li>
&lt;/ol>
&lt;h2 id="working-flow-example">Working flow example&lt;/h2>
&lt;h3 id="configure">Configure&lt;/h3>
&lt;ol type="1">
&lt;li>install another version of python&lt;/li>
&lt;/ol>
&lt;p>2023-06-19 update:&lt;/p>
&lt;p>if you want to generate &lt;code>libpython3.so&lt;/code>&lt;/p>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="fu">env&lt;/span> CONFIGURE_OPTS=&lt;span class="st">&amp;quot;--enable-shared&amp;quot;&lt;/span> pyenv install 3.10&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>2023-05-26 update:&lt;/p>
&lt;div class="sourceCode" id="cb2">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb2-1">&lt;a href="#cb2-1" aria-hidden="true">&lt;/a>&lt;span class="ex">pyenv&lt;/span> install --patch 3.7.9 &lt;span class="op">&amp;lt;&amp;lt; alignment.patch&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>&lt;a href="https://github.com/pyenv/pyenv-virtualenv/issues/410">alignment.patch src&lt;/a>&lt;/p>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode diff">&lt;code class="sourceCode diff">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="kw">--- Include/objimpl.h&lt;/span>&lt;/span>
&lt;span id="cb3-2">&lt;a href="#cb3-2" aria-hidden="true">&lt;/a>&lt;span class="dt">+++ Include/objimpl.h&lt;/span>&lt;/span>
&lt;span id="cb3-3">&lt;a href="#cb3-3" aria-hidden="true">&lt;/a>&lt;span class="dt">@@ -250,7 +250,7 @@&lt;/span>&lt;/span>
&lt;span id="cb3-4">&lt;a href="#cb3-4" aria-hidden="true">&lt;/a> union _gc_head *gc_prev;&lt;/span>
&lt;span id="cb3-5">&lt;a href="#cb3-5" aria-hidden="true">&lt;/a> Py_ssize_t gc_refs;&lt;/span>
&lt;span id="cb3-6">&lt;a href="#cb3-6" aria-hidden="true">&lt;/a> } gc;&lt;/span>
&lt;span id="cb3-7">&lt;a href="#cb3-7" aria-hidden="true">&lt;/a>&lt;span class="st">- double dummy; /* force worst-case alignment */&lt;/span>&lt;/span>
&lt;span id="cb3-8">&lt;a href="#cb3-8" aria-hidden="true">&lt;/a>&lt;span class="va">+ long double dummy; /* force worst-case alignment */&lt;/span>&lt;/span>
&lt;span id="cb3-9">&lt;a href="#cb3-9" aria-hidden="true">&lt;/a> } PyGC_Head;&lt;/span>
&lt;span id="cb3-10">&lt;a href="#cb3-10" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb3-11">&lt;a href="#cb3-11" aria-hidden="true">&lt;/a> extern PyGC_Head *_PyGC_generation0;&lt;/span>
&lt;span id="cb3-12">&lt;a href="#cb3-12" aria-hidden="true">&lt;/a>&lt;span class="kw">--- Objects/obmalloc.c&lt;/span>&lt;/span>
&lt;span id="cb3-13">&lt;a href="#cb3-13" aria-hidden="true">&lt;/a>&lt;span class="dt">+++ Objects/obmalloc.c&lt;/span>&lt;/span>
&lt;span id="cb3-14">&lt;a href="#cb3-14" aria-hidden="true">&lt;/a>&lt;span class="dt">@@ -643,8 +643,8 @@&lt;/span>&lt;/span>
&lt;span id="cb3-15">&lt;a href="#cb3-15" aria-hidden="true">&lt;/a> *&lt;/span>
&lt;span id="cb3-16">&lt;a href="#cb3-16" aria-hidden="true">&lt;/a> * You shouldn&amp;#39;t change this unless you know what you are doing.&lt;/span>
&lt;span id="cb3-17">&lt;a href="#cb3-17" aria-hidden="true">&lt;/a> */&lt;/span>
&lt;span id="cb3-18">&lt;a href="#cb3-18" aria-hidden="true">&lt;/a>&lt;span class="st">-#define ALIGNMENT 8 /* must be 2^N */&lt;/span>&lt;/span>
&lt;span id="cb3-19">&lt;a href="#cb3-19" aria-hidden="true">&lt;/a>&lt;span class="st">-#define ALIGNMENT_SHIFT 3&lt;/span>&lt;/span>
&lt;span id="cb3-20">&lt;a href="#cb3-20" aria-hidden="true">&lt;/a>&lt;span class="va">+#define ALIGNMENT 16 /* must be 2^N */&lt;/span>&lt;/span>
&lt;span id="cb3-21">&lt;a href="#cb3-21" aria-hidden="true">&lt;/a>&lt;span class="va">+#define ALIGNMENT_SHIFT 4&lt;/span>&lt;/span>
&lt;span id="cb3-22">&lt;a href="#cb3-22" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb3-23">&lt;a href="#cb3-23" aria-hidden="true">&lt;/a> /* Return the number of bytes in size class I, as a uint. */&lt;/span>
&lt;span id="cb3-24">&lt;a href="#cb3-24" aria-hidden="true">&lt;/a> #define INDEX2SIZE(I) (((uint)(I) + 1) &amp;lt;&amp;lt; ALIGNMENT_SHIFT)&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ol start="2" type="1">
&lt;li>Add that python to &lt;code>$PATH&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="sourceCode" id="cb4">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb4-1">&lt;a href="#cb4-1" aria-hidden="true">&lt;/a>&lt;span class="co"># default python be python 3.7.9&lt;/span>&lt;/span>
&lt;span id="cb4-2">&lt;a href="#cb4-2" aria-hidden="true">&lt;/a>&lt;span class="bu">export&lt;/span> &lt;span class="va">PYENV_ROOT=&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$HOME&lt;/span>&lt;span class="st">/.pyenv/versions/3.7.9/&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb4-3">&lt;a href="#cb4-3" aria-hidden="true">&lt;/a>&lt;span class="bu">export&lt;/span> &lt;span class="va">PATH=&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$PYENV_ROOT&lt;/span>&lt;span class="st">/bin:&lt;/span>&lt;span class="va">$PATH&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ol start="3" type="1">
&lt;li>Create virtual environment, there will be python command in &lt;code>.venv/3.6/bin&lt;/code>, but it is a link to current &lt;code>python&lt;/code>.&lt;/li>
&lt;/ol>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="co"># create virtual environment&lt;/span>&lt;/span>
&lt;span id="cb5-2">&lt;a href="#cb5-2" aria-hidden="true">&lt;/a>&lt;span class="bu">cd&lt;/span> ~/.venv&lt;/span>
&lt;span id="cb5-3">&lt;a href="#cb5-3" aria-hidden="true">&lt;/a>&lt;span class="ex">python&lt;/span> -m venv 3.7&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ol start="4" type="1">
&lt;li>Active and deactivate it&lt;/li>
&lt;/ol>
&lt;div class="sourceCode" id="cb6">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb6-1">&lt;a href="#cb6-1" aria-hidden="true">&lt;/a>&lt;span class="bu">source&lt;/span> ~/.venv/3.7/bin/activate&lt;/span>
&lt;span id="cb6-2">&lt;a href="#cb6-2" aria-hidden="true">&lt;/a>&lt;span class="ex">deactivate&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>&lt;code>export&lt;/code> in the 2nd is no needed this time.&lt;/p>
&lt;h3 id="reuse">Reuse&lt;/h3>
&lt;p>Active and deactivate it&lt;/p>
&lt;div class="sourceCode" id="cb7">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb7-1">&lt;a href="#cb7-1" aria-hidden="true">&lt;/a>&lt;span class="bu">source&lt;/span> ~/.venv/3.6/bin/activate&lt;/span>
&lt;span id="cb7-2">&lt;a href="#cb7-2" aria-hidden="true">&lt;/a>&lt;span class="ex">deactivate&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>you can check if it’s enalbed by:&lt;/p>
&lt;pre>&lt;code>which python3
which pip3&lt;/code>&lt;/pre>
&lt;h3 id="others">others&lt;/h3>
&lt;p>Set pyenv as default, not recommend:&lt;/p>
&lt;div class="sourceCode" id="cb9">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb9-1">&lt;a href="#cb9-1" aria-hidden="true">&lt;/a>&lt;span class="co"># .zshrc&lt;/span>&lt;/span>
&lt;span id="cb9-2">&lt;a href="#cb9-2" aria-hidden="true">&lt;/a>&lt;span class="co"># pyenv&lt;/span>&lt;/span>
&lt;span id="cb9-3">&lt;a href="#cb9-3" aria-hidden="true">&lt;/a>&lt;span class="bu">export&lt;/span> &lt;span class="va">PYENV_ROOT=&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$HOME&lt;/span>&lt;span class="st">/.pyenv&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb9-4">&lt;a href="#cb9-4" aria-hidden="true">&lt;/a>&lt;span class="bu">export&lt;/span> &lt;span class="va">PATH=&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$PYENV_ROOT&lt;/span>&lt;span class="st">/bin:&lt;/span>&lt;span class="va">$PATH&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb9-5">&lt;a href="#cb9-5" aria-hidden="true">&lt;/a>&lt;span class="kw">if&lt;/span> &lt;span class="bu">command&lt;/span> -v pyenv &lt;span class="op">1&amp;gt;&lt;/span>/dev/null &lt;span class="op">2&amp;gt;&amp;amp;1&lt;/span>&lt;span class="kw">;&lt;/span> &lt;span class="kw">then&lt;/span>&lt;/span>
&lt;span id="cb9-6">&lt;a href="#cb9-6" aria-hidden="true">&lt;/a> &lt;span class="bu">eval&lt;/span> &lt;span class="st">&amp;quot;&lt;/span>&lt;span class="va">$(&lt;/span>&lt;span class="ex">pyenv&lt;/span> init -&lt;span class="va">)&lt;/span>&lt;span class="st">&amp;quot;&lt;/span>&lt;/span>
&lt;span id="cb9-7">&lt;a href="#cb9-7" aria-hidden="true">&lt;/a>&lt;span class="kw">fi&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>qt creator remote deploy and debug</title><link>https://bensyz.github.io/blog/blogs/qt_creator_remote_deploy/</link><pubDate>Tue, 13 Jun 2023 06:27:03 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/qt_creator_remote_deploy/</guid><description>&lt;h2 id="machines">machines&lt;/h2>
&lt;ul>
&lt;li>target (aarch64)&lt;/li>
&lt;li>host (AMD64)&lt;/li>
&lt;/ul>
&lt;p>cross compile on AMD64, run on aarch64&lt;/p>
&lt;h2 id="softwares">softwares&lt;/h2>
&lt;h3 id="on-target">on target&lt;/h3>
&lt;ul>
&lt;li>basic: gdbserver&lt;/li>
&lt;li>others: known from qt creator&lt;/li>
&lt;/ul>
&lt;h3 id="on-host">on host&lt;/h3>
&lt;ul>
&lt;li>basic: gdb-multiarch&lt;/li>
&lt;/ul>
&lt;h2 id="config">config&lt;/h2>
&lt;h3 id="pro">pro&lt;/h3>
&lt;pre class="config">&lt;code>target.path=/tmp
INSTALLS += target&lt;/code>&lt;/pre>
&lt;h3 id="kits">kits&lt;/h3>
&lt;ol type="1">
&lt;li>add debugger(gdb-multiarch)&lt;/li>
&lt;li>config the kit with above debugger&lt;/li>
&lt;/ol></description></item><item><title>makeself 和 .run 文件</title><link>https://bensyz.github.io/blog/blogs/makeself_run/</link><pubDate>Mon, 12 Jun 2023 11:05:23 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/makeself_run/</guid><description>&lt;h2 id="什么是-makeself-以及-.run-文件是什么">什么是 makeself 以及 .run 文件是什么&lt;/h2>
&lt;p>简单来说，makeself 把一些文件打成压缩包，然后把这个压缩包打包成 POSIX sh 脚本。&lt;/p>
&lt;p>很多巨大 &lt;code>xxx.run&lt;/code> 文件或者 &lt;code>.sh&lt;/code> 就是 &lt;code>makself&lt;/code> 打出来的，它不是简单的一个 shell 脚本，它自包含了压缩包。(当然 Linux 中扩展名无关紧要，只是 .run 通常是)&lt;code>NVIDIA-Linux-xxx.run&lt;/code> 就是用这个打出来的。印象当中 &lt;code>Mathematica&lt;/code> 的 &lt;code>Mathematica_13.2.1_LINUX.sh&lt;/code> 好像也是这个打出来的。&lt;/p>
&lt;h3 id="如何使用-makeself">如何使用 makeself&lt;/h3>
&lt;h2 id="如何打包">如何打包：&lt;/h2>
&lt;p>如下目录结构&lt;/p>
&lt;pre class="tree">&lt;code>.
└── dir
├── file1
├── file2
└── install.sh&lt;/code>&lt;/pre>
&lt;div class="sourceCode" id="cb2">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb2-1">&lt;a href="#cb2-1" aria-hidden="true">&lt;/a>&lt;span class="ex">makeself&lt;/span> dir test_makeself.run v0.1 ./install.sh&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>就会在当前目录生成 &lt;code>./test_makeself.run&lt;/code>&lt;/p>
&lt;p>更多参数详见 man.&lt;/p>
&lt;h2 id="如何查看包">如何查看包&lt;/h2>
&lt;p>&lt;strong>警告&lt;/strong>：这个脚本是很随意的，所以下面的参数只是通常情况下可能支持的参数。请一定要确保脚本是来自于可信源，否则有可能你只是想查看帮助，实际上执行了恶意程序。&lt;/p>
&lt;h3 id="帮助">帮助&lt;/h3>
&lt;pre>&lt;code>./test_makeself.run --help&lt;/code>&lt;/pre>
&lt;h3 id="查看解包后执行的脚本和参数">查看解包后执行的脚本和参数&lt;/h3>
&lt;pre class="console">&lt;code> ➜ ./test_makeself.run --info
Identification: v0.1
Target directory: dir
Uncompressed size: 4 KB
Compression: gzip
Encryption: n
Date of packaging: Mon Jun 12 19:23:34 CST 2023
Built with Makeself version 2.5.0
Build command was: /usr/bin/makeself \
&amp;quot;dir&amp;quot; \
&amp;quot;test_makeself.run&amp;quot; \
&amp;quot;v0.1&amp;quot; \
&amp;quot;./install.sh&amp;quot;
Script run after extraction:
./install.sh
dir will be removed after extraction&lt;/code>&lt;/pre>
&lt;h3 id="解包">解包&lt;/h3>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="ex">./test_makeself.run&lt;/span> --noexec --target extract_dir&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="tree">&lt;code>extract_dir
├── file1
├── file2
└── install.sh&lt;/code>&lt;/pre></description></item><item><title>gcc support __FILE_NAME__ macro</title><link>https://bensyz.github.io/blog/blogs/gcc_support_filename_macro/</link><pubDate>Fri, 02 Jun 2023 07:48:40 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/gcc_support_filename_macro/</guid><description>&lt;h2 id="update">2023-06-06 update:&lt;/h2>
&lt;p>windows does not support shell basename. Makefile native support &lt;code>basname&lt;/code> like, it’s &lt;code>notdir&lt;/code>.&lt;/p>
&lt;h2 id="contents">contents&lt;/h2>
&lt;p>Since gcc-12, gcc native support &lt;code>__FILE_NAME__&lt;/code> macro. &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=42579">ref&lt;/a>&lt;/p>
&lt;p>Here we provide some methods to make gcc version lower than 12 support &lt;code>__FILE_NAME__&lt;/code>:&lt;/p>
&lt;p>Makefile:&lt;/p>
&lt;pre class="make">&lt;code>CXX_FLAGS+=-D__FILE_NAME__=\&amp;quot;$(notdir $&amp;lt;)\&amp;quot;
test: test.c
gcc-7 $(CXX_FLAGS) $&amp;lt;&lt;/code>&lt;/pre>
&lt;p>Qt pro:&lt;/p>
&lt;pre class="config">&lt;code>DEFINES += &amp;#39;__FILE_NAME__=\\\&amp;quot;$(notdir $&amp;lt;)\\\&amp;quot;&amp;#39;&lt;/code>&lt;/pre>
&lt;p>Some information of macro is at &lt;a href="../macro_in_gcc_Makefile_qmake">here&lt;/a>.&lt;/p></description></item><item><title>macro set in gcc, Makefile, qmake</title><link>https://bensyz.github.io/blog/blogs/macro_in_gcc_Makefile_qmake/</link><pubDate>Fri, 02 Jun 2023 07:44:40 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/macro_in_gcc_Makefile_qmake/</guid><description>&lt;h2 id="gcc">gcc&lt;/h2>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="fu">gcc&lt;/span> -DHello=&lt;span class="dt">\&amp;quot;&lt;/span>hey&lt;span class="dt">\&amp;quot;&lt;/span> main.c&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="makefile">Makefile&lt;/h2>
&lt;pre class="make">&lt;code>CFLAGS = -DHello=\&amp;quot;hey\&amp;quot;&lt;/code>&lt;/pre>
&lt;h2 id="qmake">qmake&lt;/h2>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode sh">&lt;code class="sourceCode bash">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="fu">qmake&lt;/span> &lt;span class="st">&amp;#39;DEFINES += Hello=\\\&amp;quot;abc\\\&amp;quot;&amp;#39;&lt;/span> test_macro.pro&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="config">&lt;code>DEFINES += Hello=\\\&amp;quot;abc\\\&amp;quot;&lt;/code>&lt;/pre>
&lt;p>关于 &lt;code>\\\"&lt;/code> 的解释&lt;/p>
&lt;ul>
&lt;li>&lt;code>\\&lt;/code> 输出makefile里的&lt;code>\&lt;/code>&lt;/li>
&lt;li>&lt;code>\"&lt;/code> 输出makefile里的&lt;code>"&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>struct initialization in C Lang</title><link>https://bensyz.github.io/blog/blogs/struct_initialization_in_C_Lang/</link><pubDate>Sat, 20 May 2023 17:49:48 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/struct_initialization_in_C_Lang/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>看内核源码关于任务初始化的时候看到一个很奇怪的写法：&lt;code>struct task_struct init_task = INIT_TASK(init_task);&lt;/code>，一个没被定义变量怎么可以传给一个函数，用来 初始化它自己。&lt;/p>
&lt;p>我们把原始代码用一下这个 demo 展示：&lt;/p>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="kw">struct&lt;/span> myStruct {&lt;/span>
&lt;span id="cb1-2">&lt;a href="#cb1-2" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> myStruct *self;&lt;/span>
&lt;span id="cb1-3">&lt;a href="#cb1-3" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> a;&lt;/span>
&lt;span id="cb1-4">&lt;a href="#cb1-4" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> b;&lt;/span>
&lt;span id="cb1-5">&lt;a href="#cb1-5" aria-hidden="true">&lt;/a>};&lt;/span>
&lt;span id="cb1-6">&lt;a href="#cb1-6" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-7">&lt;a href="#cb1-7" aria-hidden="true">&lt;/a>&lt;span class="pp">#define INIT_TASK(tsk){\&lt;/span>&lt;/span>
&lt;span id="cb1-8">&lt;a href="#cb1-8" aria-hidden="true">&lt;/a>&lt;span class="pp"> .self = &amp;amp;tsk, \&lt;/span>&lt;/span>
&lt;span id="cb1-9">&lt;a href="#cb1-9" aria-hidden="true">&lt;/a>&lt;span class="pp"> .a = 0, \&lt;/span>&lt;/span>
&lt;span id="cb1-10">&lt;a href="#cb1-10" aria-hidden="true">&lt;/a>&lt;span class="pp"> .b = 1, \&lt;/span>&lt;/span>
&lt;span id="cb1-11">&lt;a href="#cb1-11" aria-hidden="true">&lt;/a>&lt;span class="pp">}&lt;/span>&lt;/span>
&lt;span id="cb1-12">&lt;a href="#cb1-12" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-13">&lt;a href="#cb1-13" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main() {&lt;/span>
&lt;span id="cb1-14">&lt;a href="#cb1-14" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> myStruct init_task = INIT_TASK(init_task);&lt;/span>
&lt;span id="cb1-15">&lt;a href="#cb1-15" aria-hidden="true">&lt;/a> &lt;span class="co">/*&lt;/span>&lt;/span>
&lt;span id="cb1-16">&lt;a href="#cb1-16" aria-hidden="true">&lt;/a>&lt;span class="co"> * 展开后：&lt;/span>&lt;/span>
&lt;span id="cb1-17">&lt;a href="#cb1-17" aria-hidden="true">&lt;/a>&lt;span class="co"> * struct myStruct init_task = { .self = &amp;amp;init_task, .a = 0, .b = 1, };&lt;/span>&lt;/span>
&lt;span id="cb1-18">&lt;a href="#cb1-18" aria-hidden="true">&lt;/a>&lt;span class="co"> */&lt;/span>&lt;/span>
&lt;span id="cb1-19">&lt;a href="#cb1-19" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb1-20">&lt;a href="#cb1-20" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="whats-this">What’s this?&lt;/h2>
&lt;ol type="1">
&lt;li>&lt;code>INIT_TASK&lt;/code> 是一个宏，由于宏是在编译时展开，所以 &lt;code>init_task&lt;/code> 其实并不是作为 参数被传入的，而是在这里展开。同时 &lt;code>INIT_TASK&lt;/code> 只用了 &lt;code>init_task&lt;/code> 的地址，而 并没有用 &lt;code>init_task&lt;/code> 这个结构体本身。&lt;/li>
&lt;li>&lt;code>{.self = &amp;amp;tsk, .a = 0, .b = 1,}&lt;/code> 是什么？结构体的初始化。&lt;/li>
&lt;/ol>
&lt;h3 id="何时分配-init_task-的地址">何时分配 &lt;code>init_task&lt;/code> 的地址&lt;/h3>
&lt;p>那 &lt;code>init_task&lt;/code> 的地址是在什么时候分配的呢？这个结构体的赋值有些复杂，因为涉及到 取址。我们看一个简单的例子：&lt;/p>
&lt;div class="sourceCode" id="cb2">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb2-1">&lt;a href="#cb2-1" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(){&lt;/span>
&lt;span id="cb2-2">&lt;a href="#cb2-2" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> a = &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb2-3">&lt;a href="#cb2-3" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb2-4">&lt;a href="#cb2-4" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="sourceCode" id="cb3">&lt;pre class="sourceCode asm">&lt;code class="sourceCode fasm">&lt;span id="cb3-1">&lt;a href="#cb3-1" aria-hidden="true">&lt;/a>&lt;span class="bu">push&lt;/span> %&lt;span class="kw">rbp&lt;/span>&lt;/span>
&lt;span id="cb3-2">&lt;a href="#cb3-2" aria-hidden="true">&lt;/a>&lt;span class="bu">mov&lt;/span> %&lt;span class="kw">rsp&lt;/span>,%&lt;span class="kw">rbp&lt;/span>&lt;/span>
&lt;span id="cb3-3">&lt;a href="#cb3-3" aria-hidden="true">&lt;/a>movl &lt;span class="dv">$&lt;/span>&lt;span class="bn">0x0,&lt;/span>-&lt;span class="bn">0x4&lt;/span>(%&lt;span class="kw">rbp&lt;/span>)&lt;/span>
&lt;span id="cb3-4">&lt;a href="#cb3-4" aria-hidden="true">&lt;/a>&lt;span class="bu">mov&lt;/span> &lt;span class="dv">$&lt;/span>&lt;span class="bn">0x0,&lt;/span>%&lt;span class="kw">eax&lt;/span>&lt;/span>
&lt;span id="cb3-5">&lt;a href="#cb3-5" aria-hidden="true">&lt;/a>&lt;span class="bu">pop&lt;/span> %&lt;span class="kw">rbp&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;pre class="gdb">&lt;code>(gdb) p &amp;amp;a
$1 = (int *) 0x7fffffffd5cc
(gdb) p $rbp
$2 = (void *) 0x7fffffffd5d0
# 基地址 rbp: 0x7fffffffd5d0
# movl $0x0,-0x4(%rbp) 将 0x0 赋值给 rbp-4 也就是 0x7fffffffd5cc&lt;/code>&lt;/pre>
&lt;p>所以这些栈上的变量的地址是基于 &lt;code>rbp&lt;/code> 的，也就是说相对地址是由汇编代码决定的，而 汇编代码来自 C 的代码。也就是这份代码结构决定了变量 a 的地址的存在。&lt;/p>
&lt;h4 id="验证是否可以用函数来替代宏">验证：是否可以用函数来替代宏&lt;/h4>
&lt;p>既然我们说，宏（&lt;code>INIT_TASK&lt;/code>）只使用了 &lt;code>init_task&lt;/code> 的地址，而 &lt;code>init_task&lt;/code> 的地址 是由这份代码结构决定的。也就是说看起来传参传的是一个未定的变量（&lt;code>init_task&lt;/code>）， 其实传的是一个固定的值（&lt;code>&amp;amp;init_task&lt;/code>）。那这完全符合函数的操作。&lt;/p>
&lt;div class="sourceCode" id="cb5">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb5-1">&lt;a href="#cb5-1" aria-hidden="true">&lt;/a>&lt;span class="kw">struct&lt;/span> myStruct {&lt;/span>
&lt;span id="cb5-2">&lt;a href="#cb5-2" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> myStruct *self;&lt;/span>
&lt;span id="cb5-3">&lt;a href="#cb5-3" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> a;&lt;/span>
&lt;span id="cb5-4">&lt;a href="#cb5-4" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> b;&lt;/span>
&lt;span id="cb5-5">&lt;a href="#cb5-5" aria-hidden="true">&lt;/a>};&lt;/span>
&lt;span id="cb5-6">&lt;a href="#cb5-6" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb5-7">&lt;a href="#cb5-7" aria-hidden="true">&lt;/a>&lt;span class="kw">struct&lt;/span> myStruct FUNC_INIT_TASK(&lt;span class="kw">struct&lt;/span> myStruct * tsk){&lt;/span>
&lt;span id="cb5-8">&lt;a href="#cb5-8" aria-hidden="true">&lt;/a> tsk-&amp;gt;self = tsk;&lt;/span>
&lt;span id="cb5-9">&lt;a href="#cb5-9" aria-hidden="true">&lt;/a> tsk-&amp;gt;a=&lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb5-10">&lt;a href="#cb5-10" aria-hidden="true">&lt;/a> tsk-&amp;gt;b=&lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb5-11">&lt;a href="#cb5-11" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> *tsk;&lt;/span>
&lt;span id="cb5-12">&lt;a href="#cb5-12" aria-hidden="true">&lt;/a>}&lt;/span>
&lt;span id="cb5-13">&lt;a href="#cb5-13" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb5-14">&lt;a href="#cb5-14" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main() {&lt;/span>
&lt;span id="cb5-15">&lt;a href="#cb5-15" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> myStruct func_init_task = FUNC_INIT_TASK(&amp;amp;func_init_task);&lt;/span>
&lt;span id="cb5-16">&lt;a href="#cb5-16" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb5-17">&lt;a href="#cb5-17" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="结构体内部用结构体本身">结构体内部用结构体本身？&lt;/h3>
&lt;p>我们把 &lt;code>&amp;amp;init_task&lt;/code> 赋给了 &lt;code>init_task.self&lt;/code>，看起来有点像“鸡生蛋，蛋生鸡”的问题， 其实不然，就像上节中说的，&lt;code>&amp;amp;init_task&lt;/code> 和 &lt;code>init_task&lt;/code> 是两回事，对 &lt;code>&amp;amp;init_task&lt;/code> 我们只是借用了 &lt;code>init_task&lt;/code> 来取到这个地址。来看一个真正的“鸡生蛋，蛋生鸡”的代码：&lt;/p>
&lt;div class="sourceCode" id="cb6">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb6-1">&lt;a href="#cb6-1" aria-hidden="true">&lt;/a>&lt;span class="kw">struct&lt;/span> myStruct {&lt;/span>
&lt;span id="cb6-2">&lt;a href="#cb6-2" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> myStruct self; &lt;span class="co">// field has incomplete type &amp;#39;struct myStruct&amp;#39; (ccls 2)&lt;/span>&lt;/span>
&lt;span id="cb6-3">&lt;a href="#cb6-3" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> a;&lt;/span>
&lt;span id="cb6-4">&lt;a href="#cb6-4" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> b;&lt;/span>
&lt;span id="cb6-5">&lt;a href="#cb6-5" aria-hidden="true">&lt;/a>};&lt;/span>
&lt;span id="cb6-6">&lt;a href="#cb6-6" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb6-7">&lt;a href="#cb6-7" aria-hidden="true">&lt;/a>&lt;span class="pp">#define INIT_TASK(tsk){\&lt;/span>&lt;/span>
&lt;span id="cb6-8">&lt;a href="#cb6-8" aria-hidden="true">&lt;/a>&lt;span class="pp"> .self = tsk, \&lt;/span>&lt;/span>
&lt;span id="cb6-9">&lt;a href="#cb6-9" aria-hidden="true">&lt;/a>&lt;span class="pp"> .a = 0, \&lt;/span>&lt;/span>
&lt;span id="cb6-10">&lt;a href="#cb6-10" aria-hidden="true">&lt;/a>&lt;span class="pp"> .b = 1, \&lt;/span>&lt;/span>
&lt;span id="cb6-11">&lt;a href="#cb6-11" aria-hidden="true">&lt;/a>&lt;span class="pp">}&lt;/span>&lt;/span>
&lt;span id="cb6-12">&lt;a href="#cb6-12" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb6-13">&lt;a href="#cb6-13" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main() {&lt;/span>
&lt;span id="cb6-14">&lt;a href="#cb6-14" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> myStruct init_task = INIT_TASK(init_task);&lt;/span>
&lt;span id="cb6-15">&lt;a href="#cb6-15" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb6-16">&lt;a href="#cb6-16" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>我们会发现，linter 直接在定义结构体的时候就报错了，因为它不知道 &lt;code>myStruct&lt;/code> 有多 大，或者说这种定义本身就是一种矛盾：外部的 &lt;code>myStruct&lt;/code> 一定比内部的 &lt;code>myStruct&lt;/code> 大两个 &lt;code>int&lt;/code> 的大小。&lt;/p>
&lt;p>其实这个看似“鸡生蛋，蛋生鸡”的问题我们在数据结构中写链表的时候就用到了。&lt;/p>
&lt;p>另外，对 64 bit 的 Linux 来说，这个 &lt;code>struct myStruct *self&lt;/code> 的本质其实是 &lt;code>long&lt;/code>。 关于各个变量的长度，有机会再聊聊，Linux 的 long 和 Windows 的 long 是不一样的。 （TODO）&lt;/p></description></item><item><title>about nested struct and anonymous struct in c</title><link>https://bensyz.github.io/blog/blogs/about_nested_struct_and_anonymous_struct_in_c/</link><pubDate>Sat, 20 May 2023 16:55:23 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/about_nested_struct_and_anonymous_struct_in_c/</guid><description>&lt;p>看书的时候没明白一个 macro 的用法，搜了一下，发现这个&lt;a href="https://stackoverflow.com/questions/58346036/c-c-macro-parameter-containing-dot-member-access-operator">问题&lt;/a>，发现看不懂他写的结构体的问题。自己尝试写了几个例子发现了 anonymous struct，觉得用法很奇怪，又搜到了这个&lt;a href="https://stackoverflow.com/questions/38457109/c-how-to-access-different-types-of-anonymous-or-unnamed-nested-structs/38457240">问题&lt;/a>，一下把我能想到的关于结构体的情况都写出来了&lt;/p>
&lt;div class="sourceCode" id="cb1">&lt;pre class="sourceCode c">&lt;code class="sourceCode c">&lt;span id="cb1-1">&lt;a href="#cb1-1" aria-hidden="true">&lt;/a>&lt;span class="kw">struct&lt;/span> s {&lt;/span>
&lt;span id="cb1-2">&lt;a href="#cb1-2" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> abc;&lt;/span>
&lt;span id="cb1-3">&lt;a href="#cb1-3" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-4">&lt;a href="#cb1-4" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> {&lt;/span>
&lt;span id="cb1-5">&lt;a href="#cb1-5" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> a;&lt;/span>
&lt;span id="cb1-6">&lt;a href="#cb1-6" aria-hidden="true">&lt;/a> };&lt;/span>
&lt;span id="cb1-7">&lt;a href="#cb1-7" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-8">&lt;a href="#cb1-8" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> {&lt;/span>
&lt;span id="cb1-9">&lt;a href="#cb1-9" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> b;&lt;/span>
&lt;span id="cb1-10">&lt;a href="#cb1-10" aria-hidden="true">&lt;/a> } intern;&lt;/span>
&lt;span id="cb1-11">&lt;a href="#cb1-11" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-12">&lt;a href="#cb1-12" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> i {&lt;/span>
&lt;span id="cb1-13">&lt;a href="#cb1-13" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> c;&lt;/span>
&lt;span id="cb1-14">&lt;a href="#cb1-14" aria-hidden="true">&lt;/a> };&lt;/span>
&lt;span id="cb1-15">&lt;a href="#cb1-15" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-16">&lt;a href="#cb1-16" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> i2 {&lt;/span>
&lt;span id="cb1-17">&lt;a href="#cb1-17" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> d;&lt;/span>
&lt;span id="cb1-18">&lt;a href="#cb1-18" aria-hidden="true">&lt;/a> } intern2;&lt;/span>
&lt;span id="cb1-19">&lt;a href="#cb1-19" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-20">&lt;a href="#cb1-20" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> i3 {&lt;/span>
&lt;span id="cb1-21">&lt;a href="#cb1-21" aria-hidden="true">&lt;/a> &lt;span class="dt">int&lt;/span> e;&lt;/span>
&lt;span id="cb1-22">&lt;a href="#cb1-22" aria-hidden="true">&lt;/a> };&lt;/span>
&lt;span id="cb1-23">&lt;a href="#cb1-23" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> i3 intern3;&lt;/span>
&lt;span id="cb1-24">&lt;a href="#cb1-24" aria-hidden="true">&lt;/a>};&lt;/span>
&lt;span id="cb1-25">&lt;a href="#cb1-25" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-26">&lt;a href="#cb1-26" aria-hidden="true">&lt;/a>&lt;span class="kw">struct&lt;/span> i3 AA;&lt;/span>
&lt;span id="cb1-27">&lt;a href="#cb1-27" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-28">&lt;a href="#cb1-28" aria-hidden="true">&lt;/a>&lt;span class="dt">int&lt;/span> main(&lt;span class="dt">int&lt;/span> argc, &lt;span class="dt">char&lt;/span> &lt;span class="dt">const&lt;/span> *argv[])&lt;/span>
&lt;span id="cb1-29">&lt;a href="#cb1-29" aria-hidden="true">&lt;/a>{&lt;/span>
&lt;span id="cb1-30">&lt;a href="#cb1-30" aria-hidden="true">&lt;/a> &lt;span class="kw">struct&lt;/span> s mystruct;&lt;/span>
&lt;span id="cb1-31">&lt;a href="#cb1-31" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-32">&lt;a href="#cb1-32" aria-hidden="true">&lt;/a> mystruct.abc = &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb1-33">&lt;a href="#cb1-33" aria-hidden="true">&lt;/a> mystruct.a = &lt;span class="dv">1&lt;/span>;&lt;/span>
&lt;span id="cb1-34">&lt;a href="#cb1-34" aria-hidden="true">&lt;/a> mystruct.intern.b = &lt;span class="dv">2&lt;/span>;&lt;/span>
&lt;span id="cb1-35">&lt;a href="#cb1-35" aria-hidden="true">&lt;/a> mystruct.c = &lt;span class="dv">3&lt;/span>; &lt;span class="co">// &amp;lt;-- does not compile&lt;/span>&lt;/span>
&lt;span id="cb1-36">&lt;a href="#cb1-36" aria-hidden="true">&lt;/a> mystruct.intern2.d = &lt;span class="dv">4&lt;/span>;&lt;/span>
&lt;span id="cb1-37">&lt;a href="#cb1-37" aria-hidden="true">&lt;/a> mystruct.intern3.e = &lt;span class="dv">5&lt;/span>;&lt;/span>
&lt;span id="cb1-38">&lt;a href="#cb1-38" aria-hidden="true">&lt;/a> AA.e=&lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb1-39">&lt;a href="#cb1-39" aria-hidden="true">&lt;/a>&lt;/span>
&lt;span id="cb1-40">&lt;a href="#cb1-40" aria-hidden="true">&lt;/a> &lt;span class="cf">return&lt;/span> &lt;span class="dv">0&lt;/span>;&lt;/span>
&lt;span id="cb1-41">&lt;a href="#cb1-41" aria-hidden="true">&lt;/a>}&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>两个回答都很好：&lt;/p>
&lt;blockquote>
&lt;p>Regarding anonymous structure, quoting C11, chapter §6.7.2.1, (emphasis mine)&lt;/p>
&lt;blockquote>
&lt;p>An unnamed member whose type specifier is a structure specifier with no tag is called an anonymous structure; an unnamed member whose type specifier is a union specifier with no tag is called an anonymous union. The members of an anonymous structure or union are considered to be members of the containing structure or union. This applies recursively if the containing structure or union is also anonymous.&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>说明了 anonymous struct 访问内部变量这种奇怪的 &lt;code>.&lt;/code> 法。&lt;/p>
&lt;blockquote>
&lt;p>Member c is declared inside inside strut i. And you are not creating any variable for struct i&lt;/p>
&lt;/blockquote>
&lt;p>这个回答看起来没说什么，其实说明了 &lt;code>struct i&lt;/code> 在 struct 内部的声明（可能不叫声明）等同于放在外面，也解释了 warning 的问题。（其实不等同，不然不会有这个 warning 了）&lt;/p>
&lt;p>&lt;a href="./res/example.c">example.c&lt;/a>&lt;/p></description></item><item><title>about effective voltage and rms</title><link>https://bensyz.github.io/blog/blogs/about_effective_voltage_and_rms/</link><pubDate>Fri, 21 Apr 2023 15:18:29 +0800</pubDate><guid>https://bensyz.github.io/blog/blogs/about_effective_voltage_and_rms/</guid><description>&lt;h2 id="effective-voltage-of-sinusoidal">Effective voltage of sinusoidal&lt;/h2>
&lt;p>In alternating current, to simplify the calculation, we often use effective voltage or current.&lt;/p>
&lt;p>Since I haven’t touched these knowledge points for a long time. I almost forgot how to get the effective voltage and what’s the relation of effective voltage with rms (root mean square). So this is about the derivation of effective voltage.&lt;/p>
&lt;p>Effective voltage is always used in calculating power or energy during a time. So we start from the expression of power, because voltage and current change with time, we first calculate the energy in time &lt;span class="math inline">\(dt\)&lt;/span>, then integrate.&lt;/p>
&lt;p>&lt;span class="math display">\[
P(t) = U(t)^2 / R
\]&lt;/span>&lt;/p>
&lt;p>Energy expose in &lt;span class="math inline">\(dt\)&lt;/span> is&lt;/p>
&lt;p>&lt;span class="math display">\[
P(t) dt = \frac{1}{R} U(t)^2dt
\]&lt;/span>&lt;/p>
&lt;p>Integrate it:&lt;/p>
&lt;p>&lt;span class="math display">\[
E_\text{one period} = \int_{0}^{T} \frac{1}{R} U(t)^2 dt
\]&lt;/span>&lt;/p>
&lt;p>While &lt;span class="math inline">\(U(t)\)&lt;/span> is sinusoidal function in A.C we assume it to be &lt;span class="math inline">\(U(t) = U_\text{m}\sin(2\pi/T \times t)\)&lt;/span>(when &lt;span class="math inline">\(t=T\)&lt;/span>, sine goes to its end of one period &lt;span class="math inline">\(2\pi\)&lt;/span>), in which &lt;span class="math inline">\(U_\text{m}\)&lt;/span> is maximum voltage, or we can call it amplitude, thus,&lt;/p>
&lt;p>&lt;span class="math display">\[
\begin{aligned}
E_\text{one period}
&amp;amp;= \frac{U_\text{m}^2}{R} \int_{0}^{T} \sin^2(\frac{2\pi}{T}t) dt \\
&amp;amp;= \frac{U_\text{m}^2}{R} \times \frac{1}{2} \int_{0}^{T} (1-\cos(2\frac{2\pi}{T}t)) dt \\
&amp;amp;= \frac{U_\text{m}^2}{2R}\left(T-0 + \frac{T}{4\pi} \sin(\frac{4\pi}{T} \times T) -0\right) \\
&amp;amp;=\frac{U_\text{m}^2}{2R} \times T
\end{aligned}
\]&lt;/span>&lt;/p>
&lt;p>What is a effective voltage? With this we can treat AC as DC, thus&lt;/p>
&lt;p>&lt;span class="math display">\[
E_\text{one period} = U_\text{eff}^2 / R \times T
\]&lt;/span>&lt;/p>
&lt;p>Thus for a sinusoidal voltage,&lt;/p>
&lt;p>&lt;span class="math display">\[
U_\text{eff} = \sqrt{R E_\text{one period}/T} = \sqrt{R \frac{U_\text{m}^2}{2R} \times T /T}
= \frac{1}{\sqrt{2}} U_m
\]&lt;/span>&lt;/p>
&lt;h3 id="rms">RMS&lt;/h3>
&lt;p>If we not introduce sinusoidal, the effective U is &lt;span class="math display">\[
U_\text{eff} = \sqrt{R E_\text{one period}/T} = \sqrt{\frac{1}{T} \int_{0}^{T}U(t)^2dt}
\]&lt;/span>&lt;/p>
&lt;p>which happens to be the root mean square:&lt;/p>
&lt;p>&lt;span class="math display">\[
U_\text{rms} \equiv \sqrt{\frac{\sum U^2}{n}}
\]&lt;/span>&lt;/p>
&lt;p>or&lt;/p>
&lt;p>&lt;span class="math display">\[
U_\text{rms} \equiv \sqrt{ \frac{1}{T} \int_{0}^{T} U(t)^2 dt }
\]&lt;/span>&lt;/p>
&lt;p>So in general, if we want to calculate a quantity which is related to square periodic quantity, we can use the rms as its “average”(effective) variable to simplify it.&lt;/p>
&lt;p>&lt;span class="math display">\[
z \propto Y(x)^2
\]&lt;/span>&lt;/p>
&lt;p>where &lt;span class="math inline">\(z\)&lt;/span> is a quantity we want to get, &lt;span class="math inline">\(Y(x)\)&lt;/span> is periodic, we can use its rms which does not vary with &lt;span class="math inline">\(x\)&lt;/span>, to simplify the calculation.&lt;/p>
&lt;p>&lt;span class="math display">\[
z \propto Y_\text{rms}^2
\]&lt;/span>&lt;/p>
&lt;p>I feel that we’ve been talk rms is very useful, but now I cannot find it…&lt;/p></description></item></channel></rss>